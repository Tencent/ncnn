name: ESP32-S3

on:
  push:
    branches: [ master ]
    paths:
      - 'examples/test_api.py'
      - 'modules/**'
      - '!modules/stub/ncnn_mp.pyi'
      - 'toolchains/esp32s3.toolchain.cmake'
      - '.github/workflows/esp32s3-build.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'examples/test_api.py'
      - 'modules/**'
      - '!modules/stub/ncnn_mp.pyi'
      - 'toolchains/esp32s3.toolchain.cmake'
      - '.github/workflows/esp32s3-build.yml'

jobs:
  build-esp32s3:
    name: Build for esp32-s3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Checkout esp-idf repo
        uses: actions/checkout@v4
        with:
          repository: espressif/esp-idf
          path: esp-idf
          ref: v5.4.2
          submodules: 'recursive'

      - name: Set up esp-idf
        run: |
          cd esp-idf
          ./install.sh esp32s3

      - name: Get ncnn commit hash
        id: get_ncnn_hash
        run: echo "hash=$(git rev-parse HEAD:ncnn)" >> $GITHUB_OUTPUT
      - name: Cache cross-compiled ncnn library
        id: cache-ncnn
        uses: actions/cache@v4
        with:
          path: ncnn/build-esp32s3/install
          key: ${{ runner.os }}-ncnn-esp32s3-${{ steps.get_ncnn_hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-ncnn-esp32s3-

      - name: Get micropython commit hash
        id: get_mpy_hash
        run: echo "hash=$(git rev-parse HEAD:micropython)" >> $GITHUB_OUTPUT
      - name: Cache mpy-cross compiler
        id: cache-mpy-cross
        uses: actions/cache@v4
        with:
          path: micropython/mpy-cross/build
          key: ${{ runner.os }}-mpy-cross-${{ steps.get_mpy_hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-mpy-cross-

      - name: Build ncnn for esp32-s3
        if: steps.cache-ncnn.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source esp-idf/export.sh
          cd ncnn
          mkdir build-esp32s3 && cd build-esp32s3
          cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/esp32s3.toolchain.cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_OPENMP=OFF -DNCNN_SIMPLEOMP=OFF -DNCNN_STRING=OFF -DNCNN_STDIO=OFF -DNCNN_BF16=OFF -DNCNN_INT8=OFF -DNCNN_DISABLE_RTTI=ON -DNCNN_DISABLE_EXCEPTION=ON -DNCNN_DISABLE_PIC=ON -DNCNN_PIXEL=OFF -DNCNN_PIXEL_DRAWING=OFF -DNCNN_PIXEL_ROTATE=OFF -DNCNN_PIXEL_AFFINE=OFF -DWITH_LAYER_absval=OFF -DWITH_LAYER_argmax=OFF -DWITH_LAYER_batchnorm=OFF -DWITH_LAYER_bias=OFF -DWITH_LAYER_bnll=OFF -DWITH_LAYER_concat=OFF -DWITH_LAYER_convolution=ON -DWITH_LAYER_crop=OFF -DWITH_LAYER_deconvolution=OFF -DWITH_LAYER_dropout=OFF -DWITH_LAYER_eltwise=OFF -DWITH_LAYER_elu=OFF -DWITH_LAYER_embed=OFF -DWITH_LAYER_exp=OFF -DWITH_LAYER_flatten=ON -DWITH_LAYER_innerproduct=ON -DWITH_LAYER_input=ON -DWITH_LAYER_log=OFF -DWITH_LAYER_lrn=OFF -DWITH_LAYER_memorydata=ON -DWITH_LAYER_mvn=OFF -DWITH_LAYER_pooling=ON -DWITH_LAYER_power=OFF -DWITH_LAYER_prelu=OFF -DWITH_LAYER_proposal=OFF -DWITH_LAYER_reduction=OFF -DWITH_LAYER_relu=ON -DWITH_LAYER_reshape=ON -DWITH_LAYER_roipooling=OFF -DWITH_LAYER_scale=OFF -DWITH_LAYER_sigmoid=OFF -DWITH_LAYER_slice=OFF -DWITH_LAYER_softmax=OFF -DWITH_LAYER_split=ON -DWITH_LAYER_spp=OFF -DWITH_LAYER_tanh=OFF -DWITH_LAYER_threshold=OFF -DWITH_LAYER_tile=OFF -DWITH_LAYER_rnn=OFF -DWITH_LAYER_lstm=OFF -DWITH_LAYER_binaryop=ON -DWITH_LAYER_unaryop=OFF -DWITH_LAYER_convolutiondepthwise=OFF -DWITH_LAYER_padding=ON -DWITH_LAYER_squeeze=OFF -DWITH_LAYER_expanddims=OFF -DWITH_LAYER_normalize=OFF -DWITH_LAYER_permute=OFF -DWITH_LAYER_priorbox=OFF -DWITH_LAYER_detectionoutput=OFF -DWITH_LAYER_interp=OFF -DWITH_LAYER_deconvolutiondepthwise=OFF -DWITH_LAYER_shufflechannel=OFF -DWITH_LAYER_instancenorm=OFF -DWITH_LAYER_clip=OFF -DWITH_LAYER_reorg=OFF -DWITH_LAYER_yolodetectionoutput=OFF -DWITH_LAYER_quantize=OFF -DWITH_LAYER_dequantize=OFF -DWITH_LAYER_yolov3detectionoutput=OFF -DWITH_LAYER_psroipooling=OFF -DWITH_LAYER_roialign=OFF -DWITH_LAYER_packing=ON -DWITH_LAYER_requantize=OFF -DWITH_LAYER_cast=ON -DWITH_LAYER_hardsigmoid=OFF -DWITH_LAYER_selu=OFF -DWITH_LAYER_hardswish=OFF -DWITH_LAYER_noop=OFF -DWITH_LAYER_pixelshuffle=OFF -DWITH_LAYER_deepcopy=OFF -DWITH_LAYER_mish=OFF -DWITH_LAYER_statisticspooling=OFF -DWITH_LAYER_swish=OFF -DWITH_LAYER_gemm=ON -DWITH_LAYER_groupnorm=OFF -DWITH_LAYER_layernorm=OFF -DWITH_LAYER_softplus=OFF -DWITH_LAYER_gru=OFF -DWITH_LAYER_multiheadattention=OFF -DWITH_LAYER_gelu=OFF -DWITH_LAYER_convolution1d=OFF -DWITH_LAYER_pooling1d=OFF -DWITH_LAYER_convolutiondepthwise1d=OFF -DWITH_LAYER_convolution3d=OFF -DWITH_LAYER_convolutiondepthwise3d=OFF -DWITH_LAYER_pooling3d=OFF -DWITH_LAYER_matmul=OFF -DWITH_LAYER_deconvolution1d=OFF -DWITH_LAYER_deconvolutiondepthwise1d=OFF -DWITH_LAYER_deconvolution3d=OFF -DWITH_LAYER_deconvolutiondepthwise3d=OFF ..
          make -j$(nproc)
          make install

      - name: Build MicroPython for esp32-s3
        shell: bash
        run: |
          source esp-idf/export.sh
          cd micropython/ports/esp32
          if [ "${{ steps.cache-mpy-cross.outputs.cache-hit }}" != "true" ]; then
            make -C ../../mpy-cross -j$(nproc)
          fi
          make submodules BOARD=ESP32_GENERIC_S3 -j$(nproc)
          idf.py -D MICROPY_BOARD=ESP32_GENERIC_S3 -D USER_C_MODULES=../../../../modules/ncnn_mp/micropython.cmake -D NCNN_INSTALL_PREFIX=../../../../ncnn/build-esp32s3/install build