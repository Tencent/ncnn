/* automatically generated by rust-bindgen 0.58.1 */

pub const NCNN_STDIO: u32 = 1;
pub const NCNN_STRING: u32 = 1;
pub const NCNN_SIMPLEOCV: u32 = 0;
pub const NCNN_SIMPLEOMP: u32 = 0;
pub const NCNN_SIMPLESTL: u32 = 0;
pub const NCNN_THREADS: u32 = 1;
pub const NCNN_BENCHMARK: u32 = 0;
pub const NCNN_PLATFORM_API: u32 = 1;
pub const NCNN_PIXEL: u32 = 1;
pub const NCNN_PIXEL_ROTATE: u32 = 1;
pub const NCNN_PIXEL_AFFINE: u32 = 1;
pub const NCNN_VULKAN: u32 = 0;
pub const NCNN_RUNTIME_CPU: u32 = 1;
pub const NCNN_AVX2: u32 = 1;
pub const NCNN_ARM82: u32 = 0;
pub const NCNN_VERSION_STRING: &'static [u8; 13usize] = b"1.0.20210413\0";
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const NCNN_MAT_PIXEL_RGB: u32 = 1;
pub const NCNN_MAT_PIXEL_BGR: u32 = 2;
pub const NCNN_MAT_PIXEL_GRAY: u32 = 3;
pub const NCNN_MAT_PIXEL_RGBA: u32 = 4;
pub const NCNN_MAT_PIXEL_BGRA: u32 = 5;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ncnn_version() -> *const ::std::os::raw::c_char;
}
pub type ncnn_allocator_t = *mut __ncnn_allocator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_allocator_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub fast_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: ncnn_allocator_t,
            size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fast_free: ::std::option::Option<
        unsafe extern "C" fn(allocator: ncnn_allocator_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout___ncnn_allocator_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_allocator_t>(),
        24usize,
        concat!("Size of: ", stringify!(__ncnn_allocator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_allocator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_allocator_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_allocator_t>())).pthis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_allocator_t>())).fast_malloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(fast_malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_allocator_t>())).fast_free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(fast_free)
        )
    );
}
extern "C" {
    pub fn ncnn_allocator_create_pool_allocator() -> ncnn_allocator_t;
}
extern "C" {
    pub fn ncnn_allocator_create_unlocked_pool_allocator() -> ncnn_allocator_t;
}
extern "C" {
    pub fn ncnn_allocator_destroy(allocator: ncnn_allocator_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_option_t {
    _unused: [u8; 0],
}
pub type ncnn_option_t = *mut __ncnn_option_t;
extern "C" {
    pub fn ncnn_option_create() -> ncnn_option_t;
}
extern "C" {
    pub fn ncnn_option_destroy(opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_option_get_num_threads(opt: ncnn_option_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_option_set_num_threads(opt: ncnn_option_t, num_threads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_option_get_use_vulkan_compute(opt: ncnn_option_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_option_set_use_vulkan_compute(
        opt: ncnn_option_t,
        use_vulkan_compute: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_mat_t {
    _unused: [u8; 0],
}
pub type ncnn_mat_t = *mut __ncnn_mat_t;
extern "C" {
    pub fn ncnn_mat_create(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_1d(w: ::std::os::raw::c_int, allocator: ncnn_allocator_t) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_2d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_3d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_1d(
        w: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_2d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_3d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_1d_elem(
        w: ::std::os::raw::c_int,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_2d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_3d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_1d_elem(
        w: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_2d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_3d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: size_t,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_destroy(mat: ncnn_mat_t);
}
extern "C" {
    pub fn ncnn_mat_fill_float(mat: ncnn_mat_t, v: f32);
}
extern "C" {
    pub fn ncnn_mat_clone(mat: ncnn_mat_t, allocator: ncnn_allocator_t) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_1d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_2d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_3d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_get_dims(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_w(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_h(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_c(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_elemsize(mat: ncnn_mat_t) -> size_t;
}
extern "C" {
    pub fn ncnn_mat_get_elempack(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_cstep(mat: ncnn_mat_t) -> size_t;
}
extern "C" {
    pub fn ncnn_mat_get_data(mat: ncnn_mat_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ncnn_mat_get_channel_data(
        mat: ncnn_mat_t,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ncnn_mat_from_pixels(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_roi(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_roi_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_to_pixels(
        mat: ncnn_mat_t,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_mat_to_pixels_resize(
        mat: ncnn_mat_t,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        target_stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_mat_substract_mean_normalize(
        mat: ncnn_mat_t,
        mean_vals: *const f32,
        norm_vals: *const f32,
    );
}
extern "C" {
    pub fn ncnn_convert_packing(
        src: ncnn_mat_t,
        dst: *mut ncnn_mat_t,
        elempack: ::std::os::raw::c_int,
        opt: ncnn_option_t,
    );
}
extern "C" {
    pub fn ncnn_flatten(src: ncnn_mat_t, dst: *mut ncnn_mat_t, opt: ncnn_option_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_blob_t {
    _unused: [u8; 0],
}
pub type ncnn_blob_t = *mut __ncnn_blob_t;
extern "C" {
    pub fn ncnn_blob_get_name(blob: ncnn_blob_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_blob_get_producer(blob: ncnn_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_consumer(blob: ncnn_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_shape(
        blob: ncnn_blob_t,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_paramdict_t {
    _unused: [u8; 0],
}
pub type ncnn_paramdict_t = *mut __ncnn_paramdict_t;
extern "C" {
    pub fn ncnn_paramdict_create() -> ncnn_paramdict_t;
}
extern "C" {
    pub fn ncnn_paramdict_destroy(pd: ncnn_paramdict_t);
}
extern "C" {
    pub fn ncnn_paramdict_get_type(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_paramdict_get_int(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_paramdict_get_float(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: f32,
    ) -> f32;
}
extern "C" {
    pub fn ncnn_paramdict_get_array(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: ncnn_mat_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_paramdict_set_int(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_paramdict_set_float(pd: ncnn_paramdict_t, id: ::std::os::raw::c_int, f: f32);
}
extern "C" {
    pub fn ncnn_paramdict_set_array(pd: ncnn_paramdict_t, id: ::std::os::raw::c_int, v: ncnn_mat_t);
}
pub type ncnn_datareader_t = *mut __ncnn_datareader_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_datareader_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub scan: ::std::option::Option<
        unsafe extern "C" fn(
            dr: ncnn_datareader_t,
            format: *const ::std::os::raw::c_char,
            p: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            dr: ncnn_datareader_t,
            buf: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> size_t,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_datareader_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_datareader_t>(),
        24usize,
        concat!("Size of: ", stringify!(__ncnn_datareader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_datareader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_datareader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_datareader_t>())).pthis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_datareader_t>())).scan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_datareader_t>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(read)
        )
    );
}
extern "C" {
    pub fn ncnn_datareader_create() -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_create_from_stdio(fp: *mut FILE) -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_DataReader_read_empty() -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_create_from_memory(
        mem: *mut *const ::std::os::raw::c_uchar,
    ) -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_destroy(dr: ncnn_datareader_t);
}
pub type ncnn_modelbin_t = *mut __ncnn_modelbin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_modelbin_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub load_1d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
    pub load_2d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
    pub load_3d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            c: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_modelbin_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_modelbin_t>(),
        32usize,
        concat!("Size of: ", stringify!(__ncnn_modelbin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_modelbin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_modelbin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_modelbin_t>())).pthis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_modelbin_t>())).load_1d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_1d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_modelbin_t>())).load_2d as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_2d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_modelbin_t>())).load_3d as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_3d)
        )
    );
}
extern "C" {
    pub fn ncnn_modelbin_create_from_datareader(dr: ncnn_datareader_t) -> ncnn_modelbin_t;
}
extern "C" {
    pub fn ncnn_modelbin_create_from_mat_array(
        weights: *const ncnn_mat_t,
        n: ::std::os::raw::c_int,
    ) -> ncnn_modelbin_t;
}
extern "C" {
    pub fn ncnn_modelbin_destroy(mb: ncnn_modelbin_t);
}
pub type ncnn_layer_t = *mut __ncnn_layer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_layer_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub load_param: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, pd: ncnn_paramdict_t) -> ::std::os::raw::c_int,
    >,
    pub load_model: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, mb: ncnn_modelbin_t) -> ::std::os::raw::c_int,
    >,
    pub create_pipeline: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, opt: ncnn_option_t) -> ::std::os::raw::c_int,
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, opt: ncnn_option_t) -> ::std::os::raw::c_int,
    >,
    pub forward_1: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_blob: ncnn_mat_t,
            top_blob: *mut ncnn_mat_t,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_n: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_blobs: *const ncnn_mat_t,
            n: ::std::os::raw::c_int,
            top_blobs: *mut *mut ncnn_mat_t,
            n2: ::std::os::raw::c_int,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_inplace_1: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_top_blob: ncnn_mat_t,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_inplace_n: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_top_blobs: *mut ncnn_mat_t,
            n: ::std::os::raw::c_int,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_layer_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_layer_t>(),
        72usize,
        concat!("Size of: ", stringify!(__ncnn_layer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_layer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_layer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).pthis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).load_param as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(load_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).load_model as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(load_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).create_pipeline as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(create_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).destroy_pipeline as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(destroy_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).forward_1 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_layer_t>())).forward_n as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_n)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_layer_t>())).forward_inplace_1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_inplace_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_layer_t>())).forward_inplace_n as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_inplace_n)
        )
    );
}
extern "C" {
    pub fn ncnn_layer_create() -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_create_by_typeindex(typeindex: ::std::os::raw::c_int) -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_create_by_type(type_: *const ::std::os::raw::c_char) -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_destroy(layer: ncnn_layer_t);
}
extern "C" {
    pub fn ncnn_layer_get_name(layer: ncnn_layer_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_layer_get_typeindex(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_type(layer: ncnn_layer_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_layer_get_one_blob_only(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_inplace(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_vulkan(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_packing(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_bf16_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_fp16_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_image_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_set_one_blob_only(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_inplace(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_vulkan(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_packing(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_bf16_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_fp16_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_image_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_get_bottom_count(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_bottom(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_top_count(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_top(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_bottom_shape(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_blob_get_top_shape(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
pub type ncnn_layer_creator_t = ::std::option::Option<
    unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void) -> ncnn_layer_t,
>;
pub type ncnn_layer_destroyer_t = ::std::option::Option<
    unsafe extern "C" fn(layer: ncnn_layer_t, userdata: *mut ::std::os::raw::c_void),
>;
pub type ncnn_net_custom_layer_factory_t = *mut __ncnn_net_custom_layer_factory_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_net_custom_layer_factory_t {
    pub creator: ncnn_layer_creator_t,
    pub destroyer: ncnn_layer_destroyer_t,
    pub userdata: *mut ::std::os::raw::c_void,
    pub next: ncnn_net_custom_layer_factory_t,
}
#[test]
fn bindgen_test_layout___ncnn_net_custom_layer_factory_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_net_custom_layer_factory_t>(),
        32usize,
        concat!("Size of: ", stringify!(__ncnn_net_custom_layer_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_net_custom_layer_factory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ncnn_net_custom_layer_factory_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_net_custom_layer_factory_t>())).creator as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(creator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_net_custom_layer_factory_t>())).destroyer as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(destroyer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_net_custom_layer_factory_t>())).userdata as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_net_custom_layer_factory_t>())).next as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(next)
        )
    );
}
pub type ncnn_net_t = *mut __ncnn_net_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_net_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub custom_layer_factory: ncnn_net_custom_layer_factory_t,
}
#[test]
fn bindgen_test_layout___ncnn_net_t() {
    assert_eq!(
        ::std::mem::size_of::<__ncnn_net_t>(),
        16usize,
        concat!("Size of: ", stringify!(__ncnn_net_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_net_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_net_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ncnn_net_t>())).pthis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ncnn_net_t>())).custom_layer_factory as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_t),
            "::",
            stringify!(custom_layer_factory)
        )
    );
}
extern "C" {
    pub fn ncnn_net_create() -> ncnn_net_t;
}
extern "C" {
    pub fn ncnn_net_destroy(net: ncnn_net_t);
}
extern "C" {
    pub fn ncnn_net_set_option(net: ncnn_net_t, opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_net_register_custom_layer_by_type(
        net: ncnn_net_t,
        type_: *const ::std::os::raw::c_char,
        creator: ncnn_layer_creator_t,
        destroyer: ncnn_layer_destroyer_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ncnn_net_register_custom_layer_by_typeindex(
        net: ncnn_net_t,
        typeindex: ::std::os::raw::c_int,
        creator: ncnn_layer_creator_t,
        destroyer: ncnn_layer_destroyer_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ncnn_net_load_param(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_clear(net: ncnn_net_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_extractor_t {
    _unused: [u8; 0],
}
pub type ncnn_extractor_t = *mut __ncnn_extractor_t;
extern "C" {
    pub fn ncnn_extractor_create(net: ncnn_net_t) -> ncnn_extractor_t;
}
extern "C" {
    pub fn ncnn_extractor_destroy(ex: ncnn_extractor_t);
}
extern "C" {
    pub fn ncnn_extractor_set_option(ex: ncnn_extractor_t, opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_extractor_input(
        ex: ncnn_extractor_t,
        name: *const ::std::os::raw::c_char,
        mat: ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_extract(
        ex: ncnn_extractor_t,
        name: *const ::std::os::raw::c_char,
        mat: *mut ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_input_index(
        ex: ncnn_extractor_t,
        index: ::std::os::raw::c_int,
        mat: ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_extract_index(
        ex: ncnn_extractor_t,
        index: ::std::os::raw::c_int,
        mat: *mut ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
