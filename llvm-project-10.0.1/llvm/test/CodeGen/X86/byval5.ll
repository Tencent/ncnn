; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-linux -mattr=-avx | FileCheck %s -check-prefix=X64
; Win64 has not supported byval yet.
; RUN: llc < %s -mtriple=i686-- -mattr=-avx | FileCheck %s -check-prefix=X32

%struct.s = type { i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8, i8, i8, i8, i8, i8, i8, i8,
                   i8 }


define void @g(i8 signext  %a1, i8 signext  %a2, i8 signext  %a3, i8 signext  %a4, i8 signext  %a5, i8 signext  %a6) nounwind {
; X64-LABEL: g:
; X64:       # %bb.0: # %entry
; X64-NEXT:    pushq %rbx
; X64-NEXT:    subq $272, %rsp # imm = 0x110
; X64-NEXT:    movb %dil, {{[0-9]+}}(%rsp)
; X64-NEXT:    movb %sil, {{[0-9]+}}(%rsp)
; X64-NEXT:    movb %dl, {{[0-9]+}}(%rsp)
; X64-NEXT:    movb %cl, {{[0-9]+}}(%rsp)
; X64-NEXT:    movb %r8b, {{[0-9]+}}(%rsp)
; X64-NEXT:    movb %r9b, {{[0-9]+}}(%rsp)
; X64-NEXT:    leaq {{[0-9]+}}(%rsp), %rbx
; X64-NEXT:    movl $16, %ecx
; X64-NEXT:    movq %rsp, %rdi
; X64-NEXT:    movq %rbx, %rsi
; X64-NEXT:    rep;movsq (%rsi), %es:(%rdi)
; X64-NEXT:    movb {{[0-9]+}}(%rsp), %al
; X64-NEXT:    movb %al, {{[0-9]+}}(%rsp)
; X64-NEXT:    callq f
; X64-NEXT:    movl $16, %ecx
; X64-NEXT:    movq %rsp, %rdi
; X64-NEXT:    movq %rbx, %rsi
; X64-NEXT:    rep;movsq (%rsi), %es:(%rdi)
; X64-NEXT:    movb {{[0-9]+}}(%rsp), %al
; X64-NEXT:    movb %al, {{[0-9]+}}(%rsp)
; X64-NEXT:    callq f
; X64-NEXT:    addq $272, %rsp # imm = 0x110
; X64-NEXT:    popq %rbx
; X64-NEXT:    retq
;
; X32-LABEL: g:
; X32:       # %bb.0: # %entry
; X32-NEXT:    pushl %ebp
; X32-NEXT:    movl %esp, %ebp
; X32-NEXT:    pushl %ebx
; X32-NEXT:    pushl %edi
; X32-NEXT:    pushl %esi
; X32-NEXT:    andl $-8, %esp
; X32-NEXT:    subl $272, %esp # imm = 0x110
; X32-NEXT:    movb 28(%ebp), %al
; X32-NEXT:    movb 24(%ebp), %cl
; X32-NEXT:    movb 20(%ebp), %dl
; X32-NEXT:    movb 16(%ebp), %ah
; X32-NEXT:    movb 12(%ebp), %ch
; X32-NEXT:    movb 8(%ebp), %dh
; X32-NEXT:    movb %dh, {{[0-9]+}}(%esp)
; X32-NEXT:    movb %ch, {{[0-9]+}}(%esp)
; X32-NEXT:    movb %ah, {{[0-9]+}}(%esp)
; X32-NEXT:    movb %dl, {{[0-9]+}}(%esp)
; X32-NEXT:    movb %cl, {{[0-9]+}}(%esp)
; X32-NEXT:    movb %al, {{[0-9]+}}(%esp)
; X32-NEXT:    leal {{[0-9]+}}(%esp), %ebx
; X32-NEXT:    movl $32, %ecx
; X32-NEXT:    movl %esp, %edi
; X32-NEXT:    movl %ebx, %esi
; X32-NEXT:    rep;movsl (%esi), %es:(%edi)
; X32-NEXT:    movb {{[0-9]+}}(%esp), %al
; X32-NEXT:    movb %al, {{[0-9]+}}(%esp)
; X32-NEXT:    calll f
; X32-NEXT:    movl $32, %ecx
; X32-NEXT:    movl %esp, %edi
; X32-NEXT:    movl %ebx, %esi
; X32-NEXT:    rep;movsl (%esi), %es:(%edi)
; X32-NEXT:    movb {{[0-9]+}}(%esp), %al
; X32-NEXT:    movb %al, {{[0-9]+}}(%esp)
; X32-NEXT:    calll f
; X32-NEXT:    leal -12(%ebp), %esp
; X32-NEXT:    popl %esi
; X32-NEXT:    popl %edi
; X32-NEXT:    popl %ebx
; X32-NEXT:    popl %ebp
; X32-NEXT:    retl
entry:
        %a = alloca %struct.s
        %tmp = getelementptr %struct.s, %struct.s* %a, i32 0, i32 0
        store i8 %a1, i8* %tmp, align 8
        %tmp2 = getelementptr %struct.s, %struct.s* %a, i32 0, i32 1
        store i8 %a2, i8* %tmp2, align 8
        %tmp4 = getelementptr %struct.s, %struct.s* %a, i32 0, i32 2
        store i8 %a3, i8* %tmp4, align 8
        %tmp6 = getelementptr %struct.s, %struct.s* %a, i32 0, i32 3
        store i8 %a4, i8* %tmp6, align 8
        %tmp8 = getelementptr %struct.s, %struct.s* %a, i32 0, i32 4
        store i8 %a5, i8* %tmp8, align 8
        %tmp10 = getelementptr %struct.s, %struct.s* %a, i32 0, i32 5
        store i8 %a6, i8* %tmp10, align 8
        call void @f( %struct.s* byval %a )
        call void @f( %struct.s* byval %a )
        ret void
}

declare void @f(%struct.s* byval)
