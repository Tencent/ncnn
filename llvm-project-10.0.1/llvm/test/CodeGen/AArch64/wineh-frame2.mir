# RUN: llc -o - %s -mtriple=aarch64-windows -start-before=prologepilog \
# RUN:   -stop-after=prologepilog | FileCheck %s
# Check save_freg_x, save_frep, save_reg

# CHECK:       early-clobber $sp = frame-setup STRDpre killed $d12, $sp, -48
# CHECK-NEXT:  frame-setup SEH_SaveFReg_X 12, -48
# CHECK-NEXT:  frame-setup STPDi killed $d10, killed $d11, $sp, 1
# CHECK-NEXT:  frame-setup SEH_SaveFRegP 10, 11, 8
# CHECK-NEXT:  frame-setup STPDi killed $d8, killed $d9, $sp, 3
# CHECK-NEXT:  frame-setup SEH_SaveFRegP 8, 9, 24
# CHECK-NEXT:  frame-setup STRXui killed $x19, $sp, 5
# CHECK-NEXT:  frame-setup SEH_SaveReg 19, 40
# CHECK-NEXT:  frame-setup SEH_PrologEnd
# CHECK:       frame-destroy SEH_EpilogStart
# CHECK-NEXT:  $x19 = frame-destroy LDRXui $sp, 5
# CHECK-NEXT:  frame-destroy SEH_SaveReg 19, 40
# CHECK-NEXT:  $d8, $d9 = frame-destroy LDPDi $sp, 3
# CHECK-NEXT:  frame-destroy SEH_SaveFRegP 8, 9, 24
# CHECK-NEXT:  $d10, $d11 = frame-destroy LDPDi $sp, 1
# CHECK-NEXT:  frame-destroy SEH_SaveFRegP 10, 11, 8
# CHECK-NEXT:  early-clobber $sp, $d12 = frame-destroy LDRDpost $sp, 48
# CHECK-NEXT:  frame-destroy SEH_SaveFReg_X 12, -48
# CHECK-NEXT:  frame-destroy SEH_EpilogEnd
# CHECK-NEXT:  RET_ReallyLR implicit $x0
...
---
name:            test
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       true
registers:
liveins:
  - { reg: '$w0', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       112
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: true
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
stack:
constants:
body:             |
  bb.0.entry:
    liveins: $x0, $x1, $d0, $d1, $d10, $d11, $d8, $d9
    $x19 = ADDXrr $x0, killed $x1
    $d8 = FADDDrr killed $d0, $d1
    $d9 = FADDDrr $d8, $d1
    $d10 = FADDDrr $d9, $d8
    $d11 = FADDDrr killed $d9, $d10
    $d12 = FADDDrr $d11, killed $d11
    $x0 = COPY $d12
    RET_ReallyLR implicit $x0

...
