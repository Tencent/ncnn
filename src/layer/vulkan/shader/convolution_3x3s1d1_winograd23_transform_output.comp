// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int c = 0;
layout (constant_id = shape_constant_id_offset + 1) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 2) const int block_x = 0;
layout (constant_id = shape_constant_id_offset + 3) const int block_y = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D top_tm_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer top_tm_blob { sfp top_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 2) readonly buffer bias_blob { sfp bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int c;
    int cstep;

    int block_x;
    int block_y;

    int outw;
    int outh;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(block_x) || gy >= psc(block_y) || gz >= psc(c))
        return;

    // load 16
#if NCNN_image_shader
    int sx = gy * psc(block_x) + gx;

    afp v00 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 0));
    afp v01 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 1));
    afp v02 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 2));
    afp v03 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 3));
    afp v10 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 4));
    afp v11 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 5));
    afp v12 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 6));
    afp v13 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 7));
    afp v20 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 8));
    afp v21 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 9));
    afp v22 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 10));
    afp v23 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 11));
    afp v30 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 12));
    afp v31 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 13));
    afp v32 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 14));
    afp v33 = image3d_ld1(top_tm_blob, ivec3(sx, gz, 15));
#else
    int v_tm_offset = gz * psc(block_x) * psc(block_y) + gy * psc(block_x) + gx;

    afp v00 = buffer_ld1(top_tm_blob_data, v_tm_offset + 0 * psc(cstep));
    afp v01 = buffer_ld1(top_tm_blob_data, v_tm_offset + 1 * psc(cstep));
    afp v02 = buffer_ld1(top_tm_blob_data, v_tm_offset + 2 * psc(cstep));
    afp v03 = buffer_ld1(top_tm_blob_data, v_tm_offset + 3 * psc(cstep));
    afp v10 = buffer_ld1(top_tm_blob_data, v_tm_offset + 4 * psc(cstep));
    afp v11 = buffer_ld1(top_tm_blob_data, v_tm_offset + 5 * psc(cstep));
    afp v12 = buffer_ld1(top_tm_blob_data, v_tm_offset + 6 * psc(cstep));
    afp v13 = buffer_ld1(top_tm_blob_data, v_tm_offset + 7 * psc(cstep));
    afp v20 = buffer_ld1(top_tm_blob_data, v_tm_offset + 8 * psc(cstep));
    afp v21 = buffer_ld1(top_tm_blob_data, v_tm_offset + 9 * psc(cstep));
    afp v22 = buffer_ld1(top_tm_blob_data, v_tm_offset + 10 * psc(cstep));
    afp v23 = buffer_ld1(top_tm_blob_data, v_tm_offset + 11 * psc(cstep));
    afp v30 = buffer_ld1(top_tm_blob_data, v_tm_offset + 12 * psc(cstep));
    afp v31 = buffer_ld1(top_tm_blob_data, v_tm_offset + 13 * psc(cstep));
    afp v32 = buffer_ld1(top_tm_blob_data, v_tm_offset + 14 * psc(cstep));
    afp v33 = buffer_ld1(top_tm_blob_data, v_tm_offset + 15 * psc(cstep));
#endif

    // const float itm[2][4] = {
    //     {1.0f,  1.0f,  1.0f,  0.0f},
    //     {0.0f,  1.0f, -1.0f,  1.0f}
    // };

    // implicit transpose
    afp m00 = v00 + v01 + v02;
    afp m01 = v10 + v11 + v12;
    afp m02 = v20 + v21 + v22;
    afp m03 = v30 + v31 + v32;

    afp m10 = v01 - v02 + v03;
    afp m11 = v11 - v12 + v13;
    afp m12 = v21 - v22 + v23;
    afp m13 = v31 - v32 + v33;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        const afp bias_value = image3d_ld1(bias_blob, ivec3(gz, 0, 0));
#else
        const afp bias_value = buffer_ld1(bias_data, gz);
#endif

        v00 = bias_value + m00 + m01 + m02;
        v10 = bias_value + m10 + m11 + m12;

        v01 = bias_value + m01 - m02 + m03;
        v11 = bias_value + m11 - m12 + m13;
    }
    else
    {
        v00 = m00 + m01 + m02;
        v10 = m10 + m11 + m12;

        v01 = m01 - m02 + m03;
        v11 = m11 - m12 + m13;
    }

    v00 = activation_afp(v00, activation_type, activation_param_0, activation_param_1);
    v10 = activation_afp(v10, activation_type, activation_param_0, activation_param_1);
    v01 = activation_afp(v01, activation_type, activation_param_0, activation_param_1);
    v11 = activation_afp(v11, activation_type, activation_param_0, activation_param_1);

    // store 2x2
    int x = gx * 2;
    int y = gy * 2;

#if NCNN_image_shader
    image3d_st1(top_blob, ivec3(x, y, gz), v00);
    image3d_st1(top_blob, ivec3(x + 1, y, gz), v01);
    image3d_st1(top_blob, ivec3(x, y + 1, gz), v10);
    image3d_st1(top_blob, ivec3(x + 1, y + 1, gz), v11);
#else
    int v_offset_0 = gz * psc(outcstep) + y * psc(outw) + x;
    int v_offset_1 = v_offset_0 + psc(outw);

    buffer_st1(top_blob_data, v_offset_0 + 0, v00);
    if (x + 1 < psc(outw)) buffer_st1(top_blob_data, v_offset_0 + 1, v01);
    if (y + 1 < psc(outh)) buffer_st1(top_blob_data, v_offset_1 + 0, v10);
    if (y + 1 < psc(outh) && x + 1 < psc(outw)) buffer_st1(top_blob_data, v_offset_1 + 1, v11);
#endif
}
