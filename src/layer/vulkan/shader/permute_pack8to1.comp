// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int order_type = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    if (psc(dims) == 2)
    {
        // order_type
        // 0 = w h
        // 1 = h w

        afpvec8 v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, 0));

        if (order_type == 0)
        {
            ivec4 y4 = gy * 8 + ivec4(0, 1, 2, 3);
            ivec4 yy4 = y4 + 4;

            image3d_st1(top_blob_3d, ivec3(gx, y4.r, 0), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gx, y4.g, 0), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gx, y4.b, 0), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gx, y4.a, 0), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.r, 0), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.g, 0), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.b, 0), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.a, 0), v[1].a);
        }
        if (order_type == 1)
        {
            ivec4 x4 = gy * 8 + ivec4(0, 1, 2, 3);
            ivec4 xx4 = x4 + 4;

            image3d_st1(top_blob_3d, ivec3(x4.r, gx, 0), v[0].r);
            image3d_st1(top_blob_3d, ivec3(x4.g, gx, 0), v[0].g);
            image3d_st1(top_blob_3d, ivec3(x4.b, gx, 0), v[0].b);
            image3d_st1(top_blob_3d, ivec3(x4.a, gx, 0), v[0].a);
            image3d_st1(top_blob_3d, ivec3(xx4.r, gx, 0), v[1].r);
            image3d_st1(top_blob_3d, ivec3(xx4.g, gx, 0), v[1].g);
            image3d_st1(top_blob_3d, ivec3(xx4.b, gx, 0), v[1].b);
            image3d_st1(top_blob_3d, ivec3(xx4.a, gx, 0), v[1].a);
        }
    }
    else // if (psc(dims) == 3)
    {
        // order_type
        // 0 = w h c
        // 1 = h w c
        // 2 = w c h
        // 3 = c w h
        // 4 = h c w
        // 5 = c h w

        afpvec8 v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, gz));

        if (order_type == 0)
        {
            ivec4 z4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 zz4 = z4 + 4;

            image3d_st1(top_blob_3d, ivec3(gx, gy, z4.r), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4.g), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4.b), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4.a), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gx, gy, zz4.r), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gx, gy, zz4.g), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gx, gy, zz4.b), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gx, gy, zz4.a), v[1].a);
        }
        if (order_type == 1)
        {
            ivec4 z4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 zz4 = z4 + 4;

            image3d_st1(top_blob_3d, ivec3(gy, gx, z4.r), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gy, gx, z4.g), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gy, gx, z4.b), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gy, gx, z4.a), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gy, gx, zz4.r), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gy, gx, zz4.g), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gy, gx, zz4.b), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gy, gx, zz4.a), v[1].a);
        }
        if (order_type == 2)
        {
            ivec4 y4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 yy4 = y4 + 4;

            image3d_st1(top_blob_3d, ivec3(gx, y4.r, gy), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gx, y4.g, gy), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gx, y4.b, gy), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gx, y4.a, gy), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.r, gy), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.g, gy), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.b, gy), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gx, yy4.a, gy), v[1].a);
        }
        if (order_type == 3)
        {
            ivec4 x4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 xx4 = x4 + 4;

            image3d_st1(top_blob_3d, ivec3(x4.r, gx, gy), v[0].r);
            image3d_st1(top_blob_3d, ivec3(x4.g, gx, gy), v[0].g);
            image3d_st1(top_blob_3d, ivec3(x4.b, gx, gy), v[0].b);
            image3d_st1(top_blob_3d, ivec3(x4.a, gx, gy), v[0].a);
            image3d_st1(top_blob_3d, ivec3(xx4.r, gx, gy), v[1].r);
            image3d_st1(top_blob_3d, ivec3(xx4.g, gx, gy), v[1].g);
            image3d_st1(top_blob_3d, ivec3(xx4.b, gx, gy), v[1].b);
            image3d_st1(top_blob_3d, ivec3(xx4.a, gx, gy), v[1].a);
        }
        if (order_type == 4)
        {
            ivec4 y4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 yy4 = y4 + 4;

            image3d_st1(top_blob_3d, ivec3(gy, y4.r, gx), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gy, y4.g, gx), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gy, y4.b, gx), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gy, y4.a, gx), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gy, yy4.r, gx), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gy, yy4.g, gx), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gy, yy4.b, gx), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gy, yy4.a, gx), v[1].a);
        }
        if (order_type == 5)
        {
            ivec4 x4 = gz * 8 + ivec4(0, 1, 2, 3);
            ivec4 xx4 = x4 + 4;

            image3d_st1(top_blob_3d, ivec3(x4.r, gy, gx), v[0].r);
            image3d_st1(top_blob_3d, ivec3(x4.g, gy, gx), v[0].g);
            image3d_st1(top_blob_3d, ivec3(x4.b, gy, gx), v[0].b);
            image3d_st1(top_blob_3d, ivec3(x4.a, gy, gx), v[0].a);
            image3d_st1(top_blob_3d, ivec3(xx4.r, gy, gx), v[1].r);
            image3d_st1(top_blob_3d, ivec3(xx4.g, gy, gx), v[1].g);
            image3d_st1(top_blob_3d, ivec3(xx4.b, gy, gx), v[1].b);
            image3d_st1(top_blob_3d, ivec3(xx4.a, gy, gx), v[1].a);
        }
    }
#else
    ivec4 v_offset;
    ivec4 vv_offset;

    if (psc(dims) == 2)
    {
        // order_type
        // 0 = w h
        // 1 = h w

        if (order_type == 0)
        {
            v_offset = ivec4((gy * 8) * psc(outw) + gx) + ivec4(0, 1, 2, 3) * psc(outw);
            vv_offset = v_offset + 4 * psc(outw);
        }
        if (order_type == 1)
        {
            v_offset = ivec4(gx * psc(outw) + gy * 8) + ivec4(0, 1, 2, 3);
            vv_offset = v_offset + 4;
        }
    }
    else // if (psc(dims) == 3)
    {
        // order_type
        // 0 = w h c
        // 1 = h w c
        // 2 = w c h
        // 3 = c w h
        // 4 = h c w
        // 5 = c h w

        if (order_type == 0)
        {
            v_offset = ivec4((gz * 8) * psc(outcstep) + gy * psc(outw) + gx) + ivec4(0, 1, 2, 3) * psc(outcstep);
            vv_offset = v_offset + 4 * psc(outcstep);
        }
        if (order_type == 1)
        {
            v_offset = ivec4((gz * 8) * psc(outcstep) + gx * psc(outw) + gy) + ivec4(0, 1, 2, 3) * psc(outcstep);
            vv_offset = v_offset + 4 * psc(outcstep);
        }
        if (order_type == 2)
        {
            v_offset = ivec4(gy * psc(outcstep) + (gz * 8) * psc(outw) + gx) + ivec4(0, 1, 2, 3) * psc(outw);
            vv_offset = v_offset + 4 * psc(outw);
        }
        if (order_type == 3)
        {
            v_offset = ivec4(gy * psc(outcstep) + gx * psc(outw) + gz * 8) + ivec4(0, 1, 2, 3);
            vv_offset = v_offset + 4;
        }
        if (order_type == 4)
        {
            v_offset = ivec4(gx * psc(outcstep) + (gz * 8) * psc(outw) + gy) + ivec4(0, 1, 2, 3) * psc(outw);
            vv_offset = v_offset + 4 * psc(outw);
        }
        if (order_type == 5)
        {
            v_offset = ivec4(gx * psc(outcstep) + gy * psc(outw) + gz * 8) + ivec4(0, 1, 2, 3);
            vv_offset = v_offset + 4;
        }
    }

    int gi = gz * psc(cstep) + gy * psc(w) + gx;

    buffer_cp8to1(top_blob_data, v_offset, vv_offset, bottom_blob_data, gi);
#endif
}
