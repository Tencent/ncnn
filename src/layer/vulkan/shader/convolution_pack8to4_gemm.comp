// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int kernel_h = 1;
layout (constant_id = 2) const int dilation_w = 1;
layout (constant_id = 3) const int dilation_h = 1;
layout (constant_id = 4) const int stride_w = 1;
layout (constant_id = 5) const int stride_h = 1;
layout (constant_id = 6) const int bias_term = 0;
layout (constant_id = 7) const int activation_type = 0;
layout (constant_id = 8) const float activation_param_0 = 0;
layout (constant_id = 9) const float activation_param_1 = 0;

#define shape_constant_id_offset 10
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec8 weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);

    const int outsize = psc(outw) * psc(outh);

    if (gx >= outsize || gy >= psc(outc))
        return;

    afpvec4 sum0;
    afpvec4 sum1;
    afpvec4 sum2;
    afpvec4 sum3;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum0 = image3d_ld4(bias_blob, ivec3(gy, 0, 0));
#else
        sum0 = buffer_ld4(bias_data, gy);
#endif
        sum1 = sum0;
        sum2 = sum0;
        sum3 = sum0;
    }
    else
    {
        sum0 = afpvec4(0.f);
        sum1 = afpvec4(0.f);
        sum2 = afpvec4(0.f);
        sum3 = afpvec4(0.f);
    }

    const int maxk = kernel_w * kernel_h;
    const int N = psc(c) * maxk;

    const ivec4 gx4 = gx + ivec4(0, 1, 2, 3);

    const ivec4 sy4 = gx4 / psc(outw);
    const ivec4 sx4 = gx4 % psc(outw);

    const ivec4 sxs4 = sx4 * stride_w;
    const ivec4 sys4 = sy4 * stride_h;

#if NCNN_image_shader
    for (int z = 0; z < N; z++)
    {
        const int sz = z / maxk;
        const int kk = z % maxk;

        const int ky = kk / kernel_w;
        const int kx = kk % kernel_w;

        const ivec4 x4 = sxs4 + kx * dilation_w;
        const ivec4 y4 = sys4 + ky * dilation_h;

        afpvec8 v0 = image3d_ld8(bottom_blob, ivec3(x4.r, y4.r, sz));
        afpvec8 v1 = image3d_ld8(bottom_blob, ivec3(x4.g, y4.g, sz));
        afpvec8 v2 = image3d_ld8(bottom_blob, ivec3(x4.b, y4.b, sz));
        afpvec8 v3 = image3d_ld8(bottom_blob, ivec3(x4.a, y4.a, sz));

        afpvec8 k0 = image3d_ld8(weight_blob, ivec3(z * 4 + 0, gy, 0));
        afpvec8 k1 = image3d_ld8(weight_blob, ivec3(z * 4 + 1, gy, 0));
        afpvec8 k2 = image3d_ld8(weight_blob, ivec3(z * 4 + 2, gy, 0));
        afpvec8 k3 = image3d_ld8(weight_blob, ivec3(z * 4 + 3, gy, 0));

        // sum += v * k;
        sum0.r += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
        sum0.g += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
        sum0.b += dot(v0[0], k2[0]) + dot(v0[1], k2[1]);
        sum0.a += dot(v0[0], k3[0]) + dot(v0[1], k3[1]);

        sum1.r += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
        sum1.g += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
        sum1.b += dot(v1[0], k2[0]) + dot(v1[1], k2[1]);
        sum1.a += dot(v1[0], k3[0]) + dot(v1[1], k3[1]);

        sum2.r += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
        sum2.g += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
        sum2.b += dot(v2[0], k2[0]) + dot(v2[1], k2[1]);
        sum2.a += dot(v2[0], k3[0]) + dot(v2[1], k3[1]);

        sum3.r += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
        sum3.g += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);
        sum3.b += dot(v3[0], k2[0]) + dot(v3[1], k2[1]);
        sum3.a += dot(v3[0], k3[0]) + dot(v3[1], k3[1]);
    }
#else
    int w_offset = gy * N * 4;

    for (int z = 0; z < N; z++)
    {
        const int sz = z / maxk;
        const int kk = z % maxk;

        const int ky = kk / kernel_w;
        const int kx = kk % kernel_w;

        const ivec4 v_offset = sz * psc(cstep) + (sys4 + ky * dilation_h) * psc(w) + sxs4 + kx * dilation_w;

        afpvec8 v0 = buffer_ld8(bottom_blob_data, v_offset.r);
        afpvec8 v1 = buffer_ld8(bottom_blob_data, v_offset.g);
        afpvec8 v2 = buffer_ld8(bottom_blob_data, v_offset.b);
        afpvec8 v3 = buffer_ld8(bottom_blob_data, v_offset.a);

        afpvec8 k0 = buffer_ld8(weight_data, w_offset + 0);
        afpvec8 k1 = buffer_ld8(weight_data, w_offset + 1);
        afpvec8 k2 = buffer_ld8(weight_data, w_offset + 2);
        afpvec8 k3 = buffer_ld8(weight_data, w_offset + 3);

        // sum += v * k;
        sum0.r += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
        sum0.g += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
        sum0.b += dot(v0[0], k2[0]) + dot(v0[1], k2[1]);
        sum0.a += dot(v0[0], k3[0]) + dot(v0[1], k3[1]);

        sum1.r += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
        sum1.g += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
        sum1.b += dot(v1[0], k2[0]) + dot(v1[1], k2[1]);
        sum1.a += dot(v1[0], k3[0]) + dot(v1[1], k3[1]);

        sum2.r += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
        sum2.g += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
        sum2.b += dot(v2[0], k2[0]) + dot(v2[1], k2[1]);
        sum2.a += dot(v2[0], k3[0]) + dot(v2[1], k3[1]);

        sum3.r += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
        sum3.g += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);
        sum3.b += dot(v3[0], k2[0]) + dot(v3[1], k2[1]);
        sum3.a += dot(v3[0], k3[0]) + dot(v3[1], k3[1]);

        w_offset += 4;
    }
#endif

    if (activation_type == 1)
    {
        sum0 = max(sum0, afp(0.f));
        sum1 = max(sum1, afp(0.f));
        sum2 = max(sum2, afp(0.f));
        sum3 = max(sum3, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum0 = mix(sum0, sum0 * afp(slope), lessThan(sum0, afpvec4(0.f)));
        sum1 = mix(sum1, sum1 * afp(slope), lessThan(sum1, afpvec4(0.f)));
        sum2 = mix(sum2, sum2 * afp(slope), lessThan(sum2, afpvec4(0.f)));
        sum3 = mix(sum3, sum3 * afp(slope), lessThan(sum3, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum0 = clamp(sum0, const_min, const_max);
        sum1 = clamp(sum1, const_min, const_max);
        sum2 = clamp(sum2, const_min, const_max);
        sum3 = clamp(sum3, const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum0 = afp(1.f) / (afp(1.f) + exp(-sum0));
        sum1 = afp(1.f) / (afp(1.f) + exp(-sum1));
        sum2 = afp(1.f) / (afp(1.f) + exp(-sum2));
        sum3 = afp(1.f) / (afp(1.f) + exp(-sum3));
    }
    if (activation_type == 5)
    {
        sum0 = sum0 * tanh(log(exp(sum0) + afp(1.f)));
        sum1 = sum1 * tanh(log(exp(sum1) + afp(1.f)));
        sum2 = sum2 * tanh(log(exp(sum2) + afp(1.f)));
        sum3 = sum3 * tanh(log(exp(sum3) + afp(1.f)));
    }
    if (activation_type == 6)
    {
        const afp alpha = afp(activation_param_0);
        const afp beta = afp(activation_param_1);
        sum0 = sum0 * clamp(sum0 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum1 = sum1 * clamp(sum1 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum2 = sum2 * clamp(sum2 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum3 = sum3 * clamp(sum3 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
    }

#if NCNN_image_shader
    image3d_st4(top_blob, ivec3(sx4.r, sy4.r, gy), sum0);
    image3d_st4(top_blob, ivec3(sx4.g, sy4.g, gy), sum1);
    image3d_st4(top_blob, ivec3(sx4.b, sy4.b, gy), sum2);
    image3d_st4(top_blob, ivec3(sx4.a, sy4.a, gy), sum3);
#else
    const int gi = gy * psc(outcstep) + gx;

    buffer_st4(top_blob_data, gi, sum0);
    if (gx + 1 < outsize) buffer_st4(top_blob_data, gi + 1, sum1);
    if (gx + 2 < outsize) buffer_st4(top_blob_data, gi + 2, sum2);
    if (gx + 3 < outsize) buffer_st4(top_blob_data, gi + 3, sum3);
#endif
}
