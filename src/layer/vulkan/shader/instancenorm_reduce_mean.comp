// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform highp sampler3D bottom_top_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image1D mean_blob;
#else
layout (binding = 0) readonly buffer bottom_top_blob { float bottom_top_blob_data[]; };
layout (binding = 1) writeonly buffer mean_blob { sfp mean_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;
    float area;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(c) || gy >= 1 || gz >= 1)
        return;

    afp sum = afp(0.f);

#if NCNN_image_shader
    for (int i = 0; i < p.h; i++)
    {
        for (int j = 0; j < p.w; j++)
        {
            sum += afp(texelFetch(bottom_top_blob, ivec3(j, i, gx), 0).r);
        }
    }
#else
    int v_offset = gx * psc(cstep);

    for (int i = 0; i < p.w; i++)
    {
        sum += afp(bottom_top_blob_data[v_offset]);
        v_offset += 1;
    }
#endif

    afp mean = sum / afp(p.area);

#if NCNN_image_shader
    image1d_st1(mean_blob, gx, mean);
#else
    buffer_st1(mean_data, gx, mean);
#endif
}
