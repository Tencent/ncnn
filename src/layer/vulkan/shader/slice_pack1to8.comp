// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int axis = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D bottom_blob_1d;
layout (binding = 0) uniform unfp sampler2D bottom_blob_2d;
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;

    int offset;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

#if NCNN_image_shader
    if (psc(dims) == 1)
    {
        afpvec8 v;

        int gx8 = gx * 8 + p.offset;

        v[0].r = image1d_ld1(bottom_blob_1d, gx8 + 0);
        v[0].g = image1d_ld1(bottom_blob_1d, gx8 + 1);
        v[0].b = image1d_ld1(bottom_blob_1d, gx8 + 2);
        v[0].a = image1d_ld1(bottom_blob_1d, gx8 + 3);
        v[1].r = image1d_ld1(bottom_blob_1d, gx8 + 4);
        v[1].g = image1d_ld1(bottom_blob_1d, gx8 + 5);
        v[1].b = image1d_ld1(bottom_blob_1d, gx8 + 6);
        v[1].a = image1d_ld1(bottom_blob_1d, gx8 + 7);

        image1d_st8(top_blob_1d, gx, v);
    }
    else if (psc(dims) == 2)
    {
        afpvec8 v;

        if (axis == 0)
        {
            int gy8 = gy * 8 + p.offset;

            v[0].r = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 0));
            v[0].g = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 1));
            v[0].b = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 2));
            v[0].a = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 3));
            v[1].r = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 4));
            v[1].g = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 5));
            v[1].b = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 6));
            v[1].a = image2d_ld1(bottom_blob_2d, ivec2(gx, gy8 + 7));
        }
        if (axis == 1)
        {
            int gx8 = gx * 8 + p.offset;

            v[0].r = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 0, gy));
            v[0].g = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 1, gy));
            v[0].b = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 2, gy));
            v[0].a = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 3, gy));
            v[1].r = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 4, gy));
            v[1].g = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 5, gy));
            v[1].b = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 6, gy));
            v[1].a = image2d_ld1(bottom_blob_2d, ivec2(gx8 + 7, gy));
        }

        image2d_st8(top_blob_2d, ivec2(gx, gy), v);
    }
    else // if (psc(dims) == 3)
    {
        afpvec8 v;

        if (axis == 0)
        {
            int gz8 = gz * 8 + p.offset;

            v[0].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 0));
            v[0].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 1));
            v[0].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 2));
            v[0].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 3));
            v[1].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 4));
            v[1].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 5));
            v[1].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 6));
            v[1].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz8 + 7));
        }
        if (axis == 1)
        {
            int gy8 = gy * 8 + p.offset;

            v[0].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 0, gz));
            v[0].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 1, gz));
            v[0].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 2, gz));
            v[0].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 3, gz));
            v[1].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 4, gz));
            v[1].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 5, gz));
            v[1].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 6, gz));
            v[1].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy8 + 7, gz));
        }
        if (axis == 2)
        {
            int gx8 = gx * 8 + p.offset;

            v[0].r = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 0, gy, gz));
            v[0].g = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 1, gy, gz));
            v[0].b = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 2, gy, gz));
            v[0].a = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 3, gy, gz));
            v[1].r = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 4, gy, gz));
            v[1].g = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 5, gy, gz));
            v[1].b = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 6, gy, gz));
            v[1].a = image3d_ld1(bottom_blob_3d, ivec3(gx8 + 7, gy, gz));
        }

        image3d_st8(top_blob_3d, ivec3(gx, gy, gz), v);
    }
#else
    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    ivec3 gxyz = ivec3(gx, gy, gz);

    gxyz[psc(dims) - 1] *= 8;
    gxyz[psc(dims) - 1 - axis] += p.offset;

    int v_offset_0 = gxyz.z * psc(cstep) + gxyz.y * psc(w) + gxyz.x;

    ivec3 gxyz4 = ivec3(1, psc(w), psc(cstep));

    ivec4 v_offset = v_offset_0 + ivec4(0, 1, 2, 3) * gxyz4[psc(dims) - 1 - axis];
    ivec4 vv_offset = v_offset + 4 * gxyz4[psc(dims) - 1 - axis];

    buffer_cp1to8(top_blob_data, gi, bottom_blob_data, v_offset, vv_offset);
#endif
}
