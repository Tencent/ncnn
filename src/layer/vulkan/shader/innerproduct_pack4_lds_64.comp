// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

layout (local_size_x_id = 233) in;// must == 64
layout (local_size_y_id = 234) in;// must == 1
layout (local_size_z_id = 235) in;// must == 1

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

// local cache
shared afpvec4 lv[64];

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    int lx = int(gl_LocalInvocationID.x);
    int ly = int(gl_LocalInvocationID.y);
    int lz = int(gl_LocalInvocationID.z);

    afpvec4 sum;

    if (bias_term == 1)
    {
        sum = sfp2afpvec4(bias_data[gx]);
    }
    else
    {
        sum = afpvec4(0.f);
    }

    int w_offset = gx * p.w;

    int i = 0;
    for (; i+63 < p.w; i+=64)
    {
        barrier();

        // load v to local cache
        if (lx < 64)
        {
            lv[lx] = sfp2afpvec4(bottom_blob_data[i + lx]);
        }

        barrier();
        memoryBarrierShared();

        for (int j=0; j<64; j++)
        {
            afpvec4 v = lv[j];

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
            // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
            afpmat4 k = afpmat4(
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 0]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 1]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 2]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 3])
            );
#else
            afpmat4 k = afpmat4(weight_data[w_offset + i + j]);
#endif

            sum += v * k;
        }
    }
    for (; i+15 < p.w; i+=16)
    {
        barrier();

        // load v to local cache
        if (lx < 16)
        {
            lv[lx] = sfp2afpvec4(bottom_blob_data[i + lx]);
        }

        barrier();
        memoryBarrierShared();

        for (int j=0; j<16; j++)
        {
            afpvec4 v = lv[j];

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
            // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
            afpmat4 k = afpmat4(
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 0]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 1]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 2]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 3])
            );
#else
            afpmat4 k = afpmat4(weight_data[w_offset + i + j]);
#endif

            sum += v * k;
        }
    }
    for (; i+3 < p.w; i+=4)
    {
        barrier();

        // load v to local cache
        if (lx < 4)
        {
            lv[lx] = sfp2afpvec4(bottom_blob_data[i + lx]);
        }

        barrier();
        memoryBarrierShared();

        for (int j=0; j<4; j++)
        {
            afpvec4 v = lv[j];

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
            // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
            afpmat4 k = afpmat4(
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 0]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 1]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 2]),
                sfp2afpvec4(weight_data[(w_offset + i + j) * 4 + 3])
            );
#else
            afpmat4 k = afpmat4(weight_data[w_offset + i + j]);
#endif

            sum += v * k;
        }
    }
    for (; i < p.w; i++)
    {
        barrier();

        // load v to local cache
        if (lx == 0)
        {
            lv[0] = sfp2afpvec4(bottom_blob_data[i]);
        }

        barrier();
        memoryBarrierShared();

        afpvec4 v = lv[0];

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
        // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
        afpmat4 k = afpmat4(
            sfp2afpvec4(weight_data[(w_offset + i) * 4 + 0]),
            sfp2afpvec4(weight_data[(w_offset + i) * 4 + 1]),
            sfp2afpvec4(weight_data[(w_offset + i) * 4 + 2]),
            sfp2afpvec4(weight_data[(w_offset + i) * 4 + 3])
        );
#else
        afpmat4 k = afpmat4(weight_data[w_offset + i]);
#endif

        sum += v * k;
    }

    if (gx >= p.outw || gy >= 1 || gz >= 1)
        return;

    if (activation_type == 1)
    {
        sum = max(sum, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum = mix(sum, sum * afp(slope), lessThan(sum, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum = clamp(sum, const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum = afp(1.f) / (afp(1.f) + exp(-sum));
    }

    top_blob_data[gx] = afp2sfpvec4(sum);
}
