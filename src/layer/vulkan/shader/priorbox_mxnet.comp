// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int clip = 0;
layout (constant_id = 1) const float offset = 0;
layout (constant_id = 2) const int num_sizes = 0;
layout (constant_id = 3) const int num_ratios = 0;
layout (constant_id = 4) const int num_prior = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 1) readonly buffer min_sizes { sfp min_sizes_data[]; };
layout (binding = 2) readonly buffer aspect_ratios { sfp aspect_ratios_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;

    float step_w;
    float step_h;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= num_sizes || gy >= p.w || gz >= p.h)
        return;

    // mxnet style _contrib_MultiBoxPrior
    int v_offset = (gz * p.w + gy) * num_prior + gx;

    afp center_x = (afp(gy) + afp(offset)) * afp(p.step_w);
    afp center_y = (afp(gz) + afp(offset)) * afp(p.step_h);
    afpvec4 center = afpvec4(center_x, center_y, center_x, center_y);

    // ratio = 1, various sizes
    afp size = afp(min_sizes_data[gx]);
    afp cw = size * afp(p.h) / afp(p.w) / afp(2);
    afp ch = size / afp(2);

    afpvec4 box = center + afpvec4(-cw, -ch, cw, ch);

    top_blob_data[v_offset] = clip == 1 ? sfpvec4(clamp(box, afp(0.f), afp(1.f))) : sfpvec4(box);

    if (gx == num_sizes - 1)
    {
        // various ratios, size = min_size = size[0]
        afp size = afp(min_sizes_data[0]);
        for (int pi = 1; pi < num_ratios; pi++)
        {
            afp ratio = sqrt(afp(aspect_ratios_data[pi]));
            afp cwr = size * afp(p.h) / afp(p.w) * ratio / afp(2);
            afp chr = size / ratio / afp(2);

            afpvec4 box = center + afpvec4(-cwr, -chr, cwr, chr);

            top_blob_data[v_offset + pi] = clip == 1 ? sfpvec4(clamp(box, afp(0.f), afp(1.f))) : sfpvec4(box);
        }
    }
}
