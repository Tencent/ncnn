// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int clip = 0;
layout (constant_id = 1) const float offset = 0;
layout (constant_id = 2) const int num_sizes = 0;
layout (constant_id = 3) const int num_ratios = 0;
layout (constant_id = 4) const int num_prior = 0;

#define shape_constant_id_offset 5
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 1) readonly buffer min_sizes { sfp min_sizes_data[]; };
layout (binding = 2) readonly buffer aspect_ratios { sfp aspect_ratios_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;

    float step_w;
    float step_h;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= num_sizes || gy >= psc(w) || gz >= psc(h))
        return;

    // mxnet style _contrib_MultiBoxPrior
    int v_offset = (gz * psc(w) + gy) * num_prior + gx;

    afp center_x = (afp(gy) + afp(offset)) * afp(p.step_w);
    afp center_y = (afp(gz) + afp(offset)) * afp(p.step_h);
    afpvec4 center = afpvec4(center_x, center_y, center_x, center_y);

    // ratio = 1, various sizes
    afp size = buffer_ld1(min_sizes_data, gx);
    afp cw = size * afp(0.5f) * afp(psc(h)) / afp(psc(w));
    afp ch = size * afp(0.5f);

    afpvec4 box = center + afpvec4(-cw, -ch, cw, ch);
    box = clip == 1 ? clamp(box, afp(0.f), afp(1.f)) : box;

    buffer_st4(top_blob_data, v_offset, box);

    if (gx == 0)
    {
        // various ratios, size = min_size = size[0]
        for (int pi = 1; pi < num_ratios; pi++)
        {
            afp v = buffer_ld1(aspect_ratios_data, pi);
            afp cwr = cw * sqrt(v);
            afp chr = ch / sqrt(v);

            afpvec4 box = center + afpvec4(-cwr, -chr, cwr, chr);
            box = clip == 1 ? clamp(box, afp(0.f), afp(1.f)) : box;

            buffer_st4(top_blob_data, v_offset + num_sizes - 1 + pi, box);
        }
    }
}
