// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int kernel_h = 1;
layout (constant_id = 2) const int dilation_w = 1;
layout (constant_id = 3) const int dilation_h = 1;
layout (constant_id = 4) const int stride_w = 1;
layout (constant_id = 5) const int stride_h = 1;
layout (constant_id = 6) const int bias_term = 0;
layout (constant_id = 7) const int activation_type = 0;
layout (constant_id = 8) const float activation_param_0 = 0;
layout (constant_id = 9) const float activation_param_1 = 0;

#define shape_constant_id_offset 10
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec8 weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);

    const int outsize = psc(outw) * psc(outh);

    if (gx >= outsize || gy >= psc(outc))
        return;

    afp sum0;
    afp sum1;
    afp sum2;
    afp sum3;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum0 = image3d_ld1(bias_blob, ivec3(gy, 0, 0));
#else
        sum0 = buffer_ld1(bias_data, gy);
#endif
        sum1 = sum0;
        sum2 = sum0;
        sum3 = sum0;
    }
    else
    {
        sum0 = afp(0.f);
        sum1 = afp(0.f);
        sum2 = afp(0.f);
        sum3 = afp(0.f);
    }

    const int maxk = kernel_w * kernel_h;
    const int N = psc(c) * maxk;

    const ivec4 gx4 = gx + ivec4(0, 1, 2, 3);

    const ivec4 sy4 = gx4 / psc(outw);
    const ivec4 sx4 = gx4 % psc(outw);

    const ivec4 sxs4 = sx4 * stride_w;
    const ivec4 sys4 = sy4 * stride_h;

#if NCNN_image_shader
    for (int z = 0; z < N; z++)
    {
        const int sz = z / maxk;
        const int kk = z % maxk;

        const int ky = kk / kernel_w;
        const int kx = kk % kernel_w;

        const ivec4 x4 = sxs4 + kx * dilation_w;
        const ivec4 y4 = sys4 + ky * dilation_h;

        afpvec8 v0 = image3d_ld8(bottom_blob, ivec3(x4.r, y4.r, sz));
        afpvec8 v1 = image3d_ld8(bottom_blob, ivec3(x4.g, y4.g, sz));
        afpvec8 v2 = image3d_ld8(bottom_blob, ivec3(x4.b, y4.b, sz));
        afpvec8 v3 = image3d_ld8(bottom_blob, ivec3(x4.a, y4.a, sz));

        afpvec8 k = image3d_ld8(weight_blob, ivec3(z, gy, 0));

        // sum += dot(v, k);
        sum0 += dot(v0[0], k[0]) + dot(v0[1], k[1]);
        sum1 += dot(v1[0], k[0]) + dot(v1[1], k[1]);
        sum2 += dot(v2[0], k[0]) + dot(v2[1], k[1]);
        sum3 += dot(v3[0], k[0]) + dot(v3[1], k[1]);
    }
#else
    int w_offset = gy * N;

    for (int z = 0; z < N; z++)
    {
        const int sz = z / maxk;
        const int kk = z % maxk;

        const int ky = kk / kernel_w;
        const int kx = kk % kernel_w;

        const ivec4 v_offset = sz * psc(cstep) + (sys4 + ky * dilation_h) * psc(w) + sxs4 + kx * dilation_w;

        afpvec8 v0 = buffer_ld8(bottom_blob_data, v_offset.r);
        afpvec8 v1 = buffer_ld8(bottom_blob_data, v_offset.g);
        afpvec8 v2 = buffer_ld8(bottom_blob_data, v_offset.b);
        afpvec8 v3 = buffer_ld8(bottom_blob_data, v_offset.a);

        afpvec8 k = buffer_ld8(weight_data, w_offset);

        // sum += dot(v, k);
        sum0 += dot(v0[0], k[0]) + dot(v0[1], k[1]);
        sum1 += dot(v1[0], k[0]) + dot(v1[1], k[1]);
        sum2 += dot(v2[0], k[0]) + dot(v2[1], k[1]);
        sum3 += dot(v3[0], k[0]) + dot(v3[1], k[1]);

        w_offset += 1;
    }
#endif

    sum0 = activation_afp(sum0, activation_type, activation_param_0, activation_param_1);
    sum1 = activation_afp(sum1, activation_type, activation_param_0, activation_param_1);
    sum2 = activation_afp(sum2, activation_type, activation_param_0, activation_param_1);
    sum3 = activation_afp(sum3, activation_type, activation_param_0, activation_param_1);

#if NCNN_image_shader
    image3d_st1(top_blob, ivec3(sx4.r, sy4.r, gy), sum0);
    image3d_st1(top_blob, ivec3(sx4.g, sy4.g, gy), sum1);
    image3d_st1(top_blob, ivec3(sx4.b, sy4.b, gy), sum2);
    image3d_st1(top_blob, ivec3(sx4.a, sy4.a, gy), sum3);
#else
    const int gi = gy * psc(outcstep) + gx;

    buffer_st1(top_blob_data, gi, sum0);
    if (gx + 1 < outsize) buffer_st1(top_blob_data, gi + 1, sum1);
    if (gx + 2 < outsize) buffer_st1(top_blob_data, gi + 2, sum2);
    if (gx + 3 < outsize) buffer_st1(top_blob_data, gi + 3, sum3);
#endif
}
