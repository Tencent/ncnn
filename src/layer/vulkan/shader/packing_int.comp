// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_int8_storage
#extension GL_EXT_shader_8bit_storage: require
#endif
#if NCNN_int8_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#endif

layout (constant_id = 0) const int cast_type_from = 0;
layout (constant_id = 1) const int cast_type_to = 1;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const uint n = 0;
layout (constant_id = shape_constant_id_offset + 1) const uint c = 0;
layout (constant_id = shape_constant_id_offset + 2) const uint stride = 0;

layout (binding = 0) readonly buffer bottom_blob { sint8vec4 bottom_blob_data[]; };
layout (binding = 1) readonly buffer bottom_blob_int32 { ivec4 bottom_blob_int32_data[]; };
layout (binding = 2) writeonly buffer top_blob { sint8vec4 top_blob_data[]; };
layout (binding = 3) writeonly buffer top_blob_int32 { ivec4 top_blob_int32_data[]; };

layout (push_constant) uniform parameter
{
    uint n;
    uint c;
    uint stride;
} p;

void main()
{
    const uint gx = gl_GlobalInvocationID.x;
    const uint gy = gl_GlobalInvocationID.y;

    if (gx >= psc(n) || gy >= psc(c))
        return;

    const uint gi = gy * psc(n) + gx;

    if (cast_type_from == cast_type_to)
    {
        i8buffer_cp4(top_blob_data, gi, bottom_blob_data, gi);
        return;
    }

    const uint gi2 = gy * psc(stride) + gx;

    ivec4 v;
    if (cast_type_from == 1)
    {
        v = afpvec4(bottom_blob_int32[gi]);
    }
    else
    {
        v = buffer_ld4(bottom_blob_data, gi2);
    }

    if (cast_type_to == 1)
    {
        top_blob_int32_data[gi] = v;
    }
    else
    {
        buffer_st4(top_blob_data, gi2, v);
    }



    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    aint v;

    if (psc(dims) == 1)
    {
        if (storage_type_from == 0)
        {
            int gi = gx;

            v = ibuffer_ld1(bottom_blob_data, gi);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = iimage3d_ld1(bottom_blob_3d, ivec3(gx, 0, 0));
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gx;

            ibuffer_st1(top_blob_data, gi, v);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            iimage3d_st1(top_blob_3d, ivec3(gx, 0, 0), v);
        }
#endif
    }
    else if (psc(dims) == 2)
    {
        if (storage_type_from == 0)
        {
            int gi = gy * psc(w) + gx;

            v = ibuffer_ld1(bottom_blob_data, gi);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = iimage3d_ld1(bottom_blob_3d, ivec3(gx, gy, 0));
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gy * psc(outw) + gx;

            ibuffer_st1(top_blob_data, gi, v);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            iimage3d_st1(top_blob_3d, ivec3(gx, gy, 0), v);
        }
#endif
    }
    else // if (psc(dims) == 3)
    {
        if (storage_type_from == 0)
        {
            int gi = gz * psc(cstep) + gy * psc(w) + gx;

            v = ibuffer_ld1(bottom_blob_data, gi);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = iimage3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz));
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

            ibuffer_st1(top_blob_data, gi, v);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            iimage3d_st1(top_blob_3d, ivec3(gx, gy, gz), v);
        }
#endif
    }
}
