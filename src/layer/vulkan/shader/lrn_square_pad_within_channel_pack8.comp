// Copyright 2020 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int region_type = 0;
layout (constant_id = 1) const int pad_head = 0;
layout (constant_id = 2) const int pad_tail = 0;

#define shape_constant_id_offset 3
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer square_workspace { mat2x4 square_workspace_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    // support region_type == 1 only

    afpvec8 res;

    int x = gx - pad_head;
    int y = gy - pad_head;

    if (x >= 0 && x < psc(w) && y >= 0 && y < psc(h))
    {
        int v_offset = gz * psc(cstep) + y * psc(w) + x;
        afpvec8 v = buffer_ld8(bottom_blob_data, v_offset);
        res[0] = v[0] * v[0];
        res[1] = v[1] * v[1];
    }
    else
    {
        res = afpvec8(afpvec4(0.f), afpvec4(0.f));
    }

    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    square_workspace_data[gi] = mat2x4(res);
}
