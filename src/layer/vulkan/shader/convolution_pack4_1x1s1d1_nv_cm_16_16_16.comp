// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

#extension GL_KHR_memory_scope_semantics: require
#extension GL_EXT_shader_explicit_arithmetic_types: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_NV_cooperative_matrix: require

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { uvec2 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { uvec2 weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { uvec2 bias_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

#define UNROLL_INCH 2

shared uvec2 tmp_v0[UNROLL_INCH * 16*4];
shared uvec2 tmp_v1[UNROLL_INCH * 16*4];
shared uvec2 tmp_k0[UNROLL_INCH * 16*4];
shared uvec2 tmp_k1[UNROLL_INCH * 16*4];

void main()
{
    int gx = int(gl_GlobalInvocationID.x) / 32 * 2 * 16;
    int gy = int(gl_GlobalInvocationID.y) * 2 * 4;

    const int lx = int(gl_LocalInvocationID.x);

    const int lxd16 = lx / 16; // 0 1
    const int lxm16 = lx % 16; // 0 1 2 3 .... 15

    fcoopmatNV<32, gl_ScopeSubgroup, 16, 16> sum0;
    fcoopmatNV<32, gl_ScopeSubgroup, 16, 16> sum1;
    fcoopmatNV<32, gl_ScopeSubgroup, 16, 16> sum2;
    fcoopmatNV<32, gl_ScopeSubgroup, 16, 16> sum3;

    if (bias_term == 1)
    {
        fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> bias0;
        fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> bias1;

        coopMatLoadNV(bias0, bias_data, gy, 0, false);
        coopMatLoadNV(bias1, bias_data, gy + 4, 0, false);

        sum0 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(bias0);
        sum1 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(bias0);
        sum2 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(bias1);
        sum3 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(bias1);
    }
    else
    {
        sum0 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(0.f);
        sum1 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(0.f);
        sum2 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(0.f);
        sum3 = fcoopmatNV<32, gl_ScopeSubgroup, 16, 16>(0.f);
    }

    const int N = psc(c) / 4;

    int z = 0;
    for (; z + (UNROLL_INCH - 1) < N; z += UNROLL_INCH)
    {
        {
            for (int j = 0; j < 4; j++)
            {
                const int tmp_i = lxd16*16*4 + lxm16 * 4 + j;

                const int v_offset = ((z + lxd16) * 4 + j) * psc(outcstep) + (gx + lxm16);

                tmp_v0[tmp_i] = (gx + lxm16) < psc(outcstep) ? bottom_blob_data[v_offset] : uvec2(0);
                tmp_v1[tmp_i] = (gx + lxm16 + 16) < psc(outcstep) ? bottom_blob_data[v_offset + 16] : uvec2(0);

                const int w_offset = gy * psc(c) * 4 + (z + lxd16) * 4 * 16 + (lxm16 * 4 + j);

                tmp_k0[tmp_i] = weight_data[w_offset];
                tmp_k1[tmp_i] = weight_data[w_offset + psc(c) * 16];
            }
        }

        barrier();

        for (int z4 = 0; z4 < UNROLL_INCH; z4++)
        {
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> A0;
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> A1;
            coopMatLoadNV(A0, tmp_v0, z4*16*4, 4, false);
            coopMatLoadNV(A1, tmp_v1, z4*16*4, 4, false);

            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> B0;
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> B1;
            coopMatLoadNV(B0, tmp_k0, z4*16*4, 4, false);
            coopMatLoadNV(B1, tmp_k1, z4*16*4, 4, false);

            // sum += v * k
            sum0 = coopMatMulAddNV(A0, B0, sum0);
            sum1 = coopMatMulAddNV(A1, B0, sum1);
            sum2 = coopMatMulAddNV(A0, B1, sum2);
            sum3 = coopMatMulAddNV(A1, B1, sum3);
        }

        barrier();
    }

    if (z < N)
    {
        const int remain = N - z;

        if (lxd16 == 0)
        {
            for (int j = 0; j < 4; j++)
            {
                const int tmp_i = lxd16*16*4 + lxm16 * 4 + j;

                const int v_offset = ((z + lxd16) * 4 + j) * psc(outcstep) + (gx + lxm16);

                tmp_v0[tmp_i] = (gx + lxm16) < psc(outcstep) ? bottom_blob_data[v_offset] : uvec2(0);
                tmp_v1[tmp_i] = (gx + lxm16 + 16) < psc(outcstep) ? bottom_blob_data[v_offset + 16] : uvec2(0);

                const int w_offset = gy * psc(c) * 4 + (z + lxd16) * 4 * 16 + (lxm16 * 4 + j);

                tmp_k0[tmp_i] = weight_data[w_offset];
                tmp_k1[tmp_i] = weight_data[w_offset + psc(c) * 16];
            }
        }

        barrier();

        for (int z4 = 0; z4 < remain; z4++)
        {
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> A0;
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> A1;
            coopMatLoadNV(A0, tmp_v0, z4*16*4, 4, false);
            coopMatLoadNV(A1, tmp_v1, z4*16*4, 4, false);

            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> B0;
            fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> B1;
            coopMatLoadNV(B0, tmp_k0, z4*16*4, 4, false);
            coopMatLoadNV(B1, tmp_k1, z4*16*4, 4, false);

            // sum += v * k
            sum0 = coopMatMulAddNV(A0, B0, sum0);
            sum1 = coopMatMulAddNV(A1, B0, sum1);
            sum2 = coopMatMulAddNV(A0, B1, sum2);
            sum3 = coopMatMulAddNV(A1, B1, sum3);
        }

        barrier();
    }

    if (gx >= psc(outcstep) || gy >= psc(outc))
        return;

    fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> sum0_fp16 = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(sum0);
    fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> sum1_fp16 = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(sum1);
    fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> sum2_fp16 = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(sum2);
    fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> sum3_fp16 = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(sum3);

    coopMatStoreNV(sum0_fp16, tmp_v0, 0, 4, false);
    coopMatStoreNV(sum1_fp16, tmp_v1, 0, 4, false);
    coopMatStoreNV(sum2_fp16, tmp_v0, 16*4, 4, false);
    coopMatStoreNV(sum3_fp16, tmp_v1, 16*4, 4, false);

    barrier();

    {
        for (int j = 0; j < 4; j++)
        {
            const int tmp_vi = lxm16 * 4 + j + lxd16*16*4;

            uvec2 sum0_u2 = tmp_v0[tmp_vi];
            uvec2 sum1_u2 = tmp_v1[tmp_vi];

            afpvec4 sum0 = afpvec4(unpackHalf2x16(sum0_u2.x), unpackHalf2x16(sum0_u2.y));
            afpvec4 sum1 = afpvec4(unpackHalf2x16(sum1_u2.x), unpackHalf2x16(sum1_u2.y));

            sum0 = activation_afpvec4(sum0, activation_type, activation_param_0, activation_param_1);
            sum1 = activation_afpvec4(sum1, activation_type, activation_param_0, activation_param_1);

            const int gi = (gy + lxd16 * 4 + j) * psc(outcstep) + (gx + lxm16);

            if (gy + lxd16 * 4 + j < psc(outc))
            {
                if (gx + lxm16 < psc(outcstep)) buffer_st4(top_blob_data, gi, sum0);
                if (gx + lxm16 + 16 < psc(outcstep)) buffer_st4(top_blob_data, gi + 16, sum1);
            }
        }
    }
}
