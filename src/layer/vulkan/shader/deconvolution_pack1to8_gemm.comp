// Copyright 2022 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int maxk = 1;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outcstep = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outc = 0;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer col_blob { sfpvec8 col_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec8 weight_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outcstep;
    int outc;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);

    if (gx >= psc(outcstep) || gy >= psc(outc))
        return;

    afpvec8 sum0 = afpvec8(afpvec4(0.f), afpvec4(0.f));
    afpvec8 sum1 = afpvec8(afpvec4(0.f), afpvec4(0.f));
    afpvec8 sum2 = afpvec8(afpvec4(0.f), afpvec4(0.f));
    afpvec8 sum3 = afpvec8(afpvec4(0.f), afpvec4(0.f));

    int v_offset = gx;
    int w_offset = gy * psc(c);

    for (int z = 0; z < psc(c); z++)
    {
        afp v0 = buffer_ld1(bottom_blob_data, v_offset + 0);
        afp v1 = buffer_ld1(bottom_blob_data, v_offset + 1);
        afp v2 = buffer_ld1(bottom_blob_data, v_offset + 2);
        afp v3 = buffer_ld1(bottom_blob_data, v_offset + 3);

        afpvec8 k = buffer_ld8(weight_data, w_offset);

        // sum += v * k;
        sum0[0] += v0 * k[0];
        sum0[1] += v0 * k[1];

        sum1[0] += v1 * k[0];
        sum1[1] += v1 * k[1];

        sum2[0] += v2 * k[0];
        sum2[1] += v2 * k[1];

        sum3[0] += v3 * k[0];
        sum3[1] += v3 * k[1];

        v_offset += psc(cstep);
        w_offset += 1;
    }

    const int gi = gy * psc(outcstep) + gx;

    buffer_st8(col_blob_data, gi, sum0);
    if (gx + 1 < psc(outcstep)) buffer_st8(col_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outcstep)) buffer_st8(col_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outcstep)) buffer_st8(col_blob_data, gi + 3, sum3);
}
