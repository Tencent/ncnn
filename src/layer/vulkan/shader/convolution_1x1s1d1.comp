// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler3D bias_blob;
#else
#if NCNN_fp16_packed
layout (binding = 0) readonly buffer bottom_blob { vec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { vec4 top_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif
layout (binding = 2) readonly buffer weight_blob { sfp weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
#if NCNN_image_shader
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);

    if (gx >= psc(outw) * psc(outh) || gy >= psc(outc))
        return;
#else
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);

    if (gx * 4 >= psc(outcstep) || gy >= psc(outc))
        return;
#endif

    afpvec4 sum;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum = afpvec4(image3d_ld1(bias_blob, ivec3(gy, 0, 0)));
#else
        sum = afpvec4(buffer_ld1(bias_data, gy));
#endif
    }
    else
    {
        sum = afpvec4(0.f);
    }

#if NCNN_image_shader
    ivec4 gx4 = gx + ivec4(0, 1, 2, 3);

    ivec4 sy4 = gx4 / psc(w);
    ivec4 sx4 = gx4 % psc(w);

    for (int z = 0; z < psc(c); z++)
    {
        afp k = image3d_ld1(weight_blob, ivec3(0, z, gy));

        sum.r += k * image3d_ld1(bottom_blob, ivec3(sx4.r, sy4.r, z));
        sum.g += k * image3d_ld1(bottom_blob, ivec3(sx4.g, sy4.g, z));
        sum.b += k * image3d_ld1(bottom_blob, ivec3(sx4.b, sy4.b, z));
        sum.a += k * image3d_ld1(bottom_blob, ivec3(sx4.a, sy4.a, z));
    }
#else
    int w_offset = gy * psc(c);
    int v_offset = gx;

    for (int z = 0; z < psc(c); z++)
    {
#if NCNN_fp16_packed
        sum += afp(weight_data[w_offset]) * afpvec4(bottom_blob_data[v_offset]);
#else
        sum += buffer_ld1(weight_data, w_offset) * buffer_ld4(bottom_blob_data, v_offset);
#endif

        w_offset += 1;
        v_offset += psc(cstep) / 4;
    }
#endif

    sum = activation_afpvec4(sum, activation_type, activation_param_0, activation_param_1);

#if NCNN_image_shader
    image3d_st1(top_blob, ivec3(sx4.r, sy4.r, gy), sum.r);
    image3d_st1(top_blob, ivec3(sx4.g, sy4.g, gy), sum.g);
    image3d_st1(top_blob, ivec3(sx4.b, sy4.b, gy), sum.b);
    image3d_st1(top_blob, ivec3(sx4.a, sy4.a, gy), sum.a);
#else
    const int gi = gy * psc(outcstep) / 4 + gx;

#if NCNN_fp16_packed
    top_blob_data[gi] = sum;
#else
    buffer_st4(top_blob_data, gi, sum);
#endif
#endif
}
