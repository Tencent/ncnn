// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int size_4 = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep_4 = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outsize_4 = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep_4 = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_fp16_packed
layout (binding = 0) readonly buffer bottom_blob { vec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { vec4 top_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif
layout (binding = 2) readonly buffer weight_blob { sfp weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int size_4;
    int c;
    int cstep_4;

    int outdims;
    int outsize_4;
    int outc;
    int outcstep_4;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outsize_4) || gy >= 1 || gz >= psc(outc))
        return;

    afpvec4 sum;

    if (bias_term == 1)
    {
        sum = afpvec4(buffer_ld1(bias_data, gz));
    }
    else
    {
        sum = afpvec4(0.f);
    }

    int w_offset = gz * psc(c);
    int v_offset = gx;

    for (int z = 0; z < psc(c); z++)
    {
#if NCNN_fp16_packed
        sum += afp(weight_data[w_offset]) * afpvec4(bottom_blob_data[v_offset]);
#else
        sum += buffer_ld1(weight_data, w_offset) * buffer_ld4(bottom_blob_data, v_offset);
#endif

        w_offset += 1;
        v_offset += psc(cstep_4);
    }

    if (activation_type == 1)
    {
        sum = max(sum, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum = mix(sum, sum * afp(slope), lessThan(sum, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum = clamp(sum, const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum = afp(1.f) / (afp(1.f) + exp(-sum));
    }

    const int gi = gz * psc(outcstep_4) + gx;

#if NCNN_fp16_packed
    top_blob_data[gi] = sum;
#else
    buffer_st4(top_blob_data, gi, sum);
#endif
}
