// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int stride = 0;
layout (constant_id = 1) const int mode = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    ivec4 gz4 = gz * 4 + ivec4(0, 1, 2, 3);

    ivec4 z4;
    ivec4 zi4;
    if (mode == 0)
    {
        z4 = gz4 / (stride * stride);
        zi4 = gz4 % (stride * stride);
    }
    else // if (mode == 1)
    {
        z4 = gz4 % psc(c);
        zi4 = gz4 / psc(c);
    }
    ivec4 y4 = gy * stride + zi4 / stride;
    ivec4 x4 = gx * stride + zi4 % stride;

#if NCNN_image_shader
    afpvec4 v;
    v.r = image3d_ld1(bottom_blob, ivec3(x4.r, y4.r, z4.r));
    v.g = image3d_ld1(bottom_blob, ivec3(x4.g, y4.g, z4.g));
    v.b = image3d_ld1(bottom_blob, ivec3(x4.b, y4.b, z4.b));
    v.a = image3d_ld1(bottom_blob, ivec3(x4.a, y4.a, z4.a));

    image3d_st4(top_blob, ivec3(gx, gy, gz), v);
#else
    ivec4 v_offset = z4 * psc(cstep) + y4 * psc(w) + x4;

    int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    buffer_cp1to4(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
}
