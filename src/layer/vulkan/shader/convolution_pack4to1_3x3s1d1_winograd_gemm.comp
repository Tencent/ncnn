// Copyright 2022 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

#define LOCAL_MEMORY_UNROLL_INCH 8

layout (constant_id = 0) const int batch = 1;
layout (constant_id = 1) const int c = 0;
layout (constant_id = 2) const int outc = 0;

#define shape_constant_id_offset 3
layout (constant_id = shape_constant_id_offset + 0) const int cstep = 0;
layout (constant_id = shape_constant_id_offset + 1) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 2) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_tm_blob { sfpvec4 bottom_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_tm_blob { sfp top_tm_blob_data[]; };
layout (binding = 2) readonly buffer weight_tm_blob { sfpvec4 weight_tm_data[]; };

layout (push_constant) uniform parameter
{
    int cstep;
    int outw;
    int outcstep;
} p;

#if NCNN_shader_local_memory
shared lfpvec4 tmp_v[8][LOCAL_MEMORY_UNROLL_INCH][4];
shared lfpvec4 tmp_k[8][LOCAL_MEMORY_UNROLL_INCH];
#endif

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

#if !NCNN_shader_local_memory
    if (gx >= psc(outw) || gy >= outc || gz >= batch)
        return;
#endif

    afp sum0 = afp(0.f);
    afp sum1 = afp(0.f);
    afp sum2 = afp(0.f);
    afp sum3 = afp(0.f);

    int v_offset = gz * c * psc(cstep) + gx;
    int w_offset = gz * c * outc + gy * c;

#if NCNN_shader_local_memory
    const int lx = int(gl_LocalInvocationID.x);
    const int ly = int(gl_LocalInvocationID.y);

    int z = 0;
    for (; z + (LOCAL_MEMORY_UNROLL_INCH - 1) < c; z += LOCAL_MEMORY_UNROLL_INCH)
    {
        if (ly < 4)
        {
            for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
            {
                tmp_v[lx][z4][ly] = sfp2lfpvec4(bottom_tm_blob_data[v_offset + z4 * psc(cstep) + ly]);
            }
        }

        if (lx == 0)
        {
            for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
            {
                tmp_k[ly][z4] = sfp2lfpvec4(weight_tm_data[w_offset + z4]);
            }
        }

        barrier();

        for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
        {
            afpvec4 v0 = lfp2afpvec4(tmp_v[lx][z4][0]);
            afpvec4 v1 = lfp2afpvec4(tmp_v[lx][z4][1]);
            afpvec4 v2 = lfp2afpvec4(tmp_v[lx][z4][2]);
            afpvec4 v3 = lfp2afpvec4(tmp_v[lx][z4][3]);

            afpvec4 k = lfp2afpvec4(tmp_k[ly][z4]);

            sum0 += dot(v0, k);
            sum1 += dot(v1, k);
            sum2 += dot(v2, k);
            sum3 += dot(v3, k);
        }

        v_offset += LOCAL_MEMORY_UNROLL_INCH * psc(cstep);
        w_offset += LOCAL_MEMORY_UNROLL_INCH;

        barrier();
    }

    if (z < c)
    {
        const int remain = c - z;

        if (ly < 4)
        {
            for (int z4 = 0; z4 < remain; z4++)
            {
                tmp_v[lx][z4][ly] = sfp2lfpvec4(bottom_tm_blob_data[v_offset + z4 * psc(cstep) + ly]);
            }
        }

        if (lx == 0)
        {
            for (int z4 = 0; z4 < remain; z4++)
            {
                tmp_k[ly][z4] = sfp2lfpvec4(weight_tm_data[w_offset + z4]);
            }
        }

        barrier();

        for (int z4 = 0; z4 < remain; z4++)
        {
            afpvec4 v0 = lfp2afpvec4(tmp_v[lx][z4][0]);
            afpvec4 v1 = lfp2afpvec4(tmp_v[lx][z4][1]);
            afpvec4 v2 = lfp2afpvec4(tmp_v[lx][z4][2]);
            afpvec4 v3 = lfp2afpvec4(tmp_v[lx][z4][3]);

            afpvec4 k = lfp2afpvec4(tmp_k[ly][z4]);

            sum0 += dot(v0, k);
            sum1 += dot(v1, k);
            sum2 += dot(v2, k);
            sum3 += dot(v3, k);
        }
    }
#else
    for (int z = 0; z < c; z++)
    {
        afpvec4 v0 = buffer_ld4(bottom_tm_blob_data, v_offset + 0);
        afpvec4 v1 = buffer_ld4(bottom_tm_blob_data, v_offset + 1);
        afpvec4 v2 = buffer_ld4(bottom_tm_blob_data, v_offset + 2);
        afpvec4 v3 = buffer_ld4(bottom_tm_blob_data, v_offset + 3);

        afpvec4 k = buffer_ld4(weight_tm_data, w_offset);

        sum0 += dot(v0, k);
        sum1 += dot(v1, k);
        sum2 += dot(v2, k);
        sum3 += dot(v3, k);

        v_offset += psc(cstep);
        w_offset += 1;
    }
#endif

#if NCNN_shader_local_memory
    if (gx >= psc(outw) || gy >= outc || gz >= batch)
        return;
#endif

    int gi = gz * outc * psc(outcstep) + gy * psc(outcstep) + gx;

    buffer_st1(top_tm_blob_data, gi + 0, sum0);
    if (gx + 1 < psc(outw)) buffer_st1(top_tm_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outw)) buffer_st1(top_tm_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outw)) buffer_st1(top_tm_blob_data, gi + 3, sum3);
}
