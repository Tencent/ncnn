// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const float alpha = 1.f;
layout (constant_id = 1) const float beta = 1.f;
layout (constant_id = 2) const int transA = 0;
layout (constant_id = 3) const int transB = 0;
layout (constant_id = 4) const int constantA = 0;
layout (constant_id = 5) const int constantB = 0;
layout (constant_id = 6) const int constantC = 0;
layout (constant_id = 7) const int M = 0;
layout (constant_id = 8) const int N = 0;
layout (constant_id = 9) const int K = 0;
layout (constant_id = 10) const int constant_broadcast_type_C = 0;
layout (constant_id = 11) const int output_N1M = 0;
layout (constant_id = 12) const int output_elempack = 0;
layout (constant_id = 13) const int output_elemtype = 0;
layout (constant_id = 14) const int output_transpose = 0;

#if NCNN_image_shader
layout (binding = 0, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
layout (binding = 1) uniform unfp sampler3D A_blob_3d;
layout (binding = 2) uniform unfp sampler3D B_blob_3d;
layout (binding = 3) uniform unfp sampler3D C_blob_3d;
#else
layout (binding = 0) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 1) readonly buffer A_blob { sfp A_blob_data[]; };
layout (binding = 2) readonly buffer B_blob { sfp B_blob_data[]; };
layout (binding = 3) readonly buffer C_blob { sfp C_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int M;
    int N;
    int K;
    int A_dims;
    int A_hstep;
    int B_dims;
    int B_hstep;
    int outdims;
    int outhstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(N) || gy >= psc(M) || gz >= 1)
        return;

    afp sum = afp(0.f);

#if NCNN_image_shader
    if (broadcast_type_C == 0)
    {
        sum = image3d_ld1(C_blob_3d, ivec3(0, 0, 0));
    }
    if (broadcast_type_C == 1 || broadcast_type_C == 2)
    {
        sum = image3d_ld1(C_blob_3d, ivec3(gx, 0, 0));
    }
    if (broadcast_type_C == 3)
    {
        sum = image3d_ld1(C_blob_3d, ivec3(gx, gy, 0));
    }
    if (broadcast_type_C == 4)
    {
        sum = image3d_ld1(C_blob_3d, ivec3(gy, 0, 0));
    }
#else
    if (broadcast_type_C == 0)
    {
        sum = buffer_ld1(C_blob_data, 0);
    }
    if (broadcast_type_C == 1 || broadcast_type_C == 2)
    {
        sum = buffer_ld1(C_blob_data, gx);
    }
    if (broadcast_type_C == 3)
    {
        const int ci = gy * psc(N) + gx;
        sum = buffer_ld1(C_blob_data, ci);
    }
    if (broadcast_type_C == 4)
    {
        sum = buffer_ld1(C_blob_data, gy);
    }
#endif

    sum *= afp(beta);

    for (int k = 0; k < psc(K); k++)
    {
#if NCNN_image_shader
        ivec3 pa = transA ? ivec3(gx, k, 0) : ivec3(k, gx, 0);
        ivec3 pb = transA ? ivec3(k, gy, 0) : ivec3(gy, k, 0);

        afp a = image3d_ld1(A_blob_3d, pa);
        afp b = image3d_ld1(B_blob_3d, pb);
#else
        const int ai = transA ? k * A_hstep + gx : gx * A_hstep + k;
        const int bi = transB ? gy * B_hstep + k : k * B_hstep + gy;

        afp a = buffer_ld1(A_blob_data, ai);
        afp b = buffer_ld1(B_blob_data, bi);
#endif

        sum += a * b;
    }

    sum *= afp(alpha);

#if NCNN_image_shader
    ivec3 pi = output_transpose ? ivec3(gy, gx, 0) : ivec3(gx, gy, 0);

    image3d_st1(top_blob_3d, pi, sum);
#else
    const int gi = output_transpose ? gx * outhstep + gy : gy * outhstep + gx;

    buffer_st1(top_blob_data, gi, sum);
#endif
}
