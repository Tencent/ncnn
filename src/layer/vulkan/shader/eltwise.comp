// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2018 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;
layout (constant_id = 1) const int coeff_term = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob1_3d;
layout (binding = 1) uniform unfp sampler3D bottom_blob2_3d;
layout (binding = 2, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob1 { sfp bottom_blob1_data[]; };
layout (binding = 1) readonly buffer bottom_blob2 { sfp bottom_blob2_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    float coeff0;
    float coeff1;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    afp v1 = image3d_ld1(bottom_blob1_3d, ivec3(gx, gy, gz));
    afp v2 = image3d_ld1(bottom_blob2_3d, ivec3(gx, gy, gz));
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afp v1 = buffer_ld1(bottom_blob1_data, gi);
    afp v2 = buffer_ld1(bottom_blob2_data, gi);
#endif

    afp res;

    if (coeff_term == 0)
    {
        if (op_type == 0)
            res = v1 * v2;

        if (op_type == 1)
            res = v1 + v2;

        if (op_type == 2)
            res = max(v1, v2);
    }
    else
    {
        if (op_type == 0)
            res = v1 * v2;

        if (op_type == 1)
            res = v1 * afp(p.coeff0) + v2 * afp(p.coeff1);

        if (op_type == 2)
            res = max(v1, v2);
    }

#if NCNN_image_shader
    image3d_st1(top_blob_3d, ivec3(gx, gy, gz), res);
#else
    buffer_st1(top_blob_data, gi, res);
#endif
}
