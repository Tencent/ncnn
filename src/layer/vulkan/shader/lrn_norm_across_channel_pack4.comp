// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int region_type = 0;
layout (constant_id = 1) const int local_size = 0;
layout (constant_id = 2) const float alpha = 0;
layout (constant_id = 3) const float beta = 0;
layout (constant_id = 4) const float bias_constant = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer square_workspace { sfp square_workspace_data[]; };
layout (binding = 1) buffer bottom_top_blob { sfpvec4 bottom_top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    // support region_type == 0 only

    afpvec4 sum = afpvec4(0.f);

    ivec4 z4 = gz * 4 + ivec4(0, 1, 2, 3);
    ivec4 v_offset = z4 * p.cstep + gy * p.w + gx;

    for (int z = 0; z < local_size; z++)
    {
        sum.r += sfp2afp(square_workspace_data[v_offset.r]);
        sum.g += sfp2afp(square_workspace_data[v_offset.g]);
        sum.b += sfp2afp(square_workspace_data[v_offset.b]);
        sum.a += sfp2afp(square_workspace_data[v_offset.a]);

        v_offset += p.cstep;
    }

    const afp alpha_div_size = afp(alpha / local_size);
    afpvec4 scale = pow(afp(bias_constant) + alpha_div_size * sum, afpvec4(-beta));

    int gi = gz * p.outcstep + gy * p.outw + gx;
    afpvec4 v = sfp2afpvec4(bottom_top_blob_data[gi]) * scale;
    bottom_top_blob_data[gi] = afp2sfpvec4(v);
}
