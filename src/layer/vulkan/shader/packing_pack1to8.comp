// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#if !NCNN_fp16_arithmetic
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int cast_type_from = 0;
layout (constant_id = 1) const int cast_type_to = 0;
layout (constant_id = 2) const int storage_type_from = 0;
layout (constant_id = 3) const int storage_type_to = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 0) readonly buffer bottom_blob_fp32 { float bottom_blob_fp32_data[]; };
layout (binding = 0) readonly buffer bottom_blob_fp16p { float bottom_blob_fp16p_data[]; };
#if NCNN_fp16_storage
layout (binding = 0) readonly buffer bottom_blob_fp16s { sfp bottom_blob_fp16s_data[]; };
#endif
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob_fp32 { mat2x4 top_blob_fp32_data[]; };
layout (binding = 1) writeonly buffer top_blob_fp16p { uvec4 top_blob_fp16p_data[]; };
#if NCNN_fp16_storage
layout (binding = 1) writeonly buffer top_blob_fp16s { sfpvec8 top_blob_fp16s_data[]; };
#endif
#if NCNN_image_shader
layout (binding = 2) uniform unfp sampler1D bottom_blob_1d;
layout (binding = 2) uniform unfp sampler2D bottom_blob_2d;
layout (binding = 2) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 2) uniform highp sampler1D bottom_blob_1d_fp32;
layout (binding = 2) uniform highp sampler2D bottom_blob_2d_fp32;
layout (binding = 2) uniform highp sampler3D bottom_blob_3d_fp32;
layout (binding = 2) uniform mediump sampler1D bottom_blob_1d_fp16p;
layout (binding = 2) uniform mediump sampler2D bottom_blob_2d_fp16p;
layout (binding = 2) uniform mediump sampler3D bottom_blob_3d_fp16p;
#if NCNN_fp16_storage
layout (binding = 2) uniform mediump sampler1D bottom_blob_1d_fp16s;
layout (binding = 2) uniform mediump sampler2D bottom_blob_2d_fp16s;
layout (binding = 2) uniform mediump sampler3D bottom_blob_3d_fp16s;
#endif
layout (binding = 3, imfmtc4) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 3, imfmtc4) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 3, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
layout (binding = 3, rgba32f) writeonly uniform highp image1D top_blob_1d_fp32;
layout (binding = 3, rgba32f) writeonly uniform highp image2D top_blob_2d_fp32;
layout (binding = 3, rgba32f) writeonly uniform highp image3D top_blob_3d_fp32;
layout (binding = 3, rgba16f) writeonly uniform mediump image1D top_blob_1d_fp16p;
layout (binding = 3, rgba16f) writeonly uniform mediump image2D top_blob_2d_fp16p;
layout (binding = 3, rgba16f) writeonly uniform mediump image3D top_blob_3d_fp16p;
#if NCNN_fp16_storage
layout (binding = 3, rgba16f) writeonly uniform mediump image1D top_blob_1d_fp16s;
layout (binding = 3, rgba16f) writeonly uniform mediump image2D top_blob_2d_fp16s;
layout (binding = 3, rgba16f) writeonly uniform mediump image3D top_blob_3d_fp16s;
#endif
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    afpvec8 v;

    if (psc(dims) == 1)
    {
        if (storage_type_from == 0)
        {
            ivec4 x4 = ivec4(gx * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = x4;
            ivec4 vv_offset = x4 + 4;

            if (cast_type_from == 0)
            {
                v[0].r = buffer_ld1(bottom_blob_data, v_offset.r);
                v[0].g = buffer_ld1(bottom_blob_data, v_offset.g);
                v[0].b = buffer_ld1(bottom_blob_data, v_offset.b);
                v[0].a = buffer_ld1(bottom_blob_data, v_offset.a);
                v[1].r = buffer_ld1(bottom_blob_data, vv_offset.r);
                v[1].g = buffer_ld1(bottom_blob_data, vv_offset.g);
                v[1].b = buffer_ld1(bottom_blob_data, vv_offset.b);
                v[1].a = buffer_ld1(bottom_blob_data, vv_offset.a);
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(bottom_blob_fp32_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp32_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp32_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp32_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp32_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp32_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp32_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp32_data[vv_offset.a]);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(bottom_blob_fp16p_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16p_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16p_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16p_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16p_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16p_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16p_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16p_data[vv_offset.a]);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(bottom_blob_fp16s_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16s_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16s_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16s_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16s_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16s_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16s_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16s_data[vv_offset.a]);
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            int x4 = gx * 8;

            if (cast_type_from == 0)
            {
                v[0].r = image1d_ld1(bottom_blob_1d, x4 + 0);
                v[0].g = image1d_ld1(bottom_blob_1d, x4 + 1);
                v[0].b = image1d_ld1(bottom_blob_1d, x4 + 2);
                v[0].a = image1d_ld1(bottom_blob_1d, x4 + 3);
                v[1].r = image1d_ld1(bottom_blob_1d, x4 + 4);
                v[1].g = image1d_ld1(bottom_blob_1d, x4 + 5);
                v[1].b = image1d_ld1(bottom_blob_1d, x4 + 6);
                v[1].a = image1d_ld1(bottom_blob_1d, x4 + 7);
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(texelFetch(bottom_blob_1d_fp32, x4 + 0, 0).r);
                v[0].g = afp(texelFetch(bottom_blob_1d_fp32, x4 + 1, 0).r);
                v[0].b = afp(texelFetch(bottom_blob_1d_fp32, x4 + 2, 0).r);
                v[0].a = afp(texelFetch(bottom_blob_1d_fp32, x4 + 3, 0).r);
                v[1].r = afp(texelFetch(bottom_blob_1d_fp32, x4 + 4, 0).r);
                v[1].g = afp(texelFetch(bottom_blob_1d_fp32, x4 + 5, 0).r);
                v[1].b = afp(texelFetch(bottom_blob_1d_fp32, x4 + 6, 0).r);
                v[1].a = afp(texelFetch(bottom_blob_1d_fp32, x4 + 7, 0).r);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 0, 0).r);
                v[0].g = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 1, 0).r);
                v[0].b = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 2, 0).r);
                v[0].a = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 3, 0).r);
                v[1].r = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 4, 0).r);
                v[1].g = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 5, 0).r);
                v[1].b = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 6, 0).r);
                v[1].a = afp(texelFetch(bottom_blob_1d_fp16p, x4 + 7, 0).r);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 0, 0).r);
                v[0].g = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 1, 0).r);
                v[0].b = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 2, 0).r);
                v[0].a = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 3, 0).r);
                v[1].r = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 4, 0).r);
                v[1].g = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 5, 0).r);
                v[1].b = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 6, 0).r);
                v[1].a = afp(texelFetch(bottom_blob_1d_fp16s, x4 + 7, 0).r);
            }
#endif
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gx;

            if (cast_type_to == 0)
            {
                buffer_st8(top_blob_data, gi, v);
            }
            if (cast_type_to == 1)
            {
                top_blob_fp32_data[gi] = mat2x4(vec4(v[0]), vec4(v[1]));
            }
            if (cast_type_to == 2)
            {
                top_blob_fp16p_data[gi] = uvec4(uvec2(packHalf2x16(v[0].rg),packHalf2x16(v[0].ba)),uvec2(packHalf2x16(v[1].rg),packHalf2x16(v[1].ba)));
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
#if NCNN_fp16_arithmetic
                top_blob_fp16s_data[gi] = v;
#else
                top_blob_fp16s_data[gi].abcd = f16vec4(v[0]);
                top_blob_fp16s_data[gi].efgh = f16vec4(v[1]);
#endif
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            if (cast_type_to == 0)
            {
                image1d_st8(top_blob_1d, gx, v);
            }
            if (cast_type_to == 1)
            {
                imageStore(top_blob_1d_fp32, gx * 2, v[0]);
                imageStore(top_blob_1d_fp32, gx * 2 + 1, v[1]);
            }
            if (cast_type_to == 2)
            {
                imageStore(top_blob_1d_fp16p, gx * 2, v[0]);
                imageStore(top_blob_1d_fp16p, gx * 2 + 1, v[1]);
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
                imageStore(top_blob_1d_fp16s, gx * 2, v[0]);
                imageStore(top_blob_1d_fp16s, gx * 2 + 1, v[1]);
            }
#endif
        }
#endif
    }
    else if (psc(dims) == 2)
    {
        if (storage_type_from == 0)
        {
            ivec4 y4 = ivec4(gy * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = y4 * psc(w) + gx;
            ivec4 vv_offset = (y4 + 4) * psc(w) + gx;

            if (cast_type_from == 0)
            {
                v[0].r = buffer_ld1(bottom_blob_data, v_offset.r);
                v[0].g = buffer_ld1(bottom_blob_data, v_offset.g);
                v[0].b = buffer_ld1(bottom_blob_data, v_offset.b);
                v[0].a = buffer_ld1(bottom_blob_data, v_offset.a);
                v[1].r = buffer_ld1(bottom_blob_data, vv_offset.r);
                v[1].g = buffer_ld1(bottom_blob_data, vv_offset.g);
                v[1].b = buffer_ld1(bottom_blob_data, vv_offset.b);
                v[1].a = buffer_ld1(bottom_blob_data, vv_offset.a);
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(bottom_blob_fp32_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp32_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp32_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp32_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp32_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp32_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp32_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp32_data[vv_offset.a]);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(bottom_blob_fp16p_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16p_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16p_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16p_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16p_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16p_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16p_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16p_data[vv_offset.a]);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(bottom_blob_fp16s_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16s_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16s_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16s_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16s_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16s_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16s_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16s_data[vv_offset.a]);
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            int y4 = gy * 8;

            if (cast_type_from == 0)
            {
                v[0].r = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 0));
                v[0].g = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 1));
                v[0].b = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 2));
                v[0].a = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 3));
                v[1].r = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 4));
                v[1].g = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 5));
                v[1].b = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 6));
                v[1].a = image2d_ld1(bottom_blob_2d, ivec2(gx, y4 + 7));
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_2d_fp32, ivec2(gx, y4 + 7), 0).r);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_2d_fp16p, ivec2(gx, y4 + 7), 0).r);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_2d_fp16s, ivec2(gx, y4 + 7), 0).r);
            }
#endif
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gy * psc(outw) + gx;

            if (cast_type_to == 0)
            {
                buffer_st8(top_blob_data, gi, v);
            }
            if (cast_type_to == 1)
            {
                top_blob_fp32_data[gi] = mat2x4(vec4(v[0]), vec4(v[1]));
            }
            if (cast_type_to == 2)
            {
                top_blob_fp16p_data[gi] = uvec4(uvec2(packHalf2x16(v[0].rg),packHalf2x16(v[0].ba)),uvec2(packHalf2x16(v[1].rg),packHalf2x16(v[1].ba)));
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
#if NCNN_fp16_arithmetic
                top_blob_fp16s_data[gi] = v;
#else
                top_blob_fp16s_data[gi].abcd = f16vec4(v[0]);
                top_blob_fp16s_data[gi].efgh = f16vec4(v[1]);
#endif
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            if (cast_type_to == 0)
            {
                image2d_st8(top_blob_2d, ivec2(gx, gy), v);
            }
            if (cast_type_to == 1)
            {
                imageStore(top_blob_2d_fp32, ivec2(gx * 2, gy), v[0]);
                imageStore(top_blob_2d_fp32, ivec2(gx * 2 + 1, gy), v[1]);
            }
            if (cast_type_to == 2)
            {
                imageStore(top_blob_2d_fp16p, ivec2(gx * 2, gy), v[0]);
                imageStore(top_blob_2d_fp16p, ivec2(gx * 2 + 1, gy), v[1]);
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
                imageStore(top_blob_2d_fp16s, ivec2(gx * 2, gy), v[0]);
                imageStore(top_blob_2d_fp16s, ivec2(gx * 2 + 1, gy), v[1]);
            }
#endif
        }
#endif
    }
    else // if (psc(dims) == 3)
    {
        if (storage_type_from == 0)
        {
            ivec4 z4 = ivec4(gz * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = z4 * psc(cstep) + ivec4(gy * psc(w) + gx);
            ivec4 vv_offset = (z4 + 4) * psc(cstep) + ivec4(gy * psc(w) + gx);

            if (cast_type_from == 0)
            {
                v[0].r = buffer_ld1(bottom_blob_data, v_offset.r);
                v[0].g = buffer_ld1(bottom_blob_data, v_offset.g);
                v[0].b = buffer_ld1(bottom_blob_data, v_offset.b);
                v[0].a = buffer_ld1(bottom_blob_data, v_offset.a);
                v[1].r = buffer_ld1(bottom_blob_data, vv_offset.r);
                v[1].g = buffer_ld1(bottom_blob_data, vv_offset.g);
                v[1].b = buffer_ld1(bottom_blob_data, vv_offset.b);
                v[1].a = buffer_ld1(bottom_blob_data, vv_offset.a);
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(bottom_blob_fp32_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp32_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp32_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp32_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp32_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp32_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp32_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp32_data[vv_offset.a]);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(bottom_blob_fp16p_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16p_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16p_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16p_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16p_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16p_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16p_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16p_data[vv_offset.a]);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(bottom_blob_fp16s_data[v_offset.r]);
                v[0].g = afp(bottom_blob_fp16s_data[v_offset.g]);
                v[0].b = afp(bottom_blob_fp16s_data[v_offset.b]);
                v[0].a = afp(bottom_blob_fp16s_data[v_offset.a]);
                v[1].r = afp(bottom_blob_fp16s_data[vv_offset.r]);
                v[1].g = afp(bottom_blob_fp16s_data[vv_offset.g]);
                v[1].b = afp(bottom_blob_fp16s_data[vv_offset.b]);
                v[1].a = afp(bottom_blob_fp16s_data[vv_offset.a]);
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            int z4 = gz * 8;

            if (cast_type_from == 0)
            {
                v[0].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 0));
                v[0].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 1));
                v[0].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 2));
                v[0].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 3));
                v[1].r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 4));
                v[1].g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 5));
                v[1].b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 6));
                v[1].a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4 + 7));
            }
            if (cast_type_from == 1)
            {
                v[0].r = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_3d_fp32, ivec3(gx, gy, z4 + 7), 0).r);
            }
            if (cast_type_from == 2)
            {
                v[0].r = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_3d_fp16p, ivec3(gx, gy, z4 + 7), 0).r);
            }
#if NCNN_fp16_storage
            if (cast_type_from == 3)
            {
                v[0].r = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 0), 0).r);
                v[0].g = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 1), 0).r);
                v[0].b = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 2), 0).r);
                v[0].a = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 3), 0).r);
                v[1].r = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 4), 0).r);
                v[1].g = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 5), 0).r);
                v[1].b = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 6), 0).r);
                v[1].a = afp(texelFetch(bottom_blob_3d_fp16s, ivec3(gx, gy, z4 + 7), 0).r);
            }
#endif
        }
#endif

        if (storage_type_to == 0)
        {
            int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

            if (cast_type_to == 0)
            {
                buffer_st8(top_blob_data, gi, v);
            }
            if (cast_type_to == 1)
            {
                top_blob_fp32_data[gi] = mat2x4(vec4(v[0]), vec4(v[1]));
            }
            if (cast_type_to == 2)
            {
                top_blob_fp16p_data[gi] = uvec4(uvec2(packHalf2x16(v[0].rg),packHalf2x16(v[0].ba)),uvec2(packHalf2x16(v[1].rg),packHalf2x16(v[1].ba)));
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
#if NCNN_fp16_arithmetic
                top_blob_fp16s_data[gi] = v;
#else
                top_blob_fp16s_data[gi].abcd = f16vec4(v[0]);
                top_blob_fp16s_data[gi].efgh = f16vec4(v[1]);
#endif
            }
#endif
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            if (cast_type_to == 0)
            {
                image3d_st8(top_blob_3d, ivec3(gx, gy, gz), v);
            }
            if (cast_type_to == 1)
            {
                imageStore(top_blob_3d_fp32, ivec3(gx * 2, gy, gz), v[0]);
                imageStore(top_blob_3d_fp32, ivec3(gx * 2 + 1, gy, gz), v[1]);
            }
            if (cast_type_to == 2)
            {
                imageStore(top_blob_3d_fp16p, ivec3(gx * 2, gy, gz), v[0]);
                imageStore(top_blob_3d_fp16p, ivec3(gx * 2 + 1, gy, gz), v[1]);
            }
#if NCNN_fp16_storage
            if (cast_type_to == 3)
            {
                imageStore(top_blob_3d_fp16s, ivec3(gx * 2, gy, gz), v[0]);
                imageStore(top_blob_3d_fp16s, ivec3(gx * 2 + 1, gy, gz), v[1]);
            }
#endif
        }
#endif
    }
}
