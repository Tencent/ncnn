// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int pooling_type = 0;
layout (constant_id = 1) const int kernel_w = 1;
layout (constant_id = 2) const int kernel_h = 1;
layout (constant_id = 3) const int stride_w = 1;
layout (constant_id = 4) const int stride_h = 1;
layout (constant_id = 5) const int global_pooling = 0;
layout (constant_id = 6) const int pad_mode = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    afpvec4 res;

    if (pad_mode == 0)
    {
        // full padding, use out of bound check
        if (pooling_type == 0)
        {
            res = afpvec4(-99999999.f);

            int v_offset = gz * p.cstep + gy * stride_h * p.w + gx * stride_w;

            for (int y = 0; y < kernel_h; y++)
            {
                if (gy * stride_h + y >= p.h)
                    continue;

                for (int x = 0; x < kernel_w; x++)
                {
                    if (gx * stride_w + x >= p.w)
                        continue;

                    res = max(res, afpvec4(bottom_blob_data[v_offset + x]));
                }

                v_offset += p.w;
            }
        }
        else if (pooling_type == 1)
        {
            res = afpvec4(0.f);

            int v_offset = gz * p.cstep + gy * stride_h * p.w + gx * stride_w;
            int area = 0;

            for (int y = 0; y < kernel_h; y++)
            {
                if (gy * stride_h + y >= p.h)
                    continue;

                for (int x = 0; x < kernel_w; x++)
                {
                    if (gx * stride_w + x >= p.w)
                        continue;

                    res += afpvec4(bottom_blob_data[v_offset + x]);
                    area += 1;
                }

                v_offset += p.w;
            }

            res /= afp(area);
        }

        top_blob_data[gz * p.outcstep + gy * p.outw + gx] = sfpvec4(res);

        return;
    }

    if (pooling_type == 0)
    {
        res = afpvec4(-99999999.f);

        int v_offset = gz * p.cstep + gy * stride_h * p.w + gx * stride_w;

        for (int y = 0; y < kernel_h; y++)
        {
            for (int x = 0; x < kernel_w; x++)
            {
                res = max(res, afpvec4(bottom_blob_data[v_offset + x]));
            }

            v_offset += p.w;
        }
    }
    else if (pooling_type == 1)
    {
        res = afpvec4(0.f);

        int v_offset = gz * p.cstep + gy * stride_h * p.w + gx * stride_w;

        for (int y = 0; y < kernel_h; y++)
        {
            for (int x = 0; x < kernel_w; x++)
            {
                res += afpvec4(bottom_blob_data[v_offset + x]);
            }

            v_offset += p.w;
        }

        res /= afp(kernel_w * kernel_h);
    }

    top_blob_data[gz * p.outcstep + gy * p.outw + gx] = sfpvec4(res);
}
