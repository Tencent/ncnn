// Copyright 2019 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

#define FLT_MAX 3.402823466e+38

layout (constant_id = 0) const int pooling_type = 0;
layout (constant_id = 1) const int kernel_w = 1;
layout (constant_id = 2) const int kernel_h = 1;
layout (constant_id = 3) const int stride_w = 1;
layout (constant_id = 4) const int stride_h = 1;
layout (constant_id = 5) const int pad_left = 0;
layout (constant_id = 6) const int pad_right = 0;
layout (constant_id = 7) const int pad_top = 0;
layout (constant_id = 8) const int pad_bottom = 0;
layout (constant_id = 9) const int global_pooling = 0;
layout (constant_id = 10) const int pad_mode = 0;
layout (constant_id = 11) const int avgpool_count_include_pad = 0;

#define shape_constant_id_offset 12
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;

    int wtailpad;
    int htailpad;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    afpvec4 res;

    if (pooling_type == 0)
    {
        res = afpvec4(-FLT_MAX);

        int v_offset = gz * psc(cstep) + gy * stride_h * psc(w) + gx * stride_w;

        for (int y = 0; y < kernel_h; y++)
        {
            for (int x = 0; x < kernel_w; x++)
            {
                afpvec4 v = buffer_ld4(bottom_blob_data, v_offset + x);
                res = max(res, v);
            }

            v_offset += psc(w);
        }
    }
    else if (pooling_type == 1 && avgpool_count_include_pad == 0)
    {
        res = afpvec4(0.f);
        int area = 0;

        int sx = gx * stride_w;
        int sy = gy * stride_h;

        int v_offset = gz * psc(cstep) + sy * psc(w) + sx;

        for (int y = 0; y < kernel_h; y++)
        {
            if (sy + y < pad_top)
            {
                v_offset += psc(w);
                continue;
            }

            if (sy + y >= psc(h) - pad_bottom - p.htailpad)
                break;

            for (int x = 0; x < kernel_w; x++)
            {
                if (sx + x < pad_left)
                {
                    continue;
                }

                if (sx + x >= psc(w) - pad_right - p.wtailpad)
                    break;

                res += buffer_ld4(bottom_blob_data, v_offset + x);
                area += 1;
            }

            v_offset += psc(w);
        }

        res /= afp(area);
    }
    else if (pooling_type == 1 && avgpool_count_include_pad == 1)
    {
        res = afpvec4(0.f);

        int v_offset = gz * psc(cstep) + gy * stride_h * psc(w) + gx * stride_w;

        for (int y = 0; y < kernel_h; y++)
        {
            for (int x = 0; x < kernel_w; x++)
            {
                res += buffer_ld4(bottom_blob_data, v_offset + x);
            }

            v_offset += psc(w);
        }

        res /= afp(kernel_w * kernel_h);
    }

    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    buffer_st4(top_blob_data, gi, res);
}
