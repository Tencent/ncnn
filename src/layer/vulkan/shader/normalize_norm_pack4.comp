// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int across_spatial = 0;
layout (constant_id = 1) const int across_channel = 0;
layout (constant_id = 2) const int channel_shared = 0;
layout (constant_id = 3) const int scale_term = 0;
layout (constant_id = 4) const float channel_shared_scale = 1.f;

#define shape_constant_id_offset 5
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D coeffs_blob;
layout (binding = 3) uniform unfp sampler3D scale_blob;
#else
layout (binding = 0) buffer bottom_top_blob { sfpvec4 bottom_top_blob_data[]; };
layout (binding = 1) readonly buffer coeffs_blob { sfpvec4 coeffs_blob_data[]; };
layout (binding = 2) readonly buffer scale_blob { sfpvec4 scale_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    afpvec4 v = image3d_ld4(bottom_blob, ivec3(gx, gy, gz));
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afpvec4 v = buffer_ld4(bottom_top_blob_data, gi);
#endif

    afpvec4 a;

    if (across_spatial == 1 && across_channel == 1)
    {
#if NCNN_image_shader
        a = image3d_ld4(coeffs_blob, ivec3(0, 0, 0));
#else
        a = buffer_ld4(coeffs_blob_data, 0);
#endif
    }

    if (across_spatial == 1 && across_channel == 0)
    {
#if NCNN_image_shader
        a = image3d_ld4(coeffs_blob, ivec3(gz, 0, 0));
#else
        a = buffer_ld4(coeffs_blob_data, gz);
#endif
    }

    if (across_spatial == 0 && across_channel == 1)
    {
#if NCNN_image_shader
        a = image3d_ld4(coeffs_blob, ivec3(gy * psc(w) + gx, 0, 0));
#else
        a = buffer_ld4(coeffs_blob_data, gy * psc(w) + gx);
#endif
    }

#if !NCNN_image_shader && (NCNN_fp16_packed || NCNN_fp16_storage)
    // NOTE coeffs may produce (X, undef, X, undef) on nvidia fp16p/fp16s
    // TODO only enable this workaround for some nvidia driver
    if (across_channel == 1)
    {
        a = afpvec4(a.r);
    }
#endif

    v = v * a;

    if (scale_term == 1)
    {
        if (channel_shared == 1)
        {
            v = v * afp(channel_shared_scale);
        }
        else
        {
#if NCNN_image_shader
            v = v * image3d_ld4(scale_blob, ivec3(gz, 0, 0));
#else
            v = v * buffer_ld4(scale_blob_data, gz);
#endif
        }
    }

#if NCNN_image_shader
    image3d_st4(top_blob, ivec3(gx, gy, gz), v);
#else
    buffer_st4(bottom_top_blob_data, gi, v);
#endif
}
