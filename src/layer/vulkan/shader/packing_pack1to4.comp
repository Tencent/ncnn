// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

layout (constant_id = 0) const int cast_type_from = 0;
layout (constant_id = 1) const int cast_type_to = 1;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const uint n = 0;
layout (constant_id = shape_constant_id_offset + 1) const uint c = 0;
layout (constant_id = shape_constant_id_offset + 2) const uint stride = 0;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) readonly buffer bottom_blob_fp32 { float bottom_blob_fp32_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 3) writeonly buffer top_blob_fp32 { vec4 top_blob_fp32_data[]; };

layout (push_constant) uniform parameter
{
    uint n;
    uint c;
    uint stride;
} p;

void main()
{
    const uint gx = gl_GlobalInvocationID.x;
    const uint gy = gl_GlobalInvocationID.y;

    if (gx >= psc(n) || gy >= psc(c))
        return;

    const uvec4 gi4 = (gy * 4 + uvec4(0, 1, 2, 3)) * psc(stride) + gx;

    const uint gi = gy * psc(n) + gx;

    if (cast_type_from == cast_type_to)
    {
        buffer_cp1to4(top_blob_data, gi, bottom_blob_data, gi4);
        return;
    }

    afpvec4 v;
    if (cast_type_from == 1)
    {
        vec4 vf;
        vf.r = bottom_blob_fp32_data[gi4.r];
        vf.g = bottom_blob_fp32_data[gi4.g];
        vf.b = bottom_blob_fp32_data[gi4.b];
        vf.a = bottom_blob_fp32_data[gi4.a];
        v = afpvec4(vf);
    }
    else
    {
        v.r = buffer_ld1(bottom_blob_data, gi4.r);
        v.g = buffer_ld1(bottom_blob_data, gi4.g);
        v.b = buffer_ld1(bottom_blob_data, gi4.b);
        v.a = buffer_ld1(bottom_blob_data, gi4.a);
    }

    if (cast_type_to == 1)
    {
        top_blob_fp32_data[gi] = vec4(v);
    }
    else
    {
        buffer_st4(top_blob_data, gi, v);
    }
}
