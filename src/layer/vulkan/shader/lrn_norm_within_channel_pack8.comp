// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int region_type = 0;
layout (constant_id = 1) const int local_size = 0;
layout (constant_id = 2) const float alpha = 0;
layout (constant_id = 3) const float beta = 0;
layout (constant_id = 4) const float bias_constant = 0;

#define shape_constant_id_offset 5
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer square_workspace { mat2x4 square_workspace_data[]; };
layout (binding = 1) buffer bottom_top_blob { sfpvec8 bottom_top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    // support region_type == 1 only

    afpvec8 sum = afpvec8(afpvec4(0.f), afpvec4(0.f));

    int v_offset = gz * psc(cstep) + gy * psc(w) + gx;

    for (int y = 0; y < local_size; y++)
    {
        for (int x = 0; x < local_size; x++)
        {
            sum += afpvec8(square_workspace_data[v_offset + x]);
        }

        v_offset += psc(w);
    }

    const afp alpha_div_size = afp(alpha / (local_size * local_size));
    afpvec8 scale;
    scale[0] = pow(afp(bias_constant) + alpha_div_size * sum[0], afpvec4(-beta));
    scale[1] = pow(afp(bias_constant) + alpha_div_size * sum[1], afpvec4(-beta));

    int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    afpvec8 v = buffer_ld8(bottom_top_blob_data, gi);

    v[0] *= scale[0];
    v[1] *= scale[1];

    buffer_st8(bottom_top_blob_data, gi, v);
}
