// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#if NCNN_image_shader
layout (binding = 0) uniform highp sampler3D square_blob;
layout (binding = 1, r32f) writeonly uniform highp image3D sqsum_blob;
#else
layout (binding = 0) readonly buffer square_blob { float square_blob_data[]; };
layout (binding = 1) writeonly buffer sqsum_blob { float sqsum_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    float sum;

#if NCNN_image_shader
    int sx = gx * 2;
    int sy = gy * 2;

    if (sy == p.h - 1)
    {
        if (sx == p.w - 1)
        {
            float v0 = texelFetch(square_blob, ivec3(sx, sy, gz), 0).r;

            sum = v0;
        }
        else
        {
            float v0 = texelFetch(square_blob, ivec3(sx, sy, gz), 0).r;
            float v1 = texelFetch(square_blob, ivec3(sx + 1, sy, gz), 0).r;

            sum = v0 + v1;
        }
    }
    else
    {
        if (sx == p.w - 1)
        {
            float v0 = texelFetch(square_blob, ivec3(sx, sy, gz), 0).r;
            float v2 = texelFetch(square_blob, ivec3(sx, sy + 1, gz), 0).r;

            sum = v0 + v2;
        }
        else
        {
            float v0 = texelFetch(square_blob, ivec3(sx, sy, gz), 0).r;
            float v1 = texelFetch(square_blob, ivec3(sx + 1, sy, gz), 0).r;
            float v2 = texelFetch(square_blob, ivec3(sx, sy + 1, gz), 0).r;
            float v3 = texelFetch(square_blob, ivec3(sx + 1, sy + 1, gz), 0).r;

            sum = v0 + v1 + v2 + v3;
        }
    }
#else
    int sx = gx * 4;

    int v_offset = gz * p.cstep + sx;

    if (sx == p.w - 1)
    {
        float v0 = square_blob_data[v_offset];

        sum = v0;
    }
    else if (sx == p.w - 2)
    {
        float v0 = square_blob_data[v_offset];
        float v1 = square_blob_data[v_offset + 1];

        sum = v0 + v1;
    }
    else if (sx == p.w - 2)
    {
        float v0 = square_blob_data[v_offset];
        float v1 = square_blob_data[v_offset + 1];
        float v2 = square_blob_data[v_offset + 2];

        sum = v0 + v1 + v2;
    }
    else
    {
        float v0 = square_blob_data[v_offset];
        float v1 = square_blob_data[v_offset + 1];
        float v2 = square_blob_data[v_offset + 2];
        float v3 = square_blob_data[v_offset + 3];

        sum = v0 + v1 + v2 + v3;
    }
#endif

#if NCNN_image_shader
    imageStore(sqsum_blob, ivec3(gx, gy, gz), vec4(sum));
#else
    int gi = gz * p.outcstep + gx;

    sqsum_blob_data[gi] = sum;
#endif
}
