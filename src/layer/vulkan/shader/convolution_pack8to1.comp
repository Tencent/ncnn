// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int kernel_h = 1;
layout (constant_id = 2) const int dilation_w = 1;
layout (constant_id = 3) const int dilation_h = 1;
layout (constant_id = 4) const int stride_w = 1;
layout (constant_id = 5) const int stride_h = 1;
layout (constant_id = 6) const int bias_term = 0;
layout (constant_id = 7) const int activation_type = 0;
layout (constant_id = 8) const float activation_param_0 = 0;
layout (constant_id = 9) const float activation_param_1 = 0;

#define shape_constant_id_offset 10
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec8 weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 2;
    int gy = int(gl_GlobalInvocationID.y) * 2;
    int gz = int(gl_GlobalInvocationID.z) * 2;

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    const ivec2 gx2 = gx + ivec2(0, 1);
    const ivec2 gy2 = gy + ivec2(0, 1);
    const ivec2 gz2 = gz + ivec2(0, 1);

    afp sum0;
    afp sum1;
    afp sum2;
    afp sum3;
    afp sum4;
    afp sum5;
    afp sum6;
    afp sum7;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum0 = image3d_ld1(bias_blob, ivec3(gz2.x, 0, 0));
        sum4 = image3d_ld1(bias_blob, ivec3(gz2.y, 0, 0));
#else
        sum0 = buffer_ld1(bias_data, gz2.x);
        sum4 = buffer_ld1(bias_data, gz2.y);
#endif
        sum1 = sum0;
        sum2 = sum0;
        sum3 = sum0;
        sum5 = sum4;
        sum6 = sum4;
        sum7 = sum4;
    }
    else
    {
        sum0 = afp(0.f);
        sum1 = afp(0.f);
        sum2 = afp(0.f);
        sum3 = afp(0.f);
        sum4 = afp(0.f);
        sum5 = afp(0.f);
        sum6 = afp(0.f);
        sum7 = afp(0.f);
    }

#if NCNN_image_shader
    for (int z = 0; z < psc(c); z++)
    {
        ivec2 sy = gy2 * stride_h;
        int wx = 0;

        for (int y = 0; y < kernel_h; y++)
        {
            ivec2 sx = gx2 * stride_w;

            for (int x = 0; x < kernel_w; x++)
            {
                afpvec8 v0 = image3d_ld8(bottom_blob, ivec3(sx.x, sy.x, z));
                afpvec8 v1 = image3d_ld8(bottom_blob, ivec3(sx.y, sy.x, z));
                afpvec8 v2 = image3d_ld8(bottom_blob, ivec3(sx.x, sy.y, z));
                afpvec8 v3 = image3d_ld8(bottom_blob, ivec3(sx.y, sy.y, z));

                afpvec8 k0 = image3d_ld8(weight_blob, ivec3(wx, z, gz2.x));
                afpvec8 k1 = image3d_ld8(weight_blob, ivec3(wx, z, gz2.y));

                // sum += dot(v, k);
                sum0 += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
                sum1 += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
                sum2 += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
                sum3 += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
                sum4 += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
                sum5 += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
                sum6 += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
                sum7 += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);

                sx += dilation_w;
                wx += 1;
            }

            sy += dilation_h;
        }
    }
#else
    ivec2 w_offset = gz2 * psc(c) * kernel_w * kernel_h;

    for (int z = 0; z < psc(c); z++)
    {
        ivec4 v_offset;
        v_offset.rg = z * psc(cstep) + gy2.x * stride_h * psc(w) + gx2 * stride_w;
        v_offset.ba = z * psc(cstep) + gy2.y * stride_h * psc(w) + gx2 * stride_w;

        for (int y = 0; y < kernel_h; y++)
        {
            for (int x = 0; x < kernel_w; x++)
            {
                afpvec8 v0 = buffer_ld8(bottom_blob_data, v_offset.r + x * dilation_w);
                afpvec8 v1 = buffer_ld8(bottom_blob_data, v_offset.g + x * dilation_w);
                afpvec8 v2 = buffer_ld8(bottom_blob_data, v_offset.b + x * dilation_w);
                afpvec8 v3 = buffer_ld8(bottom_blob_data, v_offset.a + x * dilation_w);

                afpvec8 k0 = buffer_ld8(weight_data, w_offset.x + x);
                afpvec8 k1 = buffer_ld8(weight_data, w_offset.y + x);

                // sum += dot(v, k);
                sum0 += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
                sum1 += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
                sum2 += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
                sum3 += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
                sum4 += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
                sum5 += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
                sum6 += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
                sum7 += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);
            }

            v_offset += dilation_h * psc(w);
            w_offset += kernel_w;
        }
    }
#endif

    if (activation_type == 1)
    {
        sum0 = max(sum0, afp(0.f));
        sum1 = max(sum1, afp(0.f));
        sum2 = max(sum2, afp(0.f));
        sum3 = max(sum3, afp(0.f));
        sum4 = max(sum4, afp(0.f));
        sum5 = max(sum5, afp(0.f));
        sum6 = max(sum6, afp(0.f));
        sum7 = max(sum7, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum0 = sum0 < afp(0.f) ? sum0 * slope : sum0;
        sum1 = sum1 < afp(0.f) ? sum1 * slope : sum1;
        sum2 = sum2 < afp(0.f) ? sum2 * slope : sum2;
        sum3 = sum3 < afp(0.f) ? sum3 * slope : sum3;
        sum4 = sum4 < afp(0.f) ? sum4 * slope : sum4;
        sum5 = sum5 < afp(0.f) ? sum5 * slope : sum5;
        sum6 = sum6 < afp(0.f) ? sum6 * slope : sum6;
        sum7 = sum7 < afp(0.f) ? sum7 * slope : sum7;
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum0 = clamp(sum0, const_min, const_max);
        sum1 = clamp(sum1, const_min, const_max);
        sum2 = clamp(sum2, const_min, const_max);
        sum3 = clamp(sum3, const_min, const_max);
        sum4 = clamp(sum4, const_min, const_max);
        sum5 = clamp(sum5, const_min, const_max);
        sum6 = clamp(sum6, const_min, const_max);
        sum7 = clamp(sum7, const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum0 = afp(1.f) / (afp(1.f) + exp(-sum0));
        sum1 = afp(1.f) / (afp(1.f) + exp(-sum1));
        sum2 = afp(1.f) / (afp(1.f) + exp(-sum2));
        sum3 = afp(1.f) / (afp(1.f) + exp(-sum3));
        sum4 = afp(1.f) / (afp(1.f) + exp(-sum4));
        sum5 = afp(1.f) / (afp(1.f) + exp(-sum5));
        sum6 = afp(1.f) / (afp(1.f) + exp(-sum6));
        sum7 = afp(1.f) / (afp(1.f) + exp(-sum7));
    }
    if (activation_type == 5)
    {
        sum0 = sum0 * tanh(log(exp(sum0) + afp(1.f)));
        sum1 = sum1 * tanh(log(exp(sum1) + afp(1.f)));
        sum2 = sum2 * tanh(log(exp(sum2) + afp(1.f)));
        sum3 = sum3 * tanh(log(exp(sum3) + afp(1.f)));
        sum4 = sum4 * tanh(log(exp(sum4) + afp(1.f)));
        sum5 = sum5 * tanh(log(exp(sum5) + afp(1.f)));
        sum6 = sum6 * tanh(log(exp(sum6) + afp(1.f)));
        sum7 = sum7 * tanh(log(exp(sum7) + afp(1.f)));
    }
    if (activation_type == 6)
    {
        const afp alpha = afp(activation_param_0);
        const afp beta = afp(activation_param_1);
        sum0 = sum0 * clamp(sum0 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum1 = sum1 * clamp(sum1 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum2 = sum2 * clamp(sum2 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum3 = sum3 * clamp(sum3 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum4 = sum4 * clamp(sum4 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum5 = sum5 * clamp(sum5 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum6 = sum6 * clamp(sum6 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        sum7 = sum7 * clamp(sum7 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
    }

#if NCNN_image_shader
    image3d_st1(top_blob, ivec3(gx2.x, gy2.x, gz2.x), sum0);
    image3d_st1(top_blob, ivec3(gx2.y, gy2.x, gz2.x), sum1);
    image3d_st1(top_blob, ivec3(gx2.x, gy2.y, gz2.x), sum2);
    image3d_st1(top_blob, ivec3(gx2.y, gy2.y, gz2.x), sum3);
    image3d_st1(top_blob, ivec3(gx2.x, gy2.x, gz2.y), sum4);
    image3d_st1(top_blob, ivec3(gx2.y, gy2.x, gz2.y), sum5);
    image3d_st1(top_blob, ivec3(gx2.x, gy2.y, gz2.y), sum6);
    image3d_st1(top_blob, ivec3(gx2.y, gy2.y, gz2.y), sum7);
#else
    const ivec2 gi = gz2 * psc(outcstep) + gy * psc(outw) + gx;

    buffer_st1(top_blob_data, gi.x, sum0);
    if (gx + 1 < psc(outw)) buffer_st1(top_blob_data, gi.x + 1, sum1);
    if (gy + 1 < psc(outh)) buffer_st1(top_blob_data, gi.x + psc(outw), sum2);
    if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st1(top_blob_data, gi.x + psc(outw) + 1, sum3);
    if (gz + 1 < psc(outc))
    {
        buffer_st1(top_blob_data, gi.y, sum4);
        if (gx + 1 < psc(outw)) buffer_st1(top_blob_data, gi.y + 1, sum5);
        if (gy + 1 < psc(outh)) buffer_st1(top_blob_data, gi.y + psc(outw), sum6);
        if (gy + 1 < psc(outh) && gx + 1 < psc(outw)) buffer_st1(top_blob_data, gi.y + psc(outw) + 1, sum7);
    }
#endif
}
