// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const float alpha = 0;
layout (constant_id = 1) const float beta = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D bottom_blob_1d;
layout (binding = 0) uniform unfp sampler2D bottom_blob_2d;
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) buffer bottom_top_blob { sfpvec8 bottom_top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    afpvec8 v;
    if (psc(dims) == 1)
    {
        v = image1d_ld8(bottom_blob_1d, gx);
    }
    else if (psc(dims) == 2)
    {
        v = image2d_ld8(bottom_blob_2d, ivec2(gx, gy));
    }
    else // if (psc(dims) == 3)
    {
        v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, gz));
    }
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afpvec8 v = buffer_ld8(bottom_top_blob_data, gi);
#endif

    v[0] = clamp(v[0] * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
    v[1] = clamp(v[1] * afp(alpha) + afp(beta), afp(0.f), afp(1.f));

#if NCNN_image_shader
    if (psc(dims) == 1)
    {
        image1d_st8(top_blob_1d, gx, v);
    }
    else if (psc(dims) == 2)
    {
        image2d_st8(top_blob_2d, ivec2(gx, gy), v);
    }
    else // if (psc(dims) == 3)
    {
        image3d_st8(top_blob_3d, ivec3(gx, gy, gz), v);
    }
#else
    buffer_st8(bottom_top_blob_data, gi, v);
#endif
}
