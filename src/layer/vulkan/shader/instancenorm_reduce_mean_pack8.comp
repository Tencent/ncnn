// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int size = 0;
layout (constant_id = shape_constant_id_offset + 1) const int c = 0;
layout (constant_id = shape_constant_id_offset + 2) const int cstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_top_blob { mat2x4 bottom_top_blob_data[]; };
layout (binding = 1) writeonly buffer mean_blob { sfpvec8 mean_data[]; };

layout (push_constant) uniform parameter
{
    int size;
    int c;
    int cstep;
    float area;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(c) || gy >= 1 || gz >= 1)
        return;

    afpvec8 sum = afpvec8(afpvec4(0.f), afpvec4(0.f));

    int v_offset = gx * psc(cstep);

    for (int i = 0; i < p.size; i++)
    {
        sum += afpvec8(bottom_top_blob_data[v_offset]);
        v_offset += 1;
    }

    afpvec8 mean;
    mean[0] = sum[0] / afp(p.area);
    mean[1] = sum[1] / afp(p.area);

    buffer_st8(mean_data, gx, mean);
}
