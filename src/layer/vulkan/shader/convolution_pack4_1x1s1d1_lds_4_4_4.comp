// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

layout (local_size_x_id = 233) in;// must == 4
layout (local_size_y_id = 234) in;// must == 4
layout (local_size_z_id = 235) in;// must == 4

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#if NCNN_fp16_storage && !NCNN_fp16_arithmetic
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

// local cache
shared afpvec4 lv[(/*gl_WorkGroupSize.x*/4 + 0) * (/*gl_WorkGroupSize.y*/4 + 0)];
shared afpvec4 lk0[/*gl_WorkGroupSize.z*/4 * 1];
shared afpvec4 lk1[/*gl_WorkGroupSize.z*/4 * 1];
shared afpvec4 lk2[/*gl_WorkGroupSize.z*/4 * 1];
shared afpvec4 lk3[/*gl_WorkGroupSize.z*/4 * 1];

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    int lx = int(gl_LocalInvocationID.x);
    int ly = int(gl_LocalInvocationID.y);
    int lz = int(gl_LocalInvocationID.z);

    afpvec4 sum;

    if (bias_term == 1)
    {
        sum = afpvec4(bias_data[gz]);
    }
    else
    {
        sum = afpvec4(0.f);
    }

    int v_offset = gy * p.w + gx;
    int w_offset = gz * p.c;

    for (int z = 0; z < p.c; z++)
    {
        int lv_offset = ly * int(/*gl_WorkGroupSize.x*/4) + lx;
        int lw_offset = lz;

        barrier();

        // load v to local cache
        if (lz == 0)
        {
            lv[lv_offset] = afpvec4(bottom_blob_data[v_offset]);
        }

        // load k to local cache
        if (lx == 0 && ly == 0)
        {
#if NCNN_fp16_storage && !NCNN_fp16_arithmetic
            // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
            lk0[lw_offset] = afpvec4(weight_data[w_offset * 4 + 0]);
            lk1[lw_offset] = afpvec4(weight_data[w_offset * 4 + 1]);
            lk2[lw_offset] = afpvec4(weight_data[w_offset * 4 + 2]);
            lk3[lw_offset] = afpvec4(weight_data[w_offset * 4 + 3]);
#else
            afpmat4 k = afpmat4(weight_data[w_offset]);
            lk0[lw_offset] = k[0];
            lk1[lw_offset] = k[1];
            lk2[lw_offset] = k[2];
            lk3[lw_offset] = k[3];
#endif
        }

        barrier();
        memoryBarrierShared();

        afpvec4 v = lv[lv_offset];
        afpmat4 k = afpmat4(
            lk0[lw_offset],
            lk1[lw_offset],
            lk2[lw_offset],
            lk3[lw_offset]
        );
        sum += v * k;

        v_offset += p.cstep;
        w_offset += 1;
    }

    if (activation_type == 1)
    {
        sum = max(sum, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum = mix(sum, sum * afp(slope), lessThan(sum, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum = clamp(sum, const_min, const_max);
    }

    top_blob_data[gz * p.outcstep + gy * p.outw + gx] = sfpvec4(sum);
}
