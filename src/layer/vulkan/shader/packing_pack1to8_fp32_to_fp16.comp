// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

layout (constant_id = 0) const uint n0 = 0;
layout (constant_id = 1) const uint n1 = 0;
layout (constant_id = 2) const uint stride = 0;

layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    uint n0;
    uint n1;
    uint stride;
} p;

void main()
{
    const uint gx = gl_GlobalInvocationID.x;
    const uint gy = gl_GlobalInvocationID.y;

    if (gx >= psc(n0) || gy >= psc(n1))
        return;

    const uvec4 gi4 = (gy * 8 + uvec4(0, 1, 2, 3)) * psc(stride) + gx;
    const uvec4 gi8 = gi4 + psc(stride) * 4;

    vec4 v0;
    vec4 v1;
    v0.r = bottom_blob_data[gi4.r];
    v0.g = bottom_blob_data[gi4.g];
    v0.b = bottom_blob_data[gi4.b];
    v0.a = bottom_blob_data[gi4.a];
    v1.r = bottom_blob_data[gi8.r];
    v1.g = bottom_blob_data[gi8.g];
    v1.b = bottom_blob_data[gi8.b];
    v1.a = bottom_blob_data[gi8.a];

    afpvec8 v;
    v[0] = afpvec4(v0);
    v[1] = afpvec4(v1);

    const uint gi = gy * psc(n0) + gx;

    buffer_st8(top_blob_data, gi, v);
}
