// Copyright 2025 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int scale_data_size = 0;
layout (constant_id = 1) const float scale_value = 1.f;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const uint c = 0;
layout (constant_id = shape_constant_id_offset + 1) const uint in_stride = 0;
layout (constant_id = shape_constant_id_offset + 2) const uint out_stride = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sint8vec4 top_blob_data[]; };
layout (binding = 2) readonly buffer scale_blob { sfpvec4 scale_blob_data[]; };

layout (push_constant) uniform parameter
{
    uint c;
    uint in_stride;
    uint out_stride;
} p;

void main()
{
    const uint gi = gl_GlobalInvocationID.x;

    if (gi >= psc(in_stride) * psc(c))
        return;

    const uint gy = gi / psc(in_stride);
    const uint gx = gi % psc(in_stride);

    afpvec4 v = buffer_ld4(bottom_blob_data, gi);

    afpvec4 scale;
    if (scale_data_size == 1)
    {
        scale = afpvec4(scale_value);
    }
    else
    {
        scale = buffer_ld4(scale_blob_data, gy);
    }

    ivec4 v_int = ivec4(round(clamp(v * scale, afp(-127.f), afp(127.f))));

    const uint outgi = gy * psc(out_stride) + gx;

    i8buffer_st4(top_blob_data, outgi, v_int);
}
