// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int adims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int aw = 0;
layout (constant_id = shape_constant_id_offset + 2) const int ah = 0;
layout (constant_id = shape_constant_id_offset + 3) const int ac = 0;
layout (constant_id = shape_constant_id_offset + 4) const int acstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int bdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int bw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int bh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int bc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int bcstep = 0;

layout (constant_id = shape_constant_id_offset + 10) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 11) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 12) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 13) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 14) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D a_blob_3d;
layout (binding = 1) uniform unfp sampler3D b_blob_3d;
layout (binding = 2, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer a_blob { sfpvec8 a_blob_data[]; };
layout (binding = 1) readonly buffer b_blob { sfpvec8 b_blob_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int adims;
    int aw;
    int ah;
    int ac;
    int acstep;

    int bdims;
    int bw;
    int bh;
    int bc;
    int bcstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

#if NCNN_image_shader
    int ax = gx;
    int ay = gy;
    int az = gz;
    int bx = gx;
    int by = gy;
    int bz = gz;

    if (psc(adims) == 3)
    {
        if (psc(bdims) == 3)
        {
            if (psc(bw) == 1 && psc(bh) == 1)
            {
                // special type 1
                bx = 0;
                by = 0;
            }

            if (psc(bw) == psc(aw) && psc(bh) == psc(ah) && psc(bc) == 1)
            {
                // special type 2
                bz = 0;
            }

            if (psc(aw) == 1 && psc(ah) == 1)
            {
                // special type 3
                ax = 0;
                ay = 0;
            }

            if (psc(bw) == psc(aw) && psc(bh) == psc(ah) && psc(ac) == 1)
            {
                // special type 4
                az = 0;
            }
        }

        if (psc(bdims) == 2)
        {
            // type 18
            bx = gy;
            by = gz;
            bz = 0;
        }

        if (psc(bdims) == 1)
        {
            if (psc(bw) == 1)
            {
                // type 16
                bx = 0;
                by = 0;
                bz = 0;
            }
            else
            {
                // type 17
                bx = gz;
                by = 0;
                bz = 0;
            }
        }
    }
    else if (psc(adims) == 2)
    {
        if (psc(bdims) == 3)
        {
            // type 14
            ax = gy;
            ay = gz;
            az = 0;
        }

        if (psc(bdims) == 1)
        {
            if (psc(bw) == 1)
            {
                // type 11
                bx = 0;
                by = 0;
                bz = 0;
            }
            else
            {
                // type 12
                bx = gy;
                by = 0;
                bz = 0;
            }
        }
    }
    else if (psc(adims) == 1)
    {
        if (psc(aw) == 1)
        {
            // type 2 3 4
            ax = 0;
            ay = 0;
            az = 0;
        }
        else
        {
            if (psc(bdims) == 3)
            {
                // type 9
                ax = gz;
                ay = 0;
                az = 0;
            }

            if (psc(bdims) == 2)
            {
                // type 8
                ax = gy;
                ay = 0;
                az = 0;
            }

            if (psc(bdims) == 1)
            {
                if (psc(bw) == 1)
                {
                    // type 6
                    bx = 0;
                    by = 0;
                    bz = 0;
                }
            }
        }
    }

    afpvec8 v1 = image3d_ld8(a_blob_3d, ivec3(ax, ay, az));
    afpvec8 v2 = image3d_ld8(b_blob_3d, ivec3(bx, by, bz));
#else
    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    int ai;
    int bi;

    if (psc(adims) == 3)
    {
        if (psc(bdims) == 3)
        {
            if (psc(bw) == 1 && psc(bh) == 1)
            {
                // special type 1
                ai = gi;
                bi = gz * psc(bcstep);
            }

            if (psc(aw) == 1 && psc(ah) == 1)
            {
                // special type 3
                ai = gz * psc(acstep);
                bi = gi;
            }
        }

        if (psc(bdims) == 2)
        {
            // type 18
            ai = gi;
            bi = gz * psc(bw) + gy;
        }

        if (psc(bdims) == 1)
        {
            // type 17
            ai = gi;
            bi = gz;
        }
    }
    else if (psc(adims) == 2)
    {
        if (psc(bdims) == 3)
        {
            // type 14
            ai = gz * psc(aw) + gy;
            bi = gi;
        }

        if (psc(bdims) == 1)
        {
            // type 12
            ai = gi;
            bi = gy;
        }
    }
    else if (psc(adims) == 1)
    {
        if (psc(bdims) == 3)
        {
            // type 9
            ai = gz;
            bi = gi;
        }

        if (psc(bdims) == 2)
        {
            // type 8
            ai = gy;
            bi = gi;
        }
    }

    afpvec8 v1 = buffer_ld8(a_blob_data, ai);
    afpvec8 v2 = buffer_ld8(b_blob_data, bi);
#endif

    afpvec8 res;

    if (op_type == 0)
    {
        res[0] = v1[0] + v2[0];
        res[1] = v1[1] + v2[1];
    }
    if (op_type == 1)
    {
        res[0] = v1[0] - v2[0];
        res[1] = v1[1] - v2[1];
    }
    if (op_type == 2)
    {
        res[0] = v1[0] * v2[0];
        res[1] = v1[1] * v2[1];
    }
    if (op_type == 3)
    {
        res[0] = v1[0] / v2[0];
        res[1] = v1[1] / v2[1];
    }
    if (op_type == 4)
    {
        res[0] = max(v1[0], v2[0]);
        res[1] = max(v1[1], v2[1]);
    }
    if (op_type == 5)
    {
        res[0] = min(v1[0], v2[0]);
        res[1] = min(v1[1], v2[1]);
    }
    if (op_type == 6)
    {
        res[0] = pow(v1[0], v2[0]);
        res[1] = pow(v1[1], v2[1]);
    }
    if (op_type == 7)
    {
        res[0] = v2[0] - v1[0];
        res[1] = v2[1] - v1[1];
    }
    if (op_type == 8)
    {
        res[0] = v2[0] / v1[0];
        res[1] = v2[1] / v1[1];
    }

#if NCNN_image_shader
    image3d_st8(top_blob_3d, ivec3(gx, gy, gz), res);
#else
    buffer_st8(top_blob_data, gi, res);
#endif
}
