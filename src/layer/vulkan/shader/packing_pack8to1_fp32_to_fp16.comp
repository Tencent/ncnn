// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int storage_type_from = 0;
layout (constant_id = 1) const int storage_type_to = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob_fp32 { mat2x4 bottom_blob_fp32_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#if NCNN_image_shader
layout (binding = 2) uniform highp sampler1D bottom_blob_1d_fp32;
layout (binding = 2) uniform highp sampler2D bottom_blob_2d_fp32;
layout (binding = 2) uniform highp sampler3D bottom_blob_3d_fp32;
layout (binding = 3, imfmtc1) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 3, imfmtc1) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 3, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

    afpvec8 v;

    if (psc(dims) == 1)
    {
        if (storage_type_from == 0)
        {
            int gi = gx;

            v = afpvec8(bottom_blob_fp32_data[gi]);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = afpvec8(texelFetch(bottom_blob_1d_fp32, gx * 2, 0), texelFetch(bottom_blob_1d_fp32, gx * 2 + 1, 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec4 x4 = ivec4(gx * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = x4;
            ivec4 vv_offset = x4 + 4;

            buffer_st1(top_blob_data, v_offset.r, v[0].r);
            buffer_st1(top_blob_data, v_offset.g, v[0].g);
            buffer_st1(top_blob_data, v_offset.b, v[0].b);
            buffer_st1(top_blob_data, v_offset.a, v[0].a);
            buffer_st1(top_blob_data, vv_offset.r, v[1].r);
            buffer_st1(top_blob_data, vv_offset.g, v[1].g);
            buffer_st1(top_blob_data, vv_offset.b, v[1].b);
            buffer_st1(top_blob_data, vv_offset.a, v[1].a);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int x4 = gx * 8;

            image1d_st1(top_blob_1d, x4 + 0, v[0].r);
            image1d_st1(top_blob_1d, x4 + 1, v[0].g);
            image1d_st1(top_blob_1d, x4 + 2, v[0].b);
            image1d_st1(top_blob_1d, x4 + 3, v[0].a);
            image1d_st1(top_blob_1d, x4 + 4, v[1].r);
            image1d_st1(top_blob_1d, x4 + 5, v[1].g);
            image1d_st1(top_blob_1d, x4 + 6, v[1].b);
            image1d_st1(top_blob_1d, x4 + 7, v[1].a);
        }
#endif
    }
    else if (psc(dims) == 2)
    {
        if (storage_type_from == 0)
        {
            int gi = gy * psc(w) + gx;

            v = afpvec8(bottom_blob_fp32_data[gi]);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = afpvec8(texelFetch(bottom_blob_2d_fp32, ivec2(gx * 2, gy), 0), texelFetch(bottom_blob_2d_fp32, ivec2(gx * 2 + 1, gy), 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec4 y4 = ivec4(gy * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = y4 * psc(outw) + gx;
            ivec4 vv_offset = (y4 + 4) * psc(outw) + gx;

            buffer_st1(top_blob_data, v_offset.r, v[0].r);
            buffer_st1(top_blob_data, v_offset.g, v[0].g);
            buffer_st1(top_blob_data, v_offset.b, v[0].b);
            buffer_st1(top_blob_data, v_offset.a, v[0].a);
            buffer_st1(top_blob_data, vv_offset.r, v[1].r);
            buffer_st1(top_blob_data, vv_offset.g, v[1].g);
            buffer_st1(top_blob_data, vv_offset.b, v[1].b);
            buffer_st1(top_blob_data, vv_offset.a, v[1].a);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int y4 = gy * 8;

            image2d_st1(top_blob_2d, ivec2(gx, y4 + 0), v[0].r);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 1), v[0].g);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 2), v[0].b);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 3), v[0].a);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 4), v[1].r);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 5), v[1].g);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 6), v[1].b);
            image2d_st1(top_blob_2d, ivec2(gx, y4 + 7), v[1].a);
        }
#endif
    }
    else // if (psc(dims) == 3)
    {
        if (storage_type_from == 0)
        {
            int gi = gz * psc(cstep) + gy * psc(w) + gx;

            v = afpvec8(bottom_blob_fp32_data[gi]);
        }
#if NCNN_image_shader
        if (storage_type_from == 1)
        {
            v = afpvec8(texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2, gy, gz), 0), texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2 + 1, gy, gz), 0));
        }
#endif

        if (storage_type_to == 0)
        {
            ivec4 z4 = ivec4(gz * 8) + ivec4(0, 1, 2, 3);

            ivec4 v_offset = z4 * psc(outcstep) + ivec4(gy * psc(outw) + gx);
            ivec4 vv_offset = (z4 + 4) * psc(outcstep) + ivec4(gy * psc(outw) + gx);

            buffer_st1(top_blob_data, v_offset.r, v[0].r);
            buffer_st1(top_blob_data, v_offset.g, v[0].g);
            buffer_st1(top_blob_data, v_offset.b, v[0].b);
            buffer_st1(top_blob_data, v_offset.a, v[0].a);
            buffer_st1(top_blob_data, vv_offset.r, v[1].r);
            buffer_st1(top_blob_data, vv_offset.g, v[1].g);
            buffer_st1(top_blob_data, vv_offset.b, v[1].b);
            buffer_st1(top_blob_data, vv_offset.a, v[1].a);
        }
#if NCNN_image_shader
        if (storage_type_to == 1)
        {
            int z4 = gz * 8;

            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 0), v[0].r);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 1), v[0].g);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 2), v[0].b);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 3), v[0].a);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 4), v[1].r);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 5), v[1].g);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 6), v[1].b);
            image3d_st1(top_blob_3d, ivec3(gx, gy, z4 + 7), v[1].a);
        }
#endif
    }
}
