// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int ndim = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int d = 0;
layout (constant_id = shape_constant_id_offset + 4) const int c = 0;
layout (constant_id = shape_constant_id_offset + 5) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 6) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outd = 0;
layout (constant_id = shape_constant_id_offset + 10) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 11) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
#if NCNN_fp16_packed
layout (binding = 0) readonly buffer bottom_blob { sfpvec2 bottom_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
#endif
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int d;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outd;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) * psc(outd) || gz >= psc(outc))
        return;

    ivec4 i4;
    if (ndim == 1) i4 = gx * 4 + ivec4(0, 1, 2, 3);
    if (ndim == 2) i4 = (gy * 4) * psc(outw) + gx + ivec4(0, 1, 2, 3) * psc(outw);
    if (ndim == 3) i4 = (gz * 4) * psc(outh) * psc(outw) + gy * psc(outw) + gx + ivec4(0, 1, 2, 3) * psc(outh) * psc(outw);
    if (ndim == 4) i4 = (gz * 4) * psc(outd) * psc(outh) * psc(outw) + gy * psc(outw) + gx + ivec4(0, 1, 2, 3) * psc(outd) * psc(outh) * psc(outw);

    ivec4 x4;
    ivec4 y4;
    ivec4 z4;

#if NCNN_image_shader
    ivec4 lane2;
    ivec4 lane4;
#else
    ivec4 v_offset;
#if NCNN_fp16_packed
    ivec4 lane2;
#endif
#endif

    if (psc(dims) == 1)
    {
        z4 = ivec4(0);
        y4 = ivec4(0);
        x4 = i4;

#if NCNN_image_shader
        lane2 = (x4 % 8) / 4;
        lane4 = x4 % 4;
        x4 = x4 / 8;
#else
#if NCNN_fp16_packed
        v_offset = i4 / 2;
        lane2 = i4 % 2;
#else
        v_offset = i4;
#endif
#endif
    }
    else if (psc(dims) == 2)
    {
        z4 = ivec4(0);
        y4 = i4 / psc(w);
        x4 = i4 % psc(w);

#if NCNN_image_shader
        lane2 = (y4 % 8) / 4;
        lane4 = y4 % 4;
        y4 = y4 / 8;
#else
#if NCNN_fp16_packed

        v_offset = ((y4 / 8) * psc(w) + x4) * 4 + (y4 % 8) / 2;
        lane2 = y4 % 2;
#else
        v_offset = ((y4 / 8) * psc(w) + x4) * 8 + y4 % 8;
#endif
#endif
    }
    else if (psc(dims) == 3)
    {
        int size = psc(w) * psc(h);

        z4 = i4 / size;
        y4 = i4 % size / psc(w);
        x4 = i4 % size % psc(w);

#if NCNN_image_shader
        lane2 = (z4 % 8) / 4;
        lane4 = z4 % 4;
        z4 = z4 / 8;
#else
#if NCNN_fp16_packed
        v_offset = ((z4 / 8) * psc(cstep) + y4 * psc(w) + x4) * 4 + (z4 % 8) / 2;
        lane2 = z4 % 2;
#else
        v_offset = ((z4 / 8) * psc(cstep) + y4 * psc(w) + x4) * 8 + z4 % 8;
#endif
#endif
    }
    else // if (psc(dims) == 4)
    {
        int size = psc(w) * psc(h) * psc(d);
        int dsize = psc(w) * psc(h);

        z4 = i4 / size;
        ivec4 yd4 = i4 % size / dsize;
        ivec4 yh4 = i4 % size % dsize / psc(w);
        x4 = i4 % size % dsize % psc(w);

        y4 = yd4 * psc(h) + yh4;

#if NCNN_image_shader
        lane2 = (z4 % 8) / 4;
        lane4 = z4 % 4;
        z4 = z4 / 8;
#else
#if NCNN_fp16_packed
        v_offset = ((z4 / 8) * psc(cstep) + y4 * psc(w) + x4) * 4 + (z4 % 8) / 2;
        lane2 = z4 % 2;
#else
        v_offset = ((z4 / 8) * psc(cstep) + y4 * psc(w) + x4) * 8 + z4 % 8;
#endif
#endif
    }

#if NCNN_image_shader
    afpvec8 v0 = image3d_ld8(bottom_blob_3d, ivec3(x4.r, y4.r, z4.r));
    afpvec8 v1 = image3d_ld8(bottom_blob_3d, ivec3(x4.g, y4.g, z4.g));
    afpvec8 v2 = image3d_ld8(bottom_blob_3d, ivec3(x4.b, y4.b, z4.b));
    afpvec8 v3 = image3d_ld8(bottom_blob_3d, ivec3(x4.a, y4.a, z4.a));

    afpvec4 v;
    v.r = v0[lane2.r][lane4.r];
    v.g = v1[lane2.g][lane4.g];
    v.b = v2[lane2.b][lane4.b];
    v.a = v3[lane2.a][lane4.a];

    if (ndim == 1) image3d_st4(top_blob_3d, ivec3(gx, 0, 0), v);
    if (ndim == 2) image3d_st4(top_blob_3d, ivec3(gx, gy, 0), v);
    if (ndim == 3 || ndim == 4) image3d_st4(top_blob_3d, ivec3(gx, gy, gz), v);
#else
    int gi;
    if (ndim == 1) gi = gx;
    if (ndim == 2) gi = gy * psc(outw) + gx;
    if (ndim == 3 || ndim == 4) gi = gz * psc(outcstep) + gy * psc(outw) + gx;

#if NCNN_fp16_packed
    afpvec2 vr = buffer_ld2(bottom_blob_data, v_offset.r);
    afpvec2 vg = buffer_ld2(bottom_blob_data, v_offset.g);
    afpvec2 vb = buffer_ld2(bottom_blob_data, v_offset.b);
    afpvec2 va = buffer_ld2(bottom_blob_data, v_offset.a);

    afpvec4 v = afpvec4(vr[lane2.r], vg[lane2.g], vb[lane2.b], va[lane2.a]);

    buffer_st4(top_blob_data, gi, v);
#else
    buffer_cp1to4(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
#endif
}
