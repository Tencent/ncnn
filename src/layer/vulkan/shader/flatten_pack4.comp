// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_fp16_packed
layout (binding = 0) readonly buffer bottom_blob { sfpvec2 bottom_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
#endif
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= 1 || gz >= 1)
        return;

    ivec4 i4 = gx * 4 + ivec4(0, 1, 2, 3);

#if NCNN_fp16_packed
    ivec4 v_offset;
    ivec4 lane2;

    if (p.dims == 2)
    {
        ivec4 y4 = i4 / p.w;
        ivec4 x4 = i4 % p.w;

        v_offset = ((y4 / 4) * p.w + x4) * 2 + (y4 % 4) / 2;
        lane2 = y4 % 2;
    }
    else // if (p.dims == 3)
    {
        int size = p.w * p.h;

        ivec4 z4 = i4 / size;
        ivec4 y4 = i4 % size / p.w;
        ivec4 x4 = i4 % size % p.w;

        v_offset = ((z4 / 4) * p.cstep + y4 * p.w + x4) * 2 + (z4 % 4) / 2;
        lane2 = z4 % 2;
    }

    afpvec2 vr = buffer_ld2(bottom_blob_data, v_offset.r);
    afpvec2 vg = buffer_ld2(bottom_blob_data, v_offset.g);
    afpvec2 vb = buffer_ld2(bottom_blob_data, v_offset.b);
    afpvec2 va = buffer_ld2(bottom_blob_data, v_offset.a);

    afpvec4 v = afpvec4(vr[lane2.r], vg[lane2.g], vb[lane2.b], va[lane2.a]);

    buffer_st4(top_blob_data, gx, v);
#else
    ivec4 v_offset;

    if (p.dims == 2)
    {
        ivec4 y4 = i4 / p.w;
        ivec4 x4 = i4 % p.w;

        v_offset = ((y4 / 4) * p.w + x4) * 4 + y4 % 4;
    }
    else // if (p.dims == 3)
    {
        int size = p.w * p.h;

        ivec4 z4 = i4 / size;
        ivec4 y4 = i4 % size / p.w;
        ivec4 x4 = i4 % size % p.w;

        v_offset = ((z4 / 4) * p.cstep + y4 * p.w + x4) * 4 + z4 % 4;
    }

    buffer_cp1to4(top_blob_data, gx, bottom_blob_data, v_offset);
#endif
}
