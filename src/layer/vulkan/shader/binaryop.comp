// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2018 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;
layout (constant_id = 1) const int with_scalar = 0;
layout (constant_id = 2) const float const_b = 0;

#define shape_constant_id_offset 3
layout (constant_id = shape_constant_id_offset + 0) const int adims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int aw = 0;
layout (constant_id = shape_constant_id_offset + 2) const int ah = 0;
layout (constant_id = shape_constant_id_offset + 3) const int ac = 0;
layout (constant_id = shape_constant_id_offset + 4) const int acstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int bdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int bw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int bh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int bc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int bcstep = 0;

layout (constant_id = shape_constant_id_offset + 10) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 11) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 12) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 13) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 14) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D a_blob_1d;
layout (binding = 0) uniform unfp sampler2D a_blob_2d;
layout (binding = 0) uniform unfp sampler3D a_blob_3d;
layout (binding = 1) uniform unfp sampler1D b_blob_1d;
layout (binding = 1) uniform unfp sampler2D b_blob_2d;
layout (binding = 1) uniform unfp sampler3D b_blob_3d;
layout (binding = 2, imfmtc1) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 2, imfmtc1) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 2, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) buffer a_blob { sfp a_blob_data[]; };
layout (binding = 1) readonly buffer b_blob { sfp b_blob_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int adims;
    int aw;
    int ah;
    int ac;
    int acstep;

    int bdims;
    int bw;
    int bh;
    int bc;
    int bcstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

#if NCNN_image_shader
    afp v1;

    if (psc(outdims) == 1)
    {
        v1 = image1d_ld1(a_blob_1d, gx);
    }
    else if (psc(outdims) == 2)
    {
        v1 = image2d_ld1(a_blob_2d, ivec2(gx, gy));
    }
    else // if (psc(outdims) == 3)
    {
        v1 = image3d_ld1(a_blob_3d, ivec3(gx, gy, gz));
    }
#else
    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    afp v1 = buffer_ld1(a_blob_data, gi);
#endif

    afp res;

    if (with_scalar == 1)
    {
        // type 5 10 15
        afp b = afp(const_b);

        if (op_type == 0) res = v1 + b;
        if (op_type == 1) res = v1 - b;
        if (op_type == 2) res = v1 * b;
        if (op_type == 3) res = v1 / b;
        if (op_type == 4) res = max(v1, b);
        if (op_type == 5) res = min(v1, b);
        if (op_type == 6) res = pow(v1, b);
        if (op_type == 7) res = b - v1;
        if (op_type == 8) res = b / v1;

#if NCNN_image_shader
        if (psc(outdims) == 1)
        {
            image1d_st1(top_blob_1d, gx, res);
        }
        else if (psc(outdims) == 2)
        {
            image2d_st1(top_blob_2d, ivec2(gx, gy), res);
        }
        else // if (psc(outdims) == 3)
        {
            image3d_st1(top_blob_3d, ivec3(gx, gy, gz), res);
        }
#else
        buffer_st1(a_blob_data, gi, res);
#endif
    }
    else
    {
        // type 7 13 19
#if NCNN_image_shader
        afp v2;

        if (psc(outdims) == 1)
        {
            v2 = image1d_ld1(b_blob_1d, gx);
        }
        else if (psc(outdims) == 2)
        {
            v2 = image2d_ld1(b_blob_2d, ivec2(gx, gy));
        }
        else // if (psc(outdims) == 3)
        {
            v2 = image3d_ld1(b_blob_3d, ivec3(gx, gy, gz));
        }
#else
        afp v2 = buffer_ld1(b_blob_data, gi);
#endif

        if (op_type == 0) res = v1 + v2;
        if (op_type == 1) res = v1 - v2;
        if (op_type == 2) res = v1 * v2;
        if (op_type == 3) res = v1 / v2;
        if (op_type == 4) res = max(v1, v2);
        if (op_type == 5) res = min(v1, v2);
        if (op_type == 6) res = pow(v1, v2);
        if (op_type == 7) res = v2 - v1;
        if (op_type == 8) res = v2 / v1;

#if NCNN_image_shader
        if (psc(outdims) == 1)
        {
            image1d_st1(top_blob_1d, gx, res);
        }
        else if (psc(outdims) == 2)
        {
            image2d_st1(top_blob_2d, ivec2(gx, gy), res);
        }
        else // if (psc(outdims) == 3)
        {
            image3d_st1(top_blob_3d, ivec3(gx, gy, gz), res);
        }
#else
        buffer_st1(top_blob_data, gi, res);
#endif
    }
}
