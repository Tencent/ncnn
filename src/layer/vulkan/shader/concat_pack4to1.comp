// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int axis = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;

    int offset;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

    ivec3 gxyz = ivec3(gx, gy, gz);

    gxyz[psc(dims) - 1] *= 4;
    gxyz[psc(dims) - 1 - axis] += p.offset;

#if NCNN_image_shader
    afpvec4 v = image3d_ld4(bottom_blob_3d, ivec3(gx, gy, gz));

    if (psc(dims) == 1)
    {
        image3d_st1(top_blob_3d, ivec3(gxyz.x + 0, 0, 0), v.r);
        image3d_st1(top_blob_3d, ivec3(gxyz.x + 1, 0, 0), v.g);
        image3d_st1(top_blob_3d, ivec3(gxyz.x + 2, 0, 0), v.b);
        image3d_st1(top_blob_3d, ivec3(gxyz.x + 3, 0, 0), v.a);
    }
    else if (psc(dims) == 2)
    {
        if (axis == 0)
        {
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 0, 0), v.r);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 1, 0), v.g);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 2, 0), v.b);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 3, 0), v.a);
        }
        if (axis == 1)
        {
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 0, gxyz.y, 0), v.r);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 1, gxyz.y, 0), v.g);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 2, gxyz.y, 0), v.b);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 3, gxyz.y, 0), v.a);
        }
    }
    else // if (psc(dims) == 3)
    {
        if (axis == 0)
        {
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y, gxyz.z + 0), v.r);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y, gxyz.z + 1), v.g);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y, gxyz.z + 2), v.b);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y, gxyz.z + 3), v.a);
        }
        if (axis == 1)
        {
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 0, gxyz.z), v.r);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 1, gxyz.z), v.g);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 2, gxyz.z), v.b);
            image3d_st1(top_blob_3d, ivec3(gxyz.x, gxyz.y + 3, gxyz.z), v.a);
        }
        if (axis == 2)
        {
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 0, gxyz.y, gxyz.z), v.r);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 1, gxyz.y, gxyz.z), v.g);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 2, gxyz.y, gxyz.z), v.b);
            image3d_st1(top_blob_3d, ivec3(gxyz.x + 3, gxyz.y, gxyz.z), v.a);
        }
    }
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    int v_offset_0 = gxyz.z * psc(outcstep) + gxyz.y * psc(outw) + gxyz.x;

    ivec3 gxyz4 = ivec3(1, psc(outw), psc(outcstep));

    ivec4 v_offset = v_offset_0 + ivec4(0, 1, 2, 3) * gxyz4[psc(dims) - 1 - axis];

    buffer_cp4to1(top_blob_data, v_offset, bottom_blob_data, gi);
#endif
}
