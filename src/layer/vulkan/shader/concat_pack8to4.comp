// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int axis = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D bottom_blob_1d;
layout (binding = 0) uniform unfp sampler2D bottom_blob_2d;
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;

    int offset;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    if (psc(dims) == 1)
    {
        afpvec8 v = image1d_ld8(bottom_blob_1d, gx);

        int gx2 = gx * 2 + p.offset;

        image1d_st4(top_blob_1d, gx2 + 0, v[0]);
        image1d_st4(top_blob_1d, gx2 + 1, v[1]);

    }
    else if (psc(dims) == 2)
    {
        afpvec8 v = image2d_ld8(bottom_blob_2d, ivec2(gx, gy));

        if (axis == 0)
        {
            int gy2 = gy * 2 + p.offset;

            image2d_st4(top_blob_2d, ivec2(gx, gy2 + 0), v[0]);
            image2d_st4(top_blob_2d, ivec2(gx, gy2 + 1), v[1]);
        }
        if (axis == 1)
        {
            int gx2 = gx * 2 + p.offset;

            image2d_st4(top_blob_2d, ivec2(gx2 + 0, gy), v[0]);
            image2d_st4(top_blob_2d, ivec2(gx2 + 1, gy), v[1]);
        }
    }
    else // if (psc(dims) == 3)
    {
        afpvec8 v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, gz));

        if (axis == 0)
        {
            int gz2 = gz * 2 + p.offset;

            image3d_st4(top_blob_3d, ivec3(gx, gy, gz2 + 0), v[0]);
            image3d_st4(top_blob_3d, ivec3(gx, gy, gz2 + 1), v[1]);
        }
        if (axis == 1)
        {
            int gy2 = gy * 2 + p.offset;

            image3d_st4(top_blob_3d, ivec3(gx, gy2 + 0, gz), v[0]);
            image3d_st4(top_blob_3d, ivec3(gx, gy2 + 1, gz), v[1]);
        }
        if (axis == 2)
        {
            int gx2 = gx * 2 + p.offset;

            image3d_st4(top_blob_3d, ivec3(gx2 + 0, gy, gz), v[0]);
            image3d_st4(top_blob_3d, ivec3(gx2 + 1, gy, gz), v[1]);
        }
    }
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    ivec3 gxyz = ivec3(gx, gy, gz);

    gxyz[psc(dims) - 1] *= 2;
    gxyz[psc(dims) - 1 - axis] += p.offset;

    int v_offset_0 = gxyz.z * psc(outcstep) + gxyz.y * psc(outw) + gxyz.x;

    ivec3 gxyz4 = ivec3(1, psc(outw), psc(outcstep));

    ivec2 v_offset = v_offset_0 + ivec2(0, 1) * gxyz4[psc(dims) - 1 - axis];

    buffer_cp8to4(top_blob_data, v_offset, bottom_blob_data, gi);
#endif
}
