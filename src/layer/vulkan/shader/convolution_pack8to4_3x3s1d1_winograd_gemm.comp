// Copyright 2022 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int batch = 1;
layout (constant_id = 1) const int c = 0;
layout (constant_id = 2) const int outc = 0;

#define shape_constant_id_offset 3
layout (constant_id = shape_constant_id_offset + 0) const int cstep = 0;
layout (constant_id = shape_constant_id_offset + 1) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 2) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_tm_blob { sfpvec8 bottom_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_tm_blob { sfpvec4 top_tm_blob_data[]; };
layout (binding = 2) readonly buffer weight_tm_blob { sfpvec8 weight_tm_data[]; };

layout (push_constant) uniform parameter
{
    int cstep;
    int outw;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= outc || gz >= batch)
        return;

    afpvec4 sum0 = afpvec4(0.f);
    afpvec4 sum1 = afpvec4(0.f);
    afpvec4 sum2 = afpvec4(0.f);
    afpvec4 sum3 = afpvec4(0.f);

    int v_offset = gz * c * psc(cstep) + gx;
    int w_offset = (gz * c * outc + gy * c) * 4;

    for (int z = 0; z < c; z++)
    {
        afpvec8 v0 = buffer_ld8(bottom_tm_blob_data, v_offset + 0);
        afpvec8 v1 = buffer_ld8(bottom_tm_blob_data, v_offset + 1);
        afpvec8 v2 = buffer_ld8(bottom_tm_blob_data, v_offset + 2);
        afpvec8 v3 = buffer_ld8(bottom_tm_blob_data, v_offset + 3);

        afpvec8 k0 = buffer_ld8(weight_tm_data, w_offset + 0);
        afpvec8 k1 = buffer_ld8(weight_tm_data, w_offset + 1);
        afpvec8 k2 = buffer_ld8(weight_tm_data, w_offset + 2);
        afpvec8 k3 = buffer_ld8(weight_tm_data, w_offset + 3);

        // sum += v * k;
        sum0.r += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
        sum0.g += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
        sum0.b += dot(v0[0], k2[0]) + dot(v0[1], k2[1]);
        sum0.a += dot(v0[0], k3[0]) + dot(v0[1], k3[1]);

        sum1.r += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
        sum1.g += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
        sum1.b += dot(v1[0], k2[0]) + dot(v1[1], k2[1]);
        sum1.a += dot(v1[0], k3[0]) + dot(v1[1], k3[1]);

        sum2.r += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
        sum2.g += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
        sum2.b += dot(v2[0], k2[0]) + dot(v2[1], k2[1]);
        sum2.a += dot(v2[0], k3[0]) + dot(v2[1], k3[1]);

        sum3.r += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
        sum3.g += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);
        sum3.b += dot(v3[0], k2[0]) + dot(v3[1], k2[1]);
        sum3.a += dot(v3[0], k3[0]) + dot(v3[1], k3[1]);

        v_offset += psc(cstep);
        w_offset += 4;
    }

    int gi = gz * outc * psc(outcstep) + gy * psc(outcstep) + gx;

    buffer_st4(top_tm_blob_data, gi + 0, sum0);
    if (gx + 1 < psc(outw)) buffer_st4(top_tm_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outw)) buffer_st4(top_tm_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outw)) buffer_st4(top_tm_blob_data, gi + 3, sum3);
}
