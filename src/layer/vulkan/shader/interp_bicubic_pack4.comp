// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif
layout (binding = 2) readonly buffer alpha_blob { sfpvec4 alpha_blob_data[]; };
layout (binding = 3) readonly buffer xofs_blob { int xofs_blob_data[]; };
layout (binding = 4) readonly buffer beta_blob { sfpvec4 beta_blob_data[]; };
layout (binding = 5) readonly buffer yofs_blob { int yofs_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    int sx = xofs_blob_data[gx];
    int sy = yofs_blob_data[gy];

#if NCNN_image_shader
    afpvec4 a0 = image3d_ld4(bottom_blob, ivec3(sx - 1, sy - 1, gz));
    afpvec4 a1 = image3d_ld4(bottom_blob, ivec3(sx + 0, sy - 1, gz));
    afpvec4 a2 = image3d_ld4(bottom_blob, ivec3(sx + 1, sy - 1, gz));
    afpvec4 a3 = image3d_ld4(bottom_blob, ivec3(sx + 2, sy - 1, gz));

    afpmat4 a0123 = afpmat4(a0, a1, a2, a3);

    afpvec4 b0 = image3d_ld4(bottom_blob, ivec3(sx - 1, sy + 0, gz));
    afpvec4 b1 = image3d_ld4(bottom_blob, ivec3(sx + 0, sy + 0, gz));
    afpvec4 b2 = image3d_ld4(bottom_blob, ivec3(sx + 1, sy + 0, gz));
    afpvec4 b3 = image3d_ld4(bottom_blob, ivec3(sx + 2, sy + 0, gz));

    afpmat4 b0123 = afpmat4(b0, b1, b2, b3);

    afpvec4 c0 = image3d_ld4(bottom_blob, ivec3(sx - 1, sy + 1, gz));
    afpvec4 c1 = image3d_ld4(bottom_blob, ivec3(sx + 0, sy + 1, gz));
    afpvec4 c2 = image3d_ld4(bottom_blob, ivec3(sx + 1, sy + 1, gz));
    afpvec4 c3 = image3d_ld4(bottom_blob, ivec3(sx + 2, sy + 1, gz));

    afpmat4 c0123 = afpmat4(c0, c1, c2, c3);

    afpvec4 d0 = image3d_ld4(bottom_blob, ivec3(sx - 1, sy + 2, gz));
    afpvec4 d1 = image3d_ld4(bottom_blob, ivec3(sx + 0, sy + 2, gz));
    afpvec4 d2 = image3d_ld4(bottom_blob, ivec3(sx + 1, sy + 2, gz));
    afpvec4 d3 = image3d_ld4(bottom_blob, ivec3(sx + 2, sy + 2, gz));

    afpmat4 d0123 = afpmat4(d0, d1, d2, d3);
#else
    int v_offset_0 = gz * psc(cstep) + (sy - 1) * psc(w) + sx;
    int v_offset_1 = gz * psc(cstep) + (sy + 0) * psc(w) + sx;
    int v_offset_2 = gz * psc(cstep) + (sy + 1) * psc(w) + sx;
    int v_offset_3 = gz * psc(cstep) + (sy + 2) * psc(w) + sx;

    afpvec4 a0 = buffer_ld4(bottom_blob_data, v_offset_0 - 1);
    afpvec4 a1 = buffer_ld4(bottom_blob_data, v_offset_0 + 0);
    afpvec4 a2 = buffer_ld4(bottom_blob_data, v_offset_0 + 1);
    afpvec4 a3 = buffer_ld4(bottom_blob_data, v_offset_0 + 2);

    afpmat4 a0123 = afpmat4(a0, a1, a2, a3);

    afpvec4 b0 = buffer_ld4(bottom_blob_data, v_offset_1 - 1);
    afpvec4 b1 = buffer_ld4(bottom_blob_data, v_offset_1 + 0);
    afpvec4 b2 = buffer_ld4(bottom_blob_data, v_offset_1 + 1);
    afpvec4 b3 = buffer_ld4(bottom_blob_data, v_offset_1 + 2);

    afpmat4 b0123 = afpmat4(b0, b1, b2, b3);

    afpvec4 c0 = buffer_ld4(bottom_blob_data, v_offset_2 - 1);
    afpvec4 c1 = buffer_ld4(bottom_blob_data, v_offset_2 + 0);
    afpvec4 c2 = buffer_ld4(bottom_blob_data, v_offset_2 + 1);
    afpvec4 c3 = buffer_ld4(bottom_blob_data, v_offset_2 + 2);

    afpmat4 c0123 = afpmat4(c0, c1, c2, c3);

    afpvec4 d0 = buffer_ld4(bottom_blob_data, v_offset_3 - 1);
    afpvec4 d1 = buffer_ld4(bottom_blob_data, v_offset_3 + 0);
    afpvec4 d2 = buffer_ld4(bottom_blob_data, v_offset_3 + 1);
    afpvec4 d3 = buffer_ld4(bottom_blob_data, v_offset_3 + 2);

    afpmat4 d0123 = afpmat4(d0, d1, d2, d3);
#endif

    afpvec4 alpha = buffer_ld4(alpha_blob_data, gx);

    afpvec4 a = a0123 * alpha;
    afpvec4 b = b0123 * alpha;
    afpvec4 c = c0123 * alpha;
    afpvec4 d = d0123 * alpha;

    afpmat4 abcd = afpmat4(a, b, c, d);

    afpvec4 beta = buffer_ld4(beta_blob_data, gy);

    afpvec4 v = abcd * beta;

#if NCNN_image_shader
    image3d_st4(top_blob, ivec3(gx, gy, gz), v);
#else
    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    buffer_st4(top_blob_data, gi, v);
#endif
}
