// Copyright 2022 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;

layout (constant_id = shape_constant_id_offset + 2) const int outw = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
layout (binding = 2) readonly buffer bias_blob { sfpvec8 bias_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;

    int outw;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= 1 || gz >= 1)
        return;

    afpvec8 sum;

    if (bias_term == 1)
    {
        sum = buffer_ld8(bias_data, gx);
    }
    else
    {
        sum = afpvec8(afpvec4(0.f), afpvec4(0.f));
    }

    int v_offset = gx * psc(w);

    for (int i = 0; i < psc(w); i++)
    {
        sum += buffer_ld8(bottom_blob_data, v_offset + i);
    }

    sum = activation_afpvec8(sum, activation_type, activation_param_0, activation_param_1);

    buffer_st8(top_blob_data, gx, sum);
}
