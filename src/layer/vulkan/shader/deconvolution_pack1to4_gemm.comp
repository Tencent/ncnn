// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define LOCAL_MEMORY_UNROLL_INCH 8

layout (constant_id = 0) const int maxk = 1;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D col_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer col_blob { sfpvec4 col_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;

    int outw;
    int outh;
} p;

#if NCNN_shader_local_memory
shared lfp tmp_v[8][LOCAL_MEMORY_UNROLL_INCH][4];
shared lfpvec4 tmp_k[8][LOCAL_MEMORY_UNROLL_INCH];
#endif

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);

#if !NCNN_shader_local_memory
    if (gx >= psc(outw) || gy >= psc(outh))
        return;
#endif

    afpvec4 sum0 = afpvec4(0.f);
    afpvec4 sum1 = afpvec4(0.f);
    afpvec4 sum2 = afpvec4(0.f);
    afpvec4 sum3 = afpvec4(0.f);

#if NCNN_image_shader
    ivec4 gx4 = gx + ivec4(0, 1, 2, 3);

    ivec4 sy4 = gx4 / psc(w);
    ivec4 sx4 = gx4 % psc(w);

    for (int z = 0; z < psc(c); z++)
    {
        afp v0 = image3d_ld1(bottom_blob, ivec3(sx4.r, sy4.r, z));
        afp v1 = image3d_ld1(bottom_blob, ivec3(sx4.g, sy4.g, z));
        afp v2 = image3d_ld1(bottom_blob, ivec3(sx4.b, sy4.b, z));
        afp v3 = image3d_ld1(bottom_blob, ivec3(sx4.a, sy4.a, z));

        afpvec4 k = image3d_ld4(weight_blob, ivec3(z, gy, 0));

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;
    }
#else
    int v_offset = gx;
    int w_offset = gy * psc(c);

#if NCNN_shader_local_memory
    const int lx = int(gl_LocalInvocationID.x);
    const int ly = int(gl_LocalInvocationID.y);

    int z = 0;
    for (; z + (LOCAL_MEMORY_UNROLL_INCH - 1) < psc(c); z += LOCAL_MEMORY_UNROLL_INCH)
    {
        if (ly < 4)
        {
            for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
            {
                tmp_v[lx][z4][ly] = sfp2lfp(bottom_blob_data[v_offset + z4 * psc(cstep) + ly]);
            }
        }

        if (lx == 0)
        {
            for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
            {
                tmp_k[ly][z4] = sfp2lfpvec4(weight_data[w_offset + z4]);
            }
        }

        barrier();

        for (int z4 = 0; z4 < LOCAL_MEMORY_UNROLL_INCH; z4++)
        {
            afp v0 = lfp2afp(tmp_v[lx][z4][0]);
            afp v1 = lfp2afp(tmp_v[lx][z4][1]);
            afp v2 = lfp2afp(tmp_v[lx][z4][2]);
            afp v3 = lfp2afp(tmp_v[lx][z4][3]);

            afpvec4 k = lfp2afpvec4(tmp_k[ly][z4]);

            sum0 += v0 * k;
            sum1 += v1 * k;
            sum2 += v2 * k;
            sum3 += v3 * k;
        }

        v_offset += LOCAL_MEMORY_UNROLL_INCH * psc(cstep);
        w_offset += LOCAL_MEMORY_UNROLL_INCH;

        barrier();
    }

    if (z < psc(c))
    {
        const int remain = psc(c) - z;

        if (ly < 4)
        {
            for (int z4 = 0; z4 < remain; z4++)
            {
                tmp_v[lx][z4][ly] = sfp2lfp(bottom_blob_data[v_offset + z4 * psc(cstep) + ly]);
            }
        }

        if (lx == 0)
        {
            for (int z4 = 0; z4 < remain; z4++)
            {
                tmp_k[ly][z4] = sfp2lfpvec4(weight_data[w_offset + z4]);
            }
        }

        barrier();

        for (int z4 = 0; z4 < remain; z4++)
        {
            afp v0 = lfp2afp(tmp_v[lx][z4][0]);
            afp v1 = lfp2afp(tmp_v[lx][z4][1]);
            afp v2 = lfp2afp(tmp_v[lx][z4][2]);
            afp v3 = lfp2afp(tmp_v[lx][z4][3]);

            afpvec4 k = lfp2afpvec4(tmp_k[ly][z4]);

            sum0 += v0 * k;
            sum1 += v1 * k;
            sum2 += v2 * k;
            sum3 += v3 * k;
        }
    }
#else
    for (int z = 0; z < psc(c); z++)
    {
        afp v0 = buffer_ld1(bottom_blob_data, v_offset + 0);
        afp v1 = buffer_ld1(bottom_blob_data, v_offset + 1);
        afp v2 = buffer_ld1(bottom_blob_data, v_offset + 2);
        afp v3 = buffer_ld1(bottom_blob_data, v_offset + 3);

        afpvec4 k = buffer_ld4(weight_data, w_offset);

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;

        v_offset += psc(cstep);
        w_offset += 1;
    }
#endif
#endif

#if NCNN_shader_local_memory
    if (gx >= psc(outw) || gy >= psc(outh))
        return;
#endif

#if NCNN_image_shader
    image3d_st4(col_blob, ivec3(gx4.r, gy, 0), sum0);
    image3d_st4(col_blob, ivec3(gx4.g, gy, 0), sum1);
    image3d_st4(col_blob, ivec3(gx4.b, gy, 0), sum2);
    image3d_st4(col_blob, ivec3(gx4.a, gy, 0), sum3);
#else
    const int gi = gy * psc(outw) + gx;

    buffer_st4(col_blob_data, gi, sum0);
    if (gx + 1 < psc(outw)) buffer_st4(col_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outw)) buffer_st4(col_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outw)) buffer_st4(col_blob_data, gi + 3, sum3);
#endif
}
