// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int op_type = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer a_blob { sfpvec4 a_blob_data[]; };
layout (binding = 1) readonly buffer b_blob { sfpvec4 b_blob_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int adims;
    int aw;
    int ah;
    int ac;
    int acstep;

    int bdims;
    int bw;
    int bh;
    int bc;
    int bcstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    const int gi = gz * p.outcstep + gy * p.outw + gx;

    int ai;
    int bi;

    if (p.adims == 3)
    {
        if (p.bdims == 3)
        {
            if (p.bw == 1 && p.bh == 1)
            {
                // special type 1
                ai = gi;
                bi = gz;
            }
        }

        if (p.bdims == 2)
        {
            // type 18
            ai = gi;
            bi = gz * p.bw + gy;
        }

        if (p.bdims == 1)
        {
            // type 17
            ai = gi;
            bi = gz;
        }
    }
    else if (p.adims == 2)
    {
        if (p.bdims == 3)
        {
            // type 14
            ai = gz * p.aw + gy;
            bi = gi;
        }

        if (p.bdims == 1)
        {
            // type 12
            ai = gi;
            bi = gy;
        }
    }
    else if (p.adims == 1)
    {
        if (p.bdims == 3)
        {
            // type 9
            ai = gz;
            bi = gi;
        }

        if (p.bdims == 2)
        {
            // type 8
            ai = gy;
            bi = gi;
        }
    }

    afpvec4 v1 = sfp2afpvec4(a_blob_data[ai]);
    afpvec4 v2 = sfp2afpvec4(b_blob_data[bi]);

    afpvec4 res;

    if (op_type == 0) res = v1 + v2;
    if (op_type == 1) res = v1 - v2;
    if (op_type == 2) res = v1 * v2;
    if (op_type == 3) res = v1 / v2;
    if (op_type == 4) res = max(v1, v2);
    if (op_type == 5) res = min(v1, v2);
    if (op_type == 6) res = pow(v1, v2);
    if (op_type == 7) res = v2 - v1;
    if (op_type == 8) res = v2 / v1;

    top_blob_data[gi] = afp2sfpvec4(res);
}
