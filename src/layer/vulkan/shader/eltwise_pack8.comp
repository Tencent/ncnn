// Copyright 2020 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int op_type = 0;
layout (constant_id = 1) const int coeff_term = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (binding = 0) readonly buffer bottom_blob1 { sfpvec8 bottom_blob1_data[]; };
layout (binding = 1) readonly buffer bottom_blob2 { sfpvec8 bottom_blob2_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    float coeff0;
    float coeff1;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afpvec8 v1 = buffer_ld8(bottom_blob1_data, gi);
    afpvec8 v2 = buffer_ld8(bottom_blob2_data, gi);

    afpvec8 res;

    if (coeff_term == 0)
    {
        if (op_type == 0)
        {
            res[0] = v1[0] * v2[0];
            res[1] = v1[1] * v2[1];
        }

        if (op_type == 1)
        {
            res[0] = v1[0] + v2[0];
            res[1] = v1[1] + v2[1];
        }

        if (op_type == 2)
        {
            res[0] = max(v1[0], v2[0]);
            res[1] = max(v1[1], v2[1]);
        }
    }
    else
    {
        if (op_type == 0)
        {
            res[0] = v1[0] * v2[0];
            res[1] = v1[1] * v2[1];
        }

        if (op_type == 1)
        {
            res[0] = v1[0] * afp(p.coeff0) + v2[0] * afp(p.coeff1);
            res[1] = v1[1] * afp(p.coeff0) + v2[1] * afp(p.coeff1);
        }

        if (op_type == 2)
        {
            res[0] = max(v1[0], v2[0]);
            res[1] = max(v1[1], v2[1]);
        }
    }

    buffer_st8(top_blob_data, gi, res);
}
