// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;
layout (constant_id = 1) const int coeff_term = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D bottom_blob1_1d;
layout (binding = 0) uniform unfp sampler2D bottom_blob1_2d;
layout (binding = 0) uniform unfp sampler3D bottom_blob1_3d;
layout (binding = 1) uniform unfp sampler1D bottom_blob2_1d;
layout (binding = 1) uniform unfp sampler2D bottom_blob2_2d;
layout (binding = 1) uniform unfp sampler3D bottom_blob2_3d;
layout (binding = 2, imfmtc4) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 2, imfmtc4) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 2, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob1 { sfpvec8 bottom_blob1_data[]; };
layout (binding = 1) readonly buffer bottom_blob2 { sfpvec8 bottom_blob2_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    float coeff0;
    float coeff1;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

#if NCNN_image_shader
    afpvec8 v1;
    afpvec8 v2;
    if (psc(dims) == 1)
    {
        v1 = image1d_ld8(bottom_blob1_1d, gx);
        v2 = image1d_ld8(bottom_blob2_1d, gx);
    }
    else if (psc(dims) == 2)
    {
        v1 = image2d_ld8(bottom_blob1_2d, ivec2(gx, gy));
        v2 = image2d_ld8(bottom_blob2_2d, ivec2(gx, gy));
    }
    else // if (psc(dims) == 3)
    {
        v1 = image3d_ld8(bottom_blob1_3d, ivec3(gx, gy, gz));
        v2 = image3d_ld8(bottom_blob2_3d, ivec3(gx, gy, gz));
    }
#else
    const int gi = gz * psc(cstep) + gy * psc(w) + gx;

    afpvec8 v1 = buffer_ld8(bottom_blob1_data, gi);
    afpvec8 v2 = buffer_ld8(bottom_blob2_data, gi);
#endif

    afpvec8 res;

    if (coeff_term == 0)
    {
        if (op_type == 0)
        {
            res[0] = v1[0] * v2[0];
            res[1] = v1[1] * v2[1];
        }

        if (op_type == 1)
        {
            res[0] = v1[0] + v2[0];
            res[1] = v1[1] + v2[1];
        }

        if (op_type == 2)
        {
            res[0] = max(v1[0], v2[0]);
            res[1] = max(v1[1], v2[1]);
        }
    }
    else
    {
        if (op_type == 0)
        {
            res[0] = v1[0] * v2[0];
            res[1] = v1[1] * v2[1];
        }

        if (op_type == 1)
        {
            res[0] = v1[0] * afp(p.coeff0) + v2[0] * afp(p.coeff1);
            res[1] = v1[1] * afp(p.coeff0) + v2[1] * afp(p.coeff1);
        }

        if (op_type == 2)
        {
            res[0] = max(v1[0], v2[0]);
            res[1] = max(v1[1], v2[1]);
        }
    }

#if NCNN_image_shader
    if (psc(dims) == 1)
    {
        image1d_st8(top_blob_1d, gx, res);
    }
    else if (psc(dims) == 2)
    {
        image2d_st8(top_blob_2d, ivec2(gx, gy), res);
    }
    else // if (psc(dims) == 3)
    {
        image3d_st8(top_blob_3d, ivec3(gx, gy, gz), res);
    }
#else
    buffer_st8(top_blob_data, gi, res);
#endif
}
