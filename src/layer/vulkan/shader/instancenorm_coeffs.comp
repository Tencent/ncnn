// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const float eps = 0;
layout (constant_id = 1) const int affine = 0;
layout (constant_id = 2) const int w = 0;

#if NCNN_image_shader
layout (binding = 0, imfmtc1) writeonly uniform unfp image1D coeffs_blob;
layout (binding = 1) uniform unfp sampler1D mean_blob;
layout (binding = 2) uniform unfp sampler1D var_blob;
layout (binding = 3) uniform unfp sampler1D gamma_blob;
layout (binding = 4) uniform unfp sampler1D beta_blob;
#else
layout (binding = 0) writeonly buffer coeffs_blob { sfp coeffs_blob_data[]; };
layout (binding = 1) readonly buffer mean_blob { sfp mean_data[]; };
layout (binding = 2) readonly buffer var_blob { sfp var_data[]; };
layout (binding = 3) readonly buffer gamma_blob { sfp gamma_data[]; };
layout (binding = 4) readonly buffer beta_blob { sfp beta_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= 1 || gz >= 1)
        return;

#if NCNN_image_shader
    afp mean = image1d_ld1(mean_blob, gx);
    afp var = image1d_ld1(var_blob, gx);
#else
    afp mean = buffer_ld1(mean_data, gx);
    afp var = buffer_ld1(var_data, gx);
#endif

    afp a;
    afp b;
    if (affine == 0)
    {
        a = afp(1.f) / (sqrt(var + afp(eps)));
        b = - mean * a;
    }
    else
    {
#if NCNN_image_shader
        afp gamma = image1d_ld1(gamma_blob, gx);
        afp beta = image1d_ld1(beta_blob, gx);
#else
        afp gamma = buffer_ld1(gamma_data, gx);
        afp beta = buffer_ld1(beta_data, gx);
#endif

        a = gamma / (sqrt(var + afp(eps)));
        b = - mean * a + beta;
    }

#if NCNN_image_shader
    image1d_st1(coeffs_blob, gx*2, a);
    image1d_st1(coeffs_blob, gx*2 +1, b);
#else
    buffer_st1(coeffs_blob_data, gx*2, a);
    buffer_st1(coeffs_blob_data, gx*2 +1, b);
#endif
}
