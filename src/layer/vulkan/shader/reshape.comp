// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int ndim = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    int i;

    if (ndim == 1) i = gx;
    if (ndim == 2) i = gy * p.outw + gx;
    if (ndim == 3) i = gz * p.outh * p.outw + gy * p.outw + gx;

    int size = p.w * p.h;

    int z = i / size;
    int y = i % size / p.w;
    int x = i % size % p.w;

    int v_offset = z * p.cstep + y * p.w + x;

    int gi;
    if (ndim == 1)
    {
        gi = gx;
    }
    if (ndim == 2)
    {
        gi = gy * p.outw + gx;
    }
    if (ndim == 3)
    {
        gi = gz * p.outcstep + gy * p.outw + gx;
    }

    top_blob_data[gi] = bottom_blob_data[v_offset];
}
