// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int ndim = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler1D bottom_blob_1d;
layout (binding = 0) uniform unfp sampler2D bottom_blob_2d;
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image1D top_blob_1d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image2D top_blob_2d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

    int i;

    if (ndim == 1) i = gx;
    if (ndim == 2) i = gy * psc(outw) + gx;
    if (ndim == 3) i = gz * psc(outh) * psc(outw) + gy * psc(outw) + gx;

    int size = psc(w) * psc(h);

    int z = i / size;
    int y = i % size / psc(w);
    int x = i % size % psc(w);

#if NCNN_image_shader
    afp v;

    if (psc(dims) == 1)
    {
        v = image1d_ld1(bottom_blob_1d, x);
    }
    else if (psc(dims) == 2)
    {
        v = image2d_ld1(bottom_blob_2d, ivec2(x, y));
    }
    else // if (psc(dims) == 3)
    {
        v = image3d_ld1(bottom_blob_3d, ivec3(x, y, z));
    }

    if (ndim == 1)
    {
        image1d_st1(top_blob_1d, gx, v);
    }
    if (ndim == 2)
    {
        image2d_st1(top_blob_2d, ivec2(gx, gy), v);
    }
    if (ndim == 3)
    {
        image3d_st1(top_blob_3d, ivec3(gx, gy, gz), v);
    }
#else
    int v_offset = z * psc(cstep) + y * psc(w) + x;

    int gi;
    if (ndim == 1)
    {
        gi = gx;
    }
    if (ndim == 2)
    {
        gi = gy * psc(outw) + gx;
    }
    if (ndim == 3)
    {
        gi = gz * psc(outcstep) + gy * psc(outw) + gx;
    }

    buffer_cp1(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
}
