// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int ndim = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.w || gy >= p.h || gz >= p.c)
        return;

    ivec3 gxyz = ivec3(gx, gy, gz);

    gxyz[p.dims - 1] *= 8;

    int i4_0 = gxyz.z * p.h * p.w + gxyz.y * p.w + gxyz.x;

    ivec3 gxyz4 = ivec3(1, p.w, p.h * p.w);

    ivec4 i4 = i4_0 + ivec4(0, 1, 2, 3) * gxyz4[p.dims - 1];
    ivec4 ii4 = i4 + 4 * gxyz4[p.dims - 1];

    ivec4 v_offset;
    ivec4 vv_offset;

    if (ndim == 1)
    {
        v_offset = i4;
        vv_offset = ii4;
    }
    if (ndim == 2)
    {
        ivec4 y4 = i4 / p.outw;
        ivec4 x4 = i4 % p.outw;
        ivec4 yy4 = ii4 / p.outw;
        ivec4 xx4 = ii4 % p.outw;

        v_offset = y4 * p.outw + x4;
        vv_offset = yy4 * p.outw + xx4;
    }
    if (ndim == 3)
    {
        int size = p.outw * p.outh;

        ivec4 z4 = i4 / size;
        ivec4 y4 = i4 % size / p.outw;
        ivec4 x4 = i4 % size % p.outw;
        ivec4 zz4 = ii4 / size;
        ivec4 yy4 = ii4 % size / p.outw;
        ivec4 xx4 = ii4 % size % p.outw;

        v_offset = z4 * p.outcstep + y4 * p.outw + x4;
        vv_offset = zz4 * p.outcstep + yy4 * p.outw + xx4;
    }

    int gi = gz * p.cstep + gy * p.w + gx;

    buffer_cp8to1(top_blob_data, v_offset, vv_offset, bottom_blob_data, gi);
}
