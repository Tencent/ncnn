// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer square_blob { mat2x4 square_blob_data[]; };
layout (binding = 1) writeonly buffer sqsum_blob { mat2x4 sqsum_blob_data[]; };

layout (push_constant) uniform parameter
{
    int size;
    int c;
    int cstep;

    int outsize;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outsize || gy >= 1 || gz >= p.outc)
        return;

    int gi = gz * p.outcstep + gx;

    int sx = gx * 4;

    int v_offset = gz * p.cstep + sx;

    if (sx == p.size - 1)
    {
        sqsum_blob_data[gi] = square_blob_data[v_offset];
    }
    else if (sx == p.size - 2)
    {
        mat2x4 v0 = square_blob_data[v_offset];
        mat2x4 v1 = square_blob_data[v_offset + 1];

        mat2x4 sum = v0 + v1;

        sqsum_blob_data[gi] = sum;
    }
    else if (sx == p.size - 3)
    {
        mat2x4 v0 = square_blob_data[v_offset];
        mat2x4 v1 = square_blob_data[v_offset + 1];
        mat2x4 v2 = square_blob_data[v_offset + 2];

        mat2x4 sum = v0 + v1 + v2;

        sqsum_blob_data[gi] = sum;
    }
    else
    {
        mat2x4 v0 = square_blob_data[v_offset];
        mat2x4 v1 = square_blob_data[v_offset + 1];
        mat2x4 v2 = square_blob_data[v_offset + 2];
        mat2x4 v3 = square_blob_data[v_offset + 3];

        mat2x4 sum = v0 + v1 + v2 + v3;

        sqsum_blob_data[gi] = sum;
    }
}
