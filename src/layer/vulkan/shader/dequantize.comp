// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

layout (constant_id = 0) const int scale_data_size = 0;
layout (constant_id = 1) const float scale_value = 1.f;
layout (constant_id = 2) const int bias_data_size = 0;
layout (constant_id = 3) const float bias_value = 0.f;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const uint c = 0;
layout (constant_id = shape_constant_id_offset + 1) const uint in_stride = 0;
layout (constant_id = shape_constant_id_offset + 2) const uint out_stride = 0;

layout (binding = 0) readonly buffer bottom_blob { int bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 2) readonly buffer scale_blob { sfp scale_blob_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_blob_data[]; };

layout (push_constant) uniform parameter
{
    uint c;
    uint in_stride;
    uint out_stride;
} p;

void main()
{
    const uint gi = gl_GlobalInvocationID.x;

    if (gi >= psc(in_stride) * psc(c))
        return;

    const uint gy = gi / psc(in_stride);
    const uint gx = gi % psc(in_stride);

    int v = bottom_blob_data[gi];

    afp scale;
    if (scale_data_size == 1)
    {
        scale = afp(scale_value);
    }
    else
    {
        scale = buffer_ld1(scale_blob_data, gy);
    }

    afp bias;
    if (bias_data_size == 0)
    {
        bias = afp(0.f);
    }
    else if (bias_data_size == 1)
    {
        bias = afp(bias_value);
    }
    else
    {
        bias = buffer_ld1(bias_blob_data, gy);
    }

    afp v_fp = afp(v) * scale + bias;

    const uint outgi = gy * psc(out_stride) + gx;

    buffer_st1(top_blob_data, outgi, v_fp);
}
