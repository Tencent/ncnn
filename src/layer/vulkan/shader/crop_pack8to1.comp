// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int bugihfa = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int d = 0;
layout (constant_id = shape_constant_id_offset + 4) const int c = 0;
layout (constant_id = shape_constant_id_offset + 5) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 6) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outd = 0;
layout (constant_id = shape_constant_id_offset + 10) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 11) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
#else
#if NCNN_fp16_packed
layout (binding = 0) readonly buffer bottom_blob { sfpvec2 bottom_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
#endif
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int d;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outd;
    int outc;
    int outcstep;

    int woffset;
    int hoffset;
    int doffset;
    int coffset;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) * psc(outd) || gz >= psc(outc))
        return;

    if (psc(dims) == 1)
    {
        int x = gx + p.woffset;

#if NCNN_image_shader
        afpvec8 v = image3d_ld8(bottom_blob, ivec3(x / 8, 0, 0));

        image3d_st1(top_blob, ivec3(gx, gy, gz), v[(x % 8) / 4][x % 4]);
#else
#if NCNN_fp16_packed
        int v_offset = (x / 8) * 4 + (x % 8) / 2;
        int lane2 = x % 2;

        afpvec2 v = buffer_ld2(bottom_blob_data, v_offset);

        buffer_st1(top_blob_data, gx, v[lane2]);
#else
        int v_offset = (x / 8) * 8 + x % 8;

        buffer_cp1(top_blob_data, gx, bottom_blob_data, v_offset);
#endif
#endif
    }
    else if (psc(dims) == 2)
    {
        int x = gx + p.woffset;
        int y = gy + p.hoffset;

#if NCNN_image_shader
        afpvec8 v = image3d_ld8(bottom_blob, ivec3(x, y / 8, 0));

        image3d_st1(top_blob, ivec3(gx, gy, 0), v[(y % 8) / 4][y % 4]);
#else
        int gi = gy * psc(outw) + gx;

#if NCNN_fp16_packed
        int v_offset = ((y / 8) * psc(w) + x) * 4 + (y % 8) / 2;
        int lane2 = y % 2;

        afpvec2 v = buffer_ld2(bottom_blob_data, v_offset);

        buffer_st1(top_blob_data, gi, v[lane2]);
#else
        int v_offset = ((y / 8) * psc(w) + x) * 8 + y % 8;

        buffer_cp1(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
#endif
    }
    else if (psc(dims) == 3)
    {
        int x = gx + p.woffset;
        int y = gy + p.hoffset;
        int z = gz + p.coffset;

#if NCNN_image_shader
        afpvec8 v = image3d_ld8(bottom_blob, ivec3(x, y, z / 8));

        image3d_st1(top_blob, ivec3(gx, gy, gz), v[(z % 8) / 4][z % 4]);
#else
        int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

#if NCNN_fp16_packed
        int v_offset = ((z / 8) * psc(cstep) + y * psc(w) + x) * 4 + (z % 8) / 2;
        int lane2 = z % 2;

        afpvec2 v = buffer_ld2(bottom_blob_data, v_offset);

        buffer_st1(top_blob_data, gi, v[lane2]);
#else
        int v_offset = ((z / 8) * psc(cstep) + y * psc(w) + x) * 8 + z % 8;

        buffer_cp1(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
#endif
    }
    else // if (psc(dims) == 4)
    {
        int yd = gy / psc(outh);
        int yh = gy % psc(outh);

        int x = gx + p.woffset;
        int y = (yd + p.doffset) * psc(h) + (yh + p.hoffset);
        int z = gz + p.coffset;

#if NCNN_image_shader
        afpvec8 v = image3d_ld8(bottom_blob, ivec3(x, y, z / 8));

        image3d_st1(top_blob, ivec3(gx, gy, gz), v[(z % 8) / 4][z % 4]);
#else
        int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

#if NCNN_fp16_packed
        int v_offset = ((z / 8) * psc(cstep) + y * psc(w) + x) * 4 + (z % 8) / 2;
        int lane2 = z % 2;

        afpvec2 v = buffer_ld2(bottom_blob_data, v_offset);

        buffer_st1(top_blob_data, gi, v[lane2]);
#else
        int v_offset = ((z / 8) * psc(cstep) + y * psc(w) + x) * 8 + z % 8;

        buffer_cp1(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
#endif
    }
}
