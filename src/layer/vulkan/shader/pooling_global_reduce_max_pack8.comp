// Copyright 2023 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

#define FLT_MAX 3.402823466e+38

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int c = 0;
layout (constant_id = shape_constant_id_offset + 2) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 3) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 4) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int c;
    int cstep;

    int outw;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= 1 || gz >= psc(c))
        return;

    const int size_1 = psc(w) - 1;

    const int v_offset = gz * psc(cstep);

    afpvec8 res = afpvec8(afpvec4(-FLT_MAX), afpvec4(-FLT_MAX));

    for (int ii = 0; ii < 8; ii++)
    {
        int i = min(gx + ii * psc(outw), size_1);

        afpvec8 v = buffer_ld8(bottom_blob_data, v_offset + i);
        res[0] = max(res[0], v[0]);
        res[1] = max(res[1], v[1]);
    }

    buffer_st8(top_blob_data, gz * psc(outcstep) + gx, res);
}
