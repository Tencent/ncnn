// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx * 4 >= psc(outw) || gy >= psc(outh) || gz >= 1)
        return;

    afpvec4 sum;

    if (bias_term == 1)
    {
        sum = buffer_ld4(bias_data, gx);
    }
    else
    {
        sum = afpvec4(0.f);
    }

    int v_offset = gy * psc(w);
    int w_offset = gx * psc(w) / 4;

    for (int i = 0; i < psc(w) / 4; i++)
    {
        afpvec4 v;
        v.r = buffer_ld1(bottom_blob_data, v_offset + i * 4 + 0);
        v.g = buffer_ld1(bottom_blob_data, v_offset + i * 4 + 1);
        v.b = buffer_ld1(bottom_blob_data, v_offset + i * 4 + 2);
        v.a = buffer_ld1(bottom_blob_data, v_offset + i * 4 + 3);

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
        // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
        afpmat4 k = afpmat4(
            buffer_ld4(weight_data, (w_offset + i) * 4 + 0),
            buffer_ld4(weight_data, (w_offset + i) * 4 + 1),
            buffer_ld4(weight_data, (w_offset + i) * 4 + 2),
            buffer_ld4(weight_data, (w_offset + i) * 4 + 3)
        );
#else
        afpmat4 k = afpmat4(weight_data[w_offset + i]);
#endif

        sum += v * k;
    }

    sum = activation_afpvec4(sum, activation_type, activation_param_0, activation_param_1);

    const int gi = gy * psc(outw) + gx * 4;
    buffer_st1(top_blob_data, gi + 0, sum.r);
    buffer_st1(top_blob_data, gi + 1, sum.g);
    buffer_st1(top_blob_data, gi + 2, sum.b);
    buffer_st1(top_blob_data, gi + 3, sum.a);
}
