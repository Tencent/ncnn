// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#extension GL_GOOGLE_include_directive: enable
#include "vulkan_activation.comp"

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;

layout (constant_id = shape_constant_id_offset + 2) const int outw = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };
layout (binding = 2) readonly buffer bias_blob { sfp bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int h;

    int outw;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= 1 || gz >= 1)
        return;

    afp sum;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        sum = image3d_ld1(bias_blob, ivec3(gx, 0, 0));
#else
        sum = buffer_ld1(bias_data, gx);
#endif
    }
    else
    {
        sum = afp(0.f);
    }

#if NCNN_image_shader
    for (int i = 0; i < psc(w); i++)
    {
        sum += image3d_ld1(bottom_blob, ivec3(i, gx, 0));
    }
#else
    int v_offset = gx * psc(w);

    for (int i = 0; i < psc(w); i++)
    {
        sum += buffer_ld1(bottom_blob_data, v_offset + i);
    }
#endif

    sum = activation_afp(sum, activation_type, activation_param_0, activation_param_1);

#if NCNN_image_shader
    image3d_st1(top_blob, ivec3(gx, 0, 0), sum);
#else
    buffer_st1(top_blob_data, gx, sum);
#endif
}
