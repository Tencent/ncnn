// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int c = 0;
layout (constant_id = shape_constant_id_offset + 1) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 2) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 3) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 4) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_tm_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_tm_blob;
layout (binding = 2) uniform unfp sampler3D weight_tm_blob;
#else
layout (binding = 0) readonly buffer bottom_tm_blob { sfpvec4 bottom_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_tm_blob { sfpvec4 top_tm_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_tm_blob { sfpvec4 weight_tm_data[]; };
#else
layout (binding = 2) readonly buffer weight_tm_blob { sfpmat4 weight_tm_data[]; };
#endif
#endif

layout (push_constant) uniform parameter
{
    int c;
    int cstep;

    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y) * 4;
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= 16 || gy >= psc(outh) || gz >= psc(outc))
        return;

    afpvec4 sum0 = afpvec4(0.f);
    afpvec4 sum1 = afpvec4(0.f);
    afpvec4 sum2 = afpvec4(0.f);
    afpvec4 sum3 = afpvec4(0.f);

#if NCNN_image_shader
    int wx = gx * 4;

    for (int z = 0; z < psc(c); z++)
    {
        afpvec4 v0 = image3d_ld4(bottom_tm_blob, ivec3(gx, gy + 0, z));
        afpvec4 v1 = image3d_ld4(bottom_tm_blob, ivec3(gx, gy + 1, z));
        afpvec4 v2 = image3d_ld4(bottom_tm_blob, ivec3(gx, gy + 2, z));
        afpvec4 v3 = image3d_ld4(bottom_tm_blob, ivec3(gx, gy + 3, z));

        afpmat4 k = afpmat4(
            image3d_ld4(weight_tm_blob, ivec3(wx + 0, z, gz)),
            image3d_ld4(weight_tm_blob, ivec3(wx + 1, z, gz)),
            image3d_ld4(weight_tm_blob, ivec3(wx + 2, z, gz)),
            image3d_ld4(weight_tm_blob, ivec3(wx + 3, z, gz))
        );

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;
    }
#else
    int v_offset = gy * 16 + gx;
    int w_offset = gz * psc(c) * 16 + gx;

    for (int z = 0; z < psc(c); z++)
    {
        afpvec4 v0 = buffer_ld4(bottom_tm_blob_data, v_offset + 0);
        afpvec4 v1 = buffer_ld4(bottom_tm_blob_data, v_offset + 16);
        afpvec4 v2 = buffer_ld4(bottom_tm_blob_data, v_offset + 32);
        afpvec4 v3 = buffer_ld4(bottom_tm_blob_data, v_offset + 48);

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
        // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
        afpmat4 k = afpmat4(
            buffer_ld4(weight_tm_data, w_offset * 4 + 0),
            buffer_ld4(weight_tm_data, w_offset * 4 + 1),
            buffer_ld4(weight_tm_data, w_offset * 4 + 2),
            buffer_ld4(weight_tm_data, w_offset * 4 + 3)
        );
#else
        afpmat4 k = sfpmat4(weight_tm_data[w_offset]);
#endif

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;

        v_offset += psc(cstep);
        w_offset += 16;
    }
#endif

#if NCNN_image_shader
    image3d_st4(top_tm_blob, ivec3(gx, gy + 0, gz), sum0);
    image3d_st4(top_tm_blob, ivec3(gx, gy + 1, gz), sum1);
    image3d_st4(top_tm_blob, ivec3(gx, gy + 2, gz), sum2);
    image3d_st4(top_tm_blob, ivec3(gx, gy + 3, gz), sum3);
#else
    int gi = gz * psc(outcstep) + gy * 16 + gx;

    buffer_st4(top_tm_blob_data, gi + 0, sum0);
    if (gy + 1 < psc(outh)) buffer_st4(top_tm_blob_data, gi + 16, sum1);
    if (gy + 2 < psc(outh)) buffer_st4(top_tm_blob_data, gi + 32, sum2);
    if (gy + 3 < psc(outh)) buffer_st4(top_tm_blob_data, gi + 48, sum3);
#endif
}
