// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_tm_blob { sfpvec4 bottom_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_tm_blob { sfpvec4 top_tm_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_tm_blob { sfpvec4 weight_tm_data[]; };
#else
layout (binding = 2) readonly buffer weight_tm_blob { sfpmat4 weight_tm_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int block;

    int c;
    int cstep;

    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= 16 || gy >= p.block || gz >= p.outc)
        return;

    afpvec4 sum = afpvec4(0.f);

    int v_offset = gy * 16 + gx;
    int w_offset = gz * p.c * 16 + gx;

    for (int z = 0; z < p.c; z++)
    {
        afpvec4 v = sfp2afpvec4(bottom_tm_blob_data[v_offset]);

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
        // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
        afpmat4 k = afpmat4(
            sfp2afpvec4(weight_tm_data[w_offset * 4 + 0]),
            sfp2afpvec4(weight_tm_data[w_offset * 4 + 1]),
            sfp2afpvec4(weight_tm_data[w_offset * 4 + 2]),
            sfp2afpvec4(weight_tm_data[w_offset * 4 + 3])
        );
#else
        afpmat4 k = sfpmat4(weight_tm_data[w_offset]);
#endif

        sum += v * k;

        v_offset += p.cstep;
        w_offset += 16;
    }

    top_tm_blob_data[gz * p.outcstep + gy * 16 + gx] = afp2sfpvec4(sum);
}
