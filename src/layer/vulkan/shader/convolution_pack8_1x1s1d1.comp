// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int size = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outsize = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfpvec8 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfpvec8 weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfpvec8 bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int size;
    int c;
    int cstep;

    int outdims;
    int outsize;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outsize) || gy >= 1 || gz >= psc(outc))
        return;

    afpvec8 sum0;
    afpvec8 sum1;
    afpvec8 sum2;
    afpvec8 sum3;

    if (bias_term == 1)
    {
        afpvec8 b = buffer_ld8(bias_data, gz);
        sum0 = b;
        sum1 = b;
        sum2 = b;
        sum3 = b;
    }
    else
    {
        sum0 = afpvec8(afpvec4(0.f), afpvec4(0.f));
        sum1 = afpvec8(afpvec4(0.f), afpvec4(0.f));
        sum2 = afpvec8(afpvec4(0.f), afpvec4(0.f));
        sum3 = afpvec8(afpvec4(0.f), afpvec4(0.f));
    }

    int w_offset = gz * psc(c) * 8;
    int v_offset = gx;

    for (int z = 0; z < psc(c); z++)
    {
        afpvec8 v0 = buffer_ld8(bottom_blob_data, v_offset + 0);
        afpvec8 v1 = buffer_ld8(bottom_blob_data, v_offset + 1);
        afpvec8 v2 = buffer_ld8(bottom_blob_data, v_offset + 2);
        afpvec8 v3 = buffer_ld8(bottom_blob_data, v_offset + 3);

        afpvec8 k0 = buffer_ld8(weight_data, w_offset + 0);
        afpvec8 k1 = buffer_ld8(weight_data, w_offset + 1);
        afpvec8 k2 = buffer_ld8(weight_data, w_offset + 2);
        afpvec8 k3 = buffer_ld8(weight_data, w_offset + 3);
        afpvec8 k4 = buffer_ld8(weight_data, w_offset + 4);
        afpvec8 k5 = buffer_ld8(weight_data, w_offset + 5);
        afpvec8 k6 = buffer_ld8(weight_data, w_offset + 6);
        afpvec8 k7 = buffer_ld8(weight_data, w_offset + 7);

        // sum += v * k
        sum0[0].r += dot(v0[0], k0[0]) + dot(v0[1], k0[1]);
        sum0[0].g += dot(v0[0], k1[0]) + dot(v0[1], k1[1]);
        sum0[0].b += dot(v0[0], k2[0]) + dot(v0[1], k2[1]);
        sum0[0].a += dot(v0[0], k3[0]) + dot(v0[1], k3[1]);
        sum0[1].r += dot(v0[0], k4[0]) + dot(v0[1], k4[1]);
        sum0[1].g += dot(v0[0], k5[0]) + dot(v0[1], k5[1]);
        sum0[1].b += dot(v0[0], k6[0]) + dot(v0[1], k6[1]);
        sum0[1].a += dot(v0[0], k7[0]) + dot(v0[1], k7[1]);

        sum1[0].r += dot(v1[0], k0[0]) + dot(v1[1], k0[1]);
        sum1[0].g += dot(v1[0], k1[0]) + dot(v1[1], k1[1]);
        sum1[0].b += dot(v1[0], k2[0]) + dot(v1[1], k2[1]);
        sum1[0].a += dot(v1[0], k3[0]) + dot(v1[1], k3[1]);
        sum1[1].r += dot(v1[0], k4[0]) + dot(v1[1], k4[1]);
        sum1[1].g += dot(v1[0], k5[0]) + dot(v1[1], k5[1]);
        sum1[1].b += dot(v1[0], k6[0]) + dot(v1[1], k6[1]);
        sum1[1].a += dot(v1[0], k7[0]) + dot(v1[1], k7[1]);

        sum2[0].r += dot(v2[0], k0[0]) + dot(v2[1], k0[1]);
        sum2[0].g += dot(v2[0], k1[0]) + dot(v2[1], k1[1]);
        sum2[0].b += dot(v2[0], k2[0]) + dot(v2[1], k2[1]);
        sum2[0].a += dot(v2[0], k3[0]) + dot(v2[1], k3[1]);
        sum2[1].r += dot(v2[0], k4[0]) + dot(v2[1], k4[1]);
        sum2[1].g += dot(v2[0], k5[0]) + dot(v2[1], k5[1]);
        sum2[1].b += dot(v2[0], k6[0]) + dot(v2[1], k6[1]);
        sum2[1].a += dot(v2[0], k7[0]) + dot(v2[1], k7[1]);

        sum3[0].r += dot(v3[0], k0[0]) + dot(v3[1], k0[1]);
        sum3[0].g += dot(v3[0], k1[0]) + dot(v3[1], k1[1]);
        sum3[0].b += dot(v3[0], k2[0]) + dot(v3[1], k2[1]);
        sum3[0].a += dot(v3[0], k3[0]) + dot(v3[1], k3[1]);
        sum3[1].r += dot(v3[0], k4[0]) + dot(v3[1], k4[1]);
        sum3[1].g += dot(v3[0], k5[0]) + dot(v3[1], k5[1]);
        sum3[1].b += dot(v3[0], k6[0]) + dot(v3[1], k6[1]);
        sum3[1].a += dot(v3[0], k7[0]) + dot(v3[1], k7[1]);

        w_offset += 8;
        v_offset += psc(cstep);
    }

    if (activation_type == 1)
    {
        sum0[0] = max(sum0[0], afp(0.f));
        sum0[1] = max(sum0[1], afp(0.f));
        sum1[0] = max(sum1[0], afp(0.f));
        sum1[1] = max(sum1[1], afp(0.f));
        sum2[0] = max(sum2[0], afp(0.f));
        sum2[1] = max(sum2[1], afp(0.f));
        sum3[0] = max(sum3[0], afp(0.f));
        sum3[1] = max(sum3[1], afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum0[0] = mix(sum0[0], sum0[0] * afp(slope), lessThan(sum0[0], afpvec4(0.f)));
        sum0[1] = mix(sum0[1], sum0[1] * afp(slope), lessThan(sum0[1], afpvec4(0.f)));
        sum1[0] = mix(sum1[0], sum1[0] * afp(slope), lessThan(sum1[0], afpvec4(0.f)));
        sum1[1] = mix(sum1[1], sum1[1] * afp(slope), lessThan(sum1[1], afpvec4(0.f)));
        sum2[0] = mix(sum2[0], sum2[0] * afp(slope), lessThan(sum2[0], afpvec4(0.f)));
        sum2[1] = mix(sum2[1], sum2[1] * afp(slope), lessThan(sum2[1], afpvec4(0.f)));
        sum3[0] = mix(sum3[0], sum3[0] * afp(slope), lessThan(sum3[0], afpvec4(0.f)));
        sum3[1] = mix(sum3[1], sum3[1] * afp(slope), lessThan(sum3[1], afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum0[0] = clamp(sum0[0], const_min, const_max);
        sum0[1] = clamp(sum0[1], const_min, const_max);
        sum1[0] = clamp(sum1[0], const_min, const_max);
        sum1[1] = clamp(sum1[1], const_min, const_max);
        sum2[0] = clamp(sum2[0], const_min, const_max);
        sum2[1] = clamp(sum2[1], const_min, const_max);
        sum3[0] = clamp(sum3[0], const_min, const_max);
        sum3[1] = clamp(sum3[1], const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum0[0] = afp(1.f) / (afp(1.f) + exp(-sum0[0]));
        sum0[1] = afp(1.f) / (afp(1.f) + exp(-sum0[1]));
        sum1[0] = afp(1.f) / (afp(1.f) + exp(-sum1[0]));
        sum1[1] = afp(1.f) / (afp(1.f) + exp(-sum1[1]));
        sum2[0] = afp(1.f) / (afp(1.f) + exp(-sum2[0]));
        sum2[1] = afp(1.f) / (afp(1.f) + exp(-sum2[1]));
        sum3[0] = afp(1.f) / (afp(1.f) + exp(-sum3[0]));
        sum3[1] = afp(1.f) / (afp(1.f) + exp(-sum3[1]));
    }

    int gi = gz * psc(outcstep) + gx;

    buffer_st8(top_blob_data, gi + 0, sum0);
    if (gx + 1 < psc(outcstep)) buffer_st8(top_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outcstep)) buffer_st8(top_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outcstep)) buffer_st8(top_blob_data, gi + 3, sum3);
}
