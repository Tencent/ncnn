// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int kernel_w = 1;
layout (constant_id = 1) const int kernel_h = 1;
layout (constant_id = 2) const int dilation_w = 1;
layout (constant_id = 3) const int dilation_h = 1;
layout (constant_id = 4) const int stride_w = 1;
layout (constant_id = 5) const int stride_h = 1;
layout (constant_id = 6) const int bias_term = 0;
layout (constant_id = 7) const int activation_type = 0;
layout (constant_id = 8) const float activation_param_0 = 0;
layout (constant_id = 9) const float activation_param_1 = 0;

#define shape_constant_id_offset 10
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D weight_blob;
layout (binding = 3) uniform unfp sampler1D bias_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
// GL_EXT_shader_16bit_storage does not define f16mat4 type :(
layout (binding = 2) readonly buffer weight_blob { sfpvec4 weight_data[]; };
#else
layout (binding = 2) readonly buffer weight_blob { sfpmat4 weight_data[]; };
#endif
layout (binding = 3) readonly buffer bias_blob { sfpvec4 bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
#if NCNN_image_shader
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) * psc(outh) || gy >= 1 || gz >= psc(outc))
        return;
#else
    int gx = int(gl_GlobalInvocationID.x) * 4;
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outcstep) || gy >= 1 || gz >= psc(outc))
        return;
#endif

    afpvec4 sum0;
    afpvec4 sum1;
    afpvec4 sum2;
    afpvec4 sum3;

    if (bias_term == 1)
    {
#if NCNN_image_shader
        afpvec4 b = image1d_ld4(bias_blob, gz);
#else
        afpvec4 b = buffer_ld4(bias_data, gz);
#endif
        sum0 = b;
        sum1 = b;
        sum2 = b;
        sum3 = b;
    }
    else
    {
        sum0 = afpvec4(0.f);
        sum1 = afpvec4(0.f);
        sum2 = afpvec4(0.f);
        sum3 = afpvec4(0.f);
    }

#if NCNN_image_shader
    ivec4 gx4 = gx + ivec4(0, 1, 2, 3);

    ivec4 sy4 = gx4 / psc(w);
    ivec4 sx4 = gx4 % psc(w);

    for (int z = 0; z < psc(c); z++)
    {
        afpvec4 v0 = image3d_ld4(bottom_blob, ivec3(sx4.r, sy4.r, z));
        afpvec4 v1 = image3d_ld4(bottom_blob, ivec3(sx4.g, sy4.g, z));
        afpvec4 v2 = image3d_ld4(bottom_blob, ivec3(sx4.b, sy4.b, z));
        afpvec4 v3 = image3d_ld4(bottom_blob, ivec3(sx4.a, sy4.a, z));

        afpmat4 k = afpmat4(
            image3d_ld4(weight_blob, ivec3(0, z, gz)),
            image3d_ld4(weight_blob, ivec3(1, z, gz)),
            image3d_ld4(weight_blob, ivec3(2, z, gz)),
            image3d_ld4(weight_blob, ivec3(3, z, gz))
        );

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;
    }
#else
    int w_offset = gz * psc(c);
    int v_offset = gx;

    for (int z = 0; z < psc(c); z++)
    {
        afpvec4 v0 = buffer_ld4(bottom_blob_data, v_offset + 0);
        afpvec4 v1 = buffer_ld4(bottom_blob_data, v_offset + 1);
        afpvec4 v2 = buffer_ld4(bottom_blob_data, v_offset + 2);
        afpvec4 v3 = buffer_ld4(bottom_blob_data, v_offset + 3);

#if NCNN_fp16_packed || (NCNN_fp16_storage && !NCNN_fp16_arithmetic)
        // GL_EXT_shader_16bit_storage does not define f16mat4 type :(
        afpmat4 k = afpmat4(
            buffer_ld4(weight_data, w_offset * 4 + 0),
            buffer_ld4(weight_data, w_offset * 4 + 1),
            buffer_ld4(weight_data, w_offset * 4 + 2),
            buffer_ld4(weight_data, w_offset * 4 + 3)
        );
#else
        afpmat4 k = sfp2afpmat4(weight_data[w_offset]);
#endif

        sum0 += v0 * k;
        sum1 += v1 * k;
        sum2 += v2 * k;
        sum3 += v3 * k;

        w_offset += 1;
        v_offset += psc(cstep);
    }
#endif

    if (activation_type == 1)
    {
        sum0 = max(sum0, afp(0.f));
        sum1 = max(sum1, afp(0.f));
        sum2 = max(sum2, afp(0.f));
        sum3 = max(sum3, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        sum0 = mix(sum0, sum0 * afp(slope), lessThan(sum0, afpvec4(0.f)));
        sum1 = mix(sum1, sum1 * afp(slope), lessThan(sum1, afpvec4(0.f)));
        sum2 = mix(sum2, sum2 * afp(slope), lessThan(sum2, afpvec4(0.f)));
        sum3 = mix(sum3, sum3 * afp(slope), lessThan(sum3, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        sum0 = clamp(sum0, const_min, const_max);
        sum1 = clamp(sum1, const_min, const_max);
        sum2 = clamp(sum2, const_min, const_max);
        sum3 = clamp(sum3, const_min, const_max);
    }
    if (activation_type == 4)
    {
        sum0 = afp(1.f) / (afp(1.f) + exp(-sum0));
        sum1 = afp(1.f) / (afp(1.f) + exp(-sum1));
        sum2 = afp(1.f) / (afp(1.f) + exp(-sum2));
        sum3 = afp(1.f) / (afp(1.f) + exp(-sum3));
    }
    if (activation_type == 5)
    {
        sum0 = sum0 * tanh(log(exp(sum0) + afp(1.f)));
        sum1 = sum1 * tanh(log(exp(sum1) + afp(1.f)));
        sum2 = sum2 * tanh(log(exp(sum2) + afp(1.f)));
        sum3 = sum3 * tanh(log(exp(sum3) + afp(1.f)));
    }

#if NCNN_image_shader
    image3d_st4(top_blob, ivec3(sx4.r, sy4.r, gz), sum0);
    image3d_st4(top_blob, ivec3(sx4.g, sy4.g, gz), sum1);
    image3d_st4(top_blob, ivec3(sx4.b, sy4.b, gz), sum2);
    image3d_st4(top_blob, ivec3(sx4.a, sy4.a, gz), sum3);
#else
    int gi = gz * psc(outcstep) + gx;

    buffer_st4(top_blob_data, gi + 0, sum0);
    if (gx + 1 < psc(outcstep)) buffer_st4(top_blob_data, gi + 1, sum1);
    if (gx + 2 < psc(outcstep)) buffer_st4(top_blob_data, gi + 2, sum2);
    if (gx + 3 < psc(outcstep)) buffer_st4(top_blob_data, gi + 3, sum3);
#endif
}
