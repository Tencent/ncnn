// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int adims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int aw = 0;
layout (constant_id = shape_constant_id_offset + 2) const int ah = 0;
layout (constant_id = shape_constant_id_offset + 3) const int ac = 0;
layout (constant_id = shape_constant_id_offset + 4) const int acstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int bdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int bw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int bh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int bc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int bcstep = 0;

layout (constant_id = shape_constant_id_offset + 10) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 11) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 12) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 13) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 14) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D a_blob_3d;
layout (binding = 1) uniform unfp sampler3D b_blob_3d;
layout (binding = 2, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer a_blob { sfpvec4 a_blob_data[]; };
layout (binding = 1) readonly buffer b_blob { sfp b_blob_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int adims;
    int aw;
    int ah;
    int ac;
    int acstep;

    int bdims;
    int bw;
    int bh;
    int bc;
    int bcstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
        return;

#if NCNN_image_shader
    afpvec4 v2;

    if (psc(bdims) == 3 && psc(bw) == psc(aw) && psc(bh) == psc(ah) && psc(bc) == 1)
    {
        // special type 2
        v2 = afpvec4(image3d_ld1(b_blob_3d, ivec3(gx, gy, 0)));
    }
    else
    {
        v2 = afpvec4(image3d_ld1(b_blob_3d, ivec3(0, 0, 0)));
    }

    afpvec4 v1 = image3d_ld4(a_blob_3d, ivec3(gx, gy, gz));
#else
    const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

    int bi = 0;

    if (psc(bdims) == 3 && psc(bw) == psc(aw) && psc(bh) == psc(ah) && psc(bc) == 1)
    {
        // special type 2
        bi = gy * psc(bw) + gx;
    }

    // type 6 11 16
    afpvec4 v1 = buffer_ld4(a_blob_data, gi);
    afpvec4 v2 = afpvec4(buffer_ld1(b_blob_data, bi));
#endif

    afpvec4 res;

    if (op_type == 0) res = v1 + v2;
    if (op_type == 1) res = v1 - v2;
    if (op_type == 2) res = v1 * v2;
    if (op_type == 3) res = v1 / v2;
    if (op_type == 4) res = max(v1, v2);
    if (op_type == 5) res = min(v1, v2);
    if (op_type == 6) res = pow(v1, v2);
    if (op_type == 7) res = v2 - v1;
    if (op_type == 8) res = v2 / v1;

#if NCNN_image_shader
    image3d_st4(top_blob_3d, ivec3(gx, gy, gz), res);
#else
    buffer_st4(top_blob_data, gi, res);
#endif
}
