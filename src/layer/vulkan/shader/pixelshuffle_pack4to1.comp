// Copyright 2020 Tencent
// SPDX-License-Identifier: BSD-3-Clause

#version 450

layout (constant_id = 0) const int upscale_factor = 0;
layout (constant_id = 1) const int mode = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
        return;

    ivec4 gz4 = gz * 4 + ivec4(0, 1, 2, 3);

    ivec4 z4;
    ivec4 zi4;
    if (mode == 0)
    {
        z4 = gz4 / (upscale_factor * upscale_factor);
        zi4 = gz4 % (upscale_factor * upscale_factor);
    }
    else // if (mode == 1)
    {
        z4 = gz4 % psc(outc);
        zi4 = gz4 / psc(outc);
    }
    ivec4 y4 = gy * upscale_factor + zi4 / upscale_factor;
    ivec4 x4 = gx * upscale_factor + zi4 % upscale_factor;

    ivec4 v_offset = z4 * psc(outcstep) + y4 * psc(outw) + x4;

    int gi = gz * psc(cstep) + gy * psc(w) + gx;

    buffer_cp4to1(top_blob_data, v_offset, bottom_blob_data, gi);
}
