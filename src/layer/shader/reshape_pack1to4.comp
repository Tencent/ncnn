// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

layout (constant_id = 0) const int ndim = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { vec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    ivec4 i4;

    if (ndim == 1) i4 = gx * 4 + ivec4(0, 1, 2, 3);
    if (ndim == 2) i4 = (gy * 4) * p.outw + gx + ivec4(0, 1, 2, 3) * p.outw;
    if (ndim == 3) i4 = (gz * 4) * p.outh * p.outw + gy * p.outw + gx + ivec4(0, 1, 2, 3) * p.outh * p.outw;

    int size = p.w * p.h;

    ivec4 z4 = i4 / size;
    ivec4 y4 = i4 % size / p.w;
    ivec4 x4 = i4 % size % p.w;

    ivec4 v_offset = z4 * p.cstep + y4 * p.w + x4;

    vec4 v;
    v.r = bottom_blob_data[v_offset.r];
    v.g = bottom_blob_data[v_offset.g];
    v.b = bottom_blob_data[v_offset.b];
    v.a = bottom_blob_data[v_offset.a];

    if (ndim == 1) top_blob_data[gx] = v;
    if (ndim == 2) top_blob_data[gy * p.outw + gx] = v;
    if (ndim == 3) top_blob_data[gz * p.outcstep + gy * p.outw + gx] = v;
}
