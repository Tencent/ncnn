// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (constant_id = 0) const int bias_term = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfpvec4 bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 2) readonly buffer weight_blob { sfp weight_data[]; };
layout (binding = 3) readonly buffer bias_blob { sfp bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int size_4;
    int c;
    int cstep_4;

    int outdims;
    int outsize_4;
    int outc;
    int outcstep_4;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outsize_4 || gy >= 1 || gz >= p.outc)
        return;

    afpvec4 sum;

    if (bias_term == 1)
    {
        sum = afpvec4(bias_data[gz]);
    }
    else
    {
        sum = afpvec4(0.f);
    }

    int w_offset = gz * p.c;
    int v_offset = gx;

    for (int z = 0; z < p.c; z++)
    {
        sum += afp(weight_data[w_offset]) * afpvec4(bottom_blob_data[v_offset]);

        w_offset += 1;
        v_offset += p.cstep_4;
    }

    top_blob_data[gz * p.outcstep_4 + gx] = sfpvec4(sum);
}
