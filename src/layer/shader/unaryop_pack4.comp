// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

layout (constant_id = 0) const int op_type = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) buffer bottom_top_blob { vec4 bottom_top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.w || gy >= p.h || gz >= p.c)
        return;

    const int gi = gz * p.cstep + gy * p.w + gx;

    vec4 v = bottom_top_blob_data[gi];

    vec4 res;

    if (op_type == 0) res = abs(v);
    if (op_type == 1) res = -v;
    if (op_type == 2) res = floor(v);
    if (op_type == 3) res = ceil(v);
    if (op_type == 4) res = v * v;
    if (op_type == 5) res = sqrt(v);
    if (op_type == 6) res = inversesqrt(v);
    if (op_type == 7) res = exp(v);
    if (op_type == 8) res = log(v);
    if (op_type == 9) res = sin(v);
    if (op_type == 10) res = cos(v);
    if (op_type == 11) res = tan(v);
    if (op_type == 12) res = asin(v);
    if (op_type == 13) res = acos(v);
    if (op_type == 14) res = atan(v);
    if (op_type == 15) res = 1.f / v;

    bottom_top_blob_data[gi] = res;
}
