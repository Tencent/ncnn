// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_AMD_gpu_shader_half_float: require
#endif

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= 1 || gz >= 1)
        return;

    ivec4 v_offset;

    if (p.dims == 2)
    {
        int y = gx / p.w;
        ivec4 i4 = (gx % p.w) * 4 + ivec4(0, 1, 2, 3);

        ivec4 k4 = i4 / p.w;
        ivec4 si4 = i4 % p.w;

        v_offset = ivec4(y * 4 * p.w) + si4 * 4 + k4;
    }
    else // if (p.dims == 3)
    {
        int size = p.w * p.h;

        int z = gx / size;
        ivec4 i4 = (gx % size) * 4 + ivec4(0, 1, 2, 3);

        ivec4 k4 = i4 / size;
        ivec4 si4 = i4 % size;

        v_offset = ivec4(z * 4 * p.cstep) + si4 * 4 + k4;
    }

    top_blob_data[gx].r = bottom_blob_data[v_offset.r];
    top_blob_data[gx].g = bottom_blob_data[v_offset.g];
    top_blob_data[gx].b = bottom_blob_data[v_offset.b];
    top_blob_data[gx].a = bottom_blob_data[v_offset.a];
}
