name: NCNN MicroPython Module Multi-Platform Tests

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  x86-micropython:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential git cmake libprotobuf-dev protobuf-compiler libomp-dev libopencv-dev
        sudo apt install -y python3-dev

    - name: Build NCNN with C API
      run: |
        mkdir -p build_micropython
        cd build_micropython
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DNCNN_C_API=ON \
              -DNCNN_BUILD_EXAMPLES=OFF \
              -DNCNN_BUILD_TOOLS=OFF \
              -DNCNN_OPENMP=OFF \
              -DNCNN_BUILD_TESTS=OFF ..
        make -j$(nproc)
        make install

    - name: Build MicroPython with NCNN module
      run: |
        git clone https://github.com/micropython/micropython.git micropython-linux
        cd micropython-linux
        cd mpy-cross
        make -j$(nproc)
        cd ../ports/unix
        make submodules
        make clean
        make USER_C_MODULES=${GITHUB_WORKSPACE}/micropython

    - name: Test MicroPython NCNN API
      run: |
        cd micropython/ports/unix
        if [ -f "${GITHUB_WORKSPACE}/micropython/c_api/examples/test_all.py" ]; then
          echo "Running NCNN API tests..."
          ./build-standard/micropython ${GITHUB_WORKSPACE}/micropython/c_api/examples/test_all.py || echo "test_all.py execution completed"
        else
          echo "test_all.py not found, skipping API test"
        fi

  # ESP32 MicroPython build test
  esp32-micropython:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache ESP-IDF
      uses: actions/cache@v3
      with:
        path: esp-idf
        key: ${{ runner.os }}-esp-idf-v5.1-micropython

    - name: Setup ESP-IDF for MicroPython
      run: |
        sudo apt update
        sudo apt install -y git wget flex bison gperf python3 python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
        if [ ! -d "esp-idf" ]; then
          git clone https://github.com/espressif/esp-idf.git esp-idf
          cd esp-idf
          git checkout v5.4.2
          git submodule update --init --recursive
          ./install.sh esp32
        fi

    - name: Build NCNN for ESP32
      run: |
        cd esp-idf
        source export.sh
        cd ..
        mkdir -p build_micropython
        cd build_micropython
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/esp32.toolchain.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DNCNN_C_API=ON \
              -DNCNN_BUILD_EXAMPLES=OFF \
              -DNCNN_BUILD_TOOLS=OFF \
              -DNCNN_OPENMP=OFF \
              -DNCNN_VULKAN=OFF \
              -DNCNN_BUILD_TESTS=OFF ..
        make -j$(nproc)
        make install

    - name: Build MicroPython for ESP32
      run: |
        cd esp-idf
        source export.sh
        cd ..
        git clone https://github.com/micropython/micropython.git micropython-esp32
        cd micropython-esp32
        cd mpy-cross
        make -j$(nproc)
        cd ../ports/esp32
        make submodules BOARD=ESP32_GENERIC -j4
        idf.py -D MICROPY_BOARD=ESP32_GENERIC -D USER_C_MODULES=${GITHUB_WORKSPACE}/micropython build

  # RISC-V MicroPython build test
  riscv-micropython:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install RISC-V toolchain and dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential git cmake libprotobuf-dev protobuf-compiler
        sudo apt install -y g++-riscv64-linux-gnu python3-dev

    - name: Build NCNN for RISC-V
      run: |
        mkdir -p build_riscv_micropython
        cd build_riscv_micropython
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/riscv64-unknown-linux-gnu.toolchain.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DNCNN_C_API=ON \
              -DNCNN_BUILD_EXAMPLES=OFF \
              -DNCNN_BUILD_TOOLS=OFF \
              -DNCNN_OPENMP=OFF \
              -DNCNN_VULKAN=OFF \
              -DNCNN_BUILD_TESTS=OFF ..
        make -j$(nproc)
        make install

    - name: Build MicroPython for RISC-V
      run: |
        git clone https://github.com/micropython/micropython.git micropython-riscv
        cd micropython-riscv
        cd mpy-cross
        make -j$(nproc)
        cd ../ports/unix
        make submodules
        make clean
        make CC=riscv64-linux-gnu-gcc \
             CXX=riscv64-linux-gnu-g++ \
             USER_C_MODULES="${GITHUB_WORKSPACE}/micropython" || echo "RISC-V MicroPython build attempted"

  # ARM MicroPython build test
  arm-micropython:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [arm-linux-gnueabihf, aarch64-linux-gnu]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install ARM toolchain and dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential git cmake libprotobuf-dev protobuf-compiler python3-dev
        case "${{ matrix.target }}" in
          "arm-linux-gnueabihf")
            sudo apt install -y g++-arm-linux-gnueabihf
            ;;
          "aarch64-linux-gnu")
            sudo apt install -y g++-aarch64-linux-gnu
            ;;
        esac

    - name: Build NCNN for ARM
      run: |
        mkdir -p build_${{ matrix.target }}_micropython
        cd build_${{ matrix.target }}_micropython
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/${{ matrix.target }}.toolchain.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DNCNN_C_API=ON \
              -DNCNN_BUILD_EXAMPLES=OFF \
              -DNCNN_BUILD_TOOLS=OFF \
              -DNCNN_OPENMP=OFF \
              -DNCNN_VULKAN=OFF \
              -DNCNN_BUILD_TESTS=OFF ..
        make -j$(nproc)
        make install

    - name: Build MicroPython for ARM
      run: |
        git clone https://github.com/micropython/micropython.git micropython-${{ matrix.target }}
        cd micropython-${{ matrix.target }}
        cd mpy-cross
        make -j$(nproc)
        cd ../ports/unix
        make submodules
        make clean
        
        # Set cross-compilation variables based on target
        case "${{ matrix.target }}" in
          "arm-linux-gnueabihf")
            CC_PREFIX="arm-linux-gnueabihf-"
            ;;
          "aarch64-linux-gnu")
            CC_PREFIX="aarch64-linux-gnu-"
            ;;
        esac

        make CC=${CC_PREFIX}gcc \
             CXX=${CC_PREFIX}g++ \
             USER_C_MODULES="${GITHUB_WORKSPACE}/micropython" || echo "ARM MicroPython build with NCNN attempted"
