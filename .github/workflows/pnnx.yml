name: pnnx
on:
  push:
    branches: [master]
    paths:
    - '.github/workflows/pnnx.yml'
    - 'src/layer/*'
    - 'tools/pnnx/**'
    - '!tools/pnnx/README.md'
  pull_request:
    branches: [master]
    paths:
    - '.github/workflows/pnnx.yml'
    - 'src/layer/*'
    - 'tools/pnnx/**'
    - '!tools/pnnx/README.md'
concurrency:
  group: pnnx-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read

env:
  libtorch_version: 2.7.0
  libtorchvision_version: 0.22.0
  protobuf_version: 21.12
  onnxruntime_version: 1.21.1
  cache_date: 20250423

jobs:
  quick-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      PYTHONUSERBASE: ${{ github.workspace }}/torch
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: setup-pytorch
      run: |
        python3 -m pip config set global.break-system-packages true
        pip3 install --user torch --index-url https://download.pytorch.org/whl/cpu
        pip3 install --user numpy packaging

    - name: build-pnnx
      run: |
        cd tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release -j 4

    - name: quick-test
      if: matrix.os != 'windows-latest'
      run: |
        cd tools/pnnx
        cd build && ctest -C Release --output-on-failure -R test_nn_Conv

  build-deps:
    name: torch-${{ env.libtorch_version }}
    runs-on: [self-hosted, linux, ubuntu25]

    steps:
    - name: pnnx-patches
      uses: actions/checkout@v4
      with:
        repository: pnnx/pnnx
        path: pnnx-patches

    - name: cache-libtorch-${{ env.libtorch_version }}
      id: cache-libtorch
      uses: actions/cache@v4
      with:
        path: libtorch-${{ env.libtorch_version }}-install
        key: libtorch-${{ env.libtorch_version }}-linux-install-${{ env.cache_date }}

    - name: libtorch-${{ env.libtorch_version }}
      if: steps.cache-libtorch.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/pytorch/releases/download/v${{ env.libtorch_version }}/pytorch-v${{ env.libtorch_version }}.tar.gz
        tar -xf pytorch-v${{ env.libtorch_version }}.tar.gz
        cd pytorch-v${{ env.libtorch_version }}
        pip3 install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.libtorch_version }}-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.libtorch_version }}-no-link-system-lib.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.libtorch_version }}-fix-pocketfft-build.patch
        mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/libtorch-${{ env.libtorch_version }}-install \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DBUILD_CUSTOM_PROTOBUF=OFF \
            -DBUILD_LITE_INTERPRETER=OFF \
            -DBUILD_PYTHON=OFF \
            -DINTERN_BUILD_MOBILE=ON \
            -DINTERN_DISABLE_AUTOGRAD=ON \
            -DINTERN_DISABLE_ONNX=ON \
            -DUSE_CUDA=OFF \
            -DUSE_DISTRIBUTED=OFF \
            -DUSE_ITT=OFF \
            -DUSE_KINETO=OFF \
            -DUSE_LITE_INTERPRETER_PROFILER=OFF \
            -DUSE_MKLDNN=OFF \
            -DUSE_MPS=OFF \
            -DUSE_NUMPY=OFF \
            -DUSE_OPENMP=OFF \
            -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF \
            -DUSE_XNNPACK=OFF ..
        cmake --build . -j 8
        cmake --build . -j 8 --target install/strip

    # - name: cache-torchvision-${{ env.libtorchvision_version }}
    #   id: cache-torchvision
    #   uses: actions/cache@v4
    #   with:
    #     path: torchvision-${{ env.libtorchvision_version }}-install
    #     key: torchvision-${{ env.libtorchvision_version }}-linux-install-${{ env.cache_date }}
    #
    # - name: checkout-torchvision-${{ env.libtorchvision_version }}
    #   if: steps.cache-torchvision.outputs.cache-hit != 'true'
    #   run: |
    #     wget -q https://github.com/pytorch/vision/archive/v${{ env.libtorchvision_version }}.zip -O vision-${{ env.libtorchvision_version }}.zip
    #     unzip -q vision-${{ env.libtorchvision_version }}.zip
    #     cd vision-${{ env.libtorchvision_version }}
    #     patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.libtorchvision_version }}-ops-only.patch
    #     patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.libtorchvision_version }}-no-cuda-version.patch
    #     mkdir -p build && cd build
    #     cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/torchvision-${{ env.libtorchvision_version }}-install \
    #         -DTorch_DIR=$GITHUB_WORKSPACE/libtorch-${{ env.libtorch_version }}-install/share/cmake/Torch \
    #         -DCMAKE_BUILD_TYPE=MinSizeRel \
    #         -DWITH_PNG=OFF \
    #         -DWITH_JPEG=OFF ..
    #     cmake --build . -j 8
    #     cmake --build . -j 8 --target install/strip

    # - name: cache-onnxruntime-${{ env.onnxruntime_version }}
    #   id: cache-onnxruntime
    #   uses: actions/cache@v4
    #   with:
    #     path: onnxruntime-${{ env.onnxruntime_version }}-install
    #     key: onnxruntime-${{ env.onnxruntime_version }}-linux-install-${{ env.cache_date }}
    #
    # - name: checkout-onnxruntime-${{ env.onnxruntime_version }}
    #   if: steps.cache-onnxruntime.outputs.cache-hit != 'true'
    #   run: |
    #     wget -q https://github.com/protocolbuffers/protobuf/archive/v${{ env.protobuf_version }}.zip -O protobuf-${{ env.protobuf_version }}.zip
    #     unzip -q protobuf-${{ env.protobuf_version }}.zip
    #     cd protobuf-${{ env.protobuf_version }}
    #     mkdir -p build2 && cd build2
    #     cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/onnxruntime-${{ env.onnxruntime_version }}-install \
    #         -Dprotobuf_BUILD_TESTS=OFF \
    #         -DCMAKE_BUILD_TYPE=MinSizeRel \
    #         -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..
    #     cmake --build . -j 8
    #     cmake --build . -j 8 --target install/strip
    #
    #     wget -q https://github.com/microsoft/onnxruntime/archive/v${{ env.onnxruntime_version }}.zip -O onnxruntime-${{ env.onnxruntime_version }}.zip
    #     unzip -q onnxruntime-${{ env.onnxruntime_version }}.zip
    #     cd onnxruntime-${{ env.onnxruntime_version }}
    #     patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/onnxruntime-${{ env.onnxruntime_version }}-less-mlas-features.patch
    #     patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/onnxruntime-${{ env.onnxruntime_version }}-monolithic-static-library.patch
    #     mkdir -p build && cd build
    #     cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/onnxruntime-${{ env.onnxruntime_version }}-install \
    #         -DCMAKE_BUILD_TYPE=MinSizeRel \
    #         -Donnxruntime_USE_FULL_PROTOBUF=ON \
    #         -Donnxruntime_BUILD_SHARED_LIB=ON \
    #         -Donnxruntime_BUILD_UNIT_TESTS=OFF \
    #         -Donnxruntime_ENABLE_CPUINFO=OFF \
    #         -Donnxruntime_DISABLE_CONTRIB_OPS=ON \
    #         -Donnxruntime_DISABLE_ML_OPS=ON \
    #         -Donnxruntime_DISABLE_SPARSE_TENSORS=ON \
    #         -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    #         --compile-no-warning-as-error ../cmake
    #     cmake --build . -j 8
    #     cmake --build . -j 8 --target install/strip
